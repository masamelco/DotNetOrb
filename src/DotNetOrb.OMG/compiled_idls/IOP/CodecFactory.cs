/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:28
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace IOP
{
	public abstract partial class CodecFactory : CORBA.Object, IOP.ICodecFactory
	{
		[IdlName("UnknownEncoding")]
		[RepositoryID("IDL:IOP/CodecFactory/UnknownEncoding:1.0")]
		[Helper(typeof(UnknownEncodingHelper))]
		public partial class UnknownEncoding: CORBA.UserException, CORBA.IIDLEntity, IEquatable<IOP.CodecFactory.UnknownEncoding>
		{
			public UnknownEncoding()
			{
			}

			public UnknownEncoding(string _msg): base(_msg)
			{
			}

			public UnknownEncoding(UnknownEncoding other)
			{
			}

			public bool Equals(IOP.CodecFactory.UnknownEncoding? other)
			{
				if (other == null) return false;
				return true;
			}
		}

		public static class UnknownEncodingHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(UnknownEncodingHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(IOP.CodecFactory.UnknownEncodingHelper.Id(), "UnknownEncoding", new CORBA.StructMember[] {});
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, IOP.CodecFactory.UnknownEncoding e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static IOP.CodecFactory.UnknownEncoding Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:IOP/CodecFactory/UnknownEncoding:1.0";
			}

			public static IOP.CodecFactory.UnknownEncoding Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new IOP.CodecFactory.UnknownEncoding();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, IOP.CodecFactory.UnknownEncoding e)
			{
				outputStream.WriteString(Id());
			}

		}
		[IdlName("create_codec")]
		[ThrowsIdlException(typeof(IOP.CodecFactory.UnknownEncoding))]
		public abstract IOP.ICodec CreateCodec(IOP.Encoding enc);
	}
}

