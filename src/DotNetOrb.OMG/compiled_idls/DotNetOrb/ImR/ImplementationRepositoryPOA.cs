/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:37
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace DotNetOrb.ImR
{

	public abstract class ImplementationRepositoryPOA: PortableServer.Servant, CORBA.IInvokeHandler, IImplementationRepositoryOperations
	{
		static private Dictionary<string,int> _opsDict = new Dictionary<string,int>();
		static ImplementationRepositoryPOA()
		{
			_opsDict.Add("register_host", 0);
			_opsDict.Add("set_server_down", 1);
			_opsDict.Add("register_poa", 2);
			_opsDict.Add("get_imr_info", 3);
			_opsDict.Add("list_hosts", 4);
			_opsDict.Add("list_servers", 5);
			_opsDict.Add("get_server_info", 6);
			_opsDict.Add("shutdown", 7);
			_opsDict.Add("save_server_table", 8);
			_opsDict.Add("register_server", 9);
			_opsDict.Add("unregister_server", 10);
			_opsDict.Add("edit_server", 11);
			_opsDict.Add("hold_server", 12);
			_opsDict.Add("release_server", 13);
			_opsDict.Add("start_server", 14);
			_opsDict.Add("unregister_host", 15);
		}
		private string[] _ids = {"IDL:DotNetOrb/ImR/ImplementationRepository:1.0","IDL:DotNetOrb/ImR/Registration:1.0","IDL:DotNetOrb/ImR/Admin:1.0"};

		[IdlName("register_host")]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.Registration.IllegalHostName))]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.Registration.InvalidSSDRef))]
		public abstract void RegisterHost(DotNetOrb.ImR.HostInfo info);
		[IdlName("set_server_down")]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.UnknownServerName))]
		public abstract void SetServerDown([WideChar(false)] string name);
		[IdlName("register_poa")]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.Registration.IllegalPOAName))]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.Registration.DuplicatePOAName))]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.UnknownServerName))]
		public abstract void RegisterPoa([WideChar(false)] string name, [WideChar(false)] string server, [WideChar(false)] string host, uint port);
		[IdlName("get_imr_info")]
		public abstract DotNetOrb.ImR.ImRInfo GetImrInfo();
		[IdlName("list_hosts")]
		public abstract DotNetOrb.ImR.HostInfo[] ListHosts();
		[IdlName("list_servers")]
		public abstract DotNetOrb.ImR.ServerInfo[] ListServers();
		[IdlName("get_server_info")]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.UnknownServerName))]
		public abstract DotNetOrb.ImR.ServerInfo GetServerInfo([WideChar(false)] string name);
		[IdlName("shutdown")]
		public abstract void Shutdown(bool wait);
		[IdlName("save_server_table")]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.Admin.FileOpFailed))]
		public abstract void SaveServerTable();
		[IdlName("register_server")]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.Admin.IllegalServerName))]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.Admin.DuplicateServerName))]
		public abstract void RegisterServer([WideChar(false)] string name, [WideChar(false)] string command, [WideChar(false)] string host);
		[IdlName("unregister_server")]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.UnknownServerName))]
		public abstract void UnregisterServer([WideChar(false)] string name);
		[IdlName("edit_server")]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.UnknownServerName))]
		public abstract void EditServer([WideChar(false)] string name, [WideChar(false)] string command, [WideChar(false)] string host);
		[IdlName("hold_server")]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.UnknownServerName))]
		public abstract void HoldServer([WideChar(false)] string name);
		[IdlName("release_server")]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.UnknownServerName))]
		public abstract void ReleaseServer([WideChar(false)] string name);
		[IdlName("start_server")]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.UnknownServerName))]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.ServerStartupFailed))]
		public abstract void StartServer([WideChar(false)] string name);
		[IdlName("unregister_host")]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.Admin.UnknownHostName))]
		public abstract void UnregisterHost([WideChar(false)] string name);

		public override string[] _AllInterfaces(PortableServer.IPOA poa, byte[] objId)
		{
			return _ids;
		}

		public virtual DotNetOrb.ImR.IImplementationRepository _This()
		{
			return DotNetOrb.ImR.ImplementationRepositoryHelper.Narrow(_ThisObject());
		}

		public virtual DotNetOrb.ImR.IImplementationRepository _This(CORBA.ORB orb)
		{
			return DotNetOrb.ImR.ImplementationRepositoryHelper.Narrow(_ThisObject(orb));
		}

		public CORBA.IOutputStream _Invoke(string method, CORBA.IInputStream inputStream, CORBA.IResponseHandler handler)
		{
			CORBA.IOutputStream outputStream = null;
			int opIndex;
			if (_opsDict.TryGetValue(method, out opIndex))
			{
				switch (opIndex)
				{
					case 0:
					{
						try
						{
							DotNetOrb.ImR.HostInfo info;
							info = DotNetOrb.ImR.HostInfoHelper.Read(inputStream);
							outputStream = handler.CreateReply();
							RegisterHost(info);
						}
						catch(DotNetOrb.ImR.Registration.IllegalHostName ex)
						{
							outputStream = handler.CreateExceptionReply();
							DotNetOrb.ImR.Registration.IllegalHostNameHelper.Write(outputStream, ex);
						}
						catch(DotNetOrb.ImR.Registration.InvalidSSDRef ex)
						{
							outputStream = handler.CreateExceptionReply();
							DotNetOrb.ImR.Registration.InvalidSSDRefHelper.Write(outputStream, ex);
						}
					}
					break;
					case 1:
					{
						try
						{
							string name;
							name = inputStream.ReadString();
							outputStream = handler.CreateReply();
							SetServerDown(name);
						}
						catch(DotNetOrb.ImR.UnknownServerName ex)
						{
							outputStream = handler.CreateExceptionReply();
							DotNetOrb.ImR.UnknownServerNameHelper.Write(outputStream, ex);
						}
					}
					break;
					case 2:
					{
						try
						{
							string name;
							name = inputStream.ReadString();
							string server;
							server = inputStream.ReadString();
							string host;
							host = inputStream.ReadString();
							uint port;
							port = inputStream.ReadULong();
							outputStream = handler.CreateReply();
							RegisterPoa(name,server,host,port);
						}
						catch(DotNetOrb.ImR.Registration.IllegalPOAName ex)
						{
							outputStream = handler.CreateExceptionReply();
							DotNetOrb.ImR.Registration.IllegalPOANameHelper.Write(outputStream, ex);
						}
						catch(DotNetOrb.ImR.Registration.DuplicatePOAName ex)
						{
							outputStream = handler.CreateExceptionReply();
							DotNetOrb.ImR.Registration.DuplicatePOANameHelper.Write(outputStream, ex);
						}
						catch(DotNetOrb.ImR.UnknownServerName ex)
						{
							outputStream = handler.CreateExceptionReply();
							DotNetOrb.ImR.UnknownServerNameHelper.Write(outputStream, ex);
						}
					}
					break;
					case 3:
					{
							outputStream = handler.CreateReply();
							var _result = GetImrInfo();
							DotNetOrb.ImR.ImRInfoHelper.Write(outputStream, _result);
					}
					break;
					case 4:
					{
							outputStream = handler.CreateReply();
							var _result = ListHosts();
							{
								outputStream.WriteLong(_result.Length);
								for (int i0 = 0; i0 < _result.Length; i0++)
								{
									DotNetOrb.ImR.HostInfoHelper.Write(outputStream, _result[i0]);
								}
							}
					}
					break;
					case 5:
					{
							outputStream = handler.CreateReply();
							var _result = ListServers();
							{
								outputStream.WriteLong(_result.Length);
								for (int i0 = 0; i0 < _result.Length; i0++)
								{
									DotNetOrb.ImR.ServerInfoHelper.Write(outputStream, _result[i0]);
								}
							}
					}
					break;
					case 6:
					{
						try
						{
							string name;
							name = inputStream.ReadString();
							outputStream = handler.CreateReply();
							var _result = GetServerInfo(name);
							DotNetOrb.ImR.ServerInfoHelper.Write(outputStream, _result);
						}
						catch(DotNetOrb.ImR.UnknownServerName ex)
						{
							outputStream = handler.CreateExceptionReply();
							DotNetOrb.ImR.UnknownServerNameHelper.Write(outputStream, ex);
						}
					}
					break;
					case 7:
					{
							bool wait;
							wait = inputStream.ReadBoolean();
							outputStream = handler.CreateReply();
							Shutdown(wait);
					}
					break;
					case 8:
					{
						try
						{
							outputStream = handler.CreateReply();
							SaveServerTable();
						}
						catch(DotNetOrb.ImR.Admin.FileOpFailed ex)
						{
							outputStream = handler.CreateExceptionReply();
							DotNetOrb.ImR.Admin.FileOpFailedHelper.Write(outputStream, ex);
						}
					}
					break;
					case 9:
					{
						try
						{
							string name;
							name = inputStream.ReadString();
							string command;
							command = inputStream.ReadString();
							string host;
							host = inputStream.ReadString();
							outputStream = handler.CreateReply();
							RegisterServer(name,command,host);
						}
						catch(DotNetOrb.ImR.Admin.IllegalServerName ex)
						{
							outputStream = handler.CreateExceptionReply();
							DotNetOrb.ImR.Admin.IllegalServerNameHelper.Write(outputStream, ex);
						}
						catch(DotNetOrb.ImR.Admin.DuplicateServerName ex)
						{
							outputStream = handler.CreateExceptionReply();
							DotNetOrb.ImR.Admin.DuplicateServerNameHelper.Write(outputStream, ex);
						}
					}
					break;
					case 10:
					{
						try
						{
							string name;
							name = inputStream.ReadString();
							outputStream = handler.CreateReply();
							UnregisterServer(name);
						}
						catch(DotNetOrb.ImR.UnknownServerName ex)
						{
							outputStream = handler.CreateExceptionReply();
							DotNetOrb.ImR.UnknownServerNameHelper.Write(outputStream, ex);
						}
					}
					break;
					case 11:
					{
						try
						{
							string name;
							name = inputStream.ReadString();
							string command;
							command = inputStream.ReadString();
							string host;
							host = inputStream.ReadString();
							outputStream = handler.CreateReply();
							EditServer(name,command,host);
						}
						catch(DotNetOrb.ImR.UnknownServerName ex)
						{
							outputStream = handler.CreateExceptionReply();
							DotNetOrb.ImR.UnknownServerNameHelper.Write(outputStream, ex);
						}
					}
					break;
					case 12:
					{
						try
						{
							string name;
							name = inputStream.ReadString();
							outputStream = handler.CreateReply();
							HoldServer(name);
						}
						catch(DotNetOrb.ImR.UnknownServerName ex)
						{
							outputStream = handler.CreateExceptionReply();
							DotNetOrb.ImR.UnknownServerNameHelper.Write(outputStream, ex);
						}
					}
					break;
					case 13:
					{
						try
						{
							string name;
							name = inputStream.ReadString();
							outputStream = handler.CreateReply();
							ReleaseServer(name);
						}
						catch(DotNetOrb.ImR.UnknownServerName ex)
						{
							outputStream = handler.CreateExceptionReply();
							DotNetOrb.ImR.UnknownServerNameHelper.Write(outputStream, ex);
						}
					}
					break;
					case 14:
					{
						try
						{
							string name;
							name = inputStream.ReadString();
							outputStream = handler.CreateReply();
							StartServer(name);
						}
						catch(DotNetOrb.ImR.UnknownServerName ex)
						{
							outputStream = handler.CreateExceptionReply();
							DotNetOrb.ImR.UnknownServerNameHelper.Write(outputStream, ex);
						}
						catch(DotNetOrb.ImR.ServerStartupFailed ex)
						{
							outputStream = handler.CreateExceptionReply();
							DotNetOrb.ImR.ServerStartupFailedHelper.Write(outputStream, ex);
						}
					}
					break;
					case 15:
					{
						try
						{
							string name;
							name = inputStream.ReadString();
							outputStream = handler.CreateReply();
							UnregisterHost(name);
						}
						catch(DotNetOrb.ImR.Admin.UnknownHostName ex)
						{
							outputStream = handler.CreateExceptionReply();
							DotNetOrb.ImR.Admin.UnknownHostNameHelper.Write(outputStream, ex);
						}
					}
					break;
				}
				return outputStream;
			}
			else
			{
				throw new CORBA.BadOperation(method + " not found");
			}
		}
	}
}
