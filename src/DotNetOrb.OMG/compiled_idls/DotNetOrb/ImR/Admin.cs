/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:37
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace DotNetOrb.ImR
{
	public abstract partial class Admin : CORBA.Object, DotNetOrb.ImR.IAdmin
	{
		[IdlName("IllegalServerName")]
		[RepositoryID("IDL:DotNetOrb/ImR/Admin/IllegalServerName:1.0")]
		[Helper(typeof(IllegalServerNameHelper))]
		public partial class IllegalServerName: CORBA.UserException, CORBA.IIDLEntity, IEquatable<DotNetOrb.ImR.Admin.IllegalServerName>
		{
			public IllegalServerName()
			{
			}

			public IllegalServerName(string _msg): base(_msg)
			{
			}

			public IllegalServerName(IllegalServerName other)
			{
				Name = other.Name;
			}

			public IllegalServerName(string name, string _msg = ""): base(_msg)
			{
				this.Name = name;
			}

			public bool Equals(DotNetOrb.ImR.Admin.IllegalServerName? other)
			{
				if (other == null) return false;
				if (!Name.Equals(other.Name)) return false;
				return true;
			}
			[IdlName("name")]
			[WideChar(false)]
			public string Name { get; set; }
		}

		public static class IllegalServerNameHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(IllegalServerNameHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(DotNetOrb.ImR.Admin.IllegalServerNameHelper.Id(), "IllegalServerName", new CORBA.StructMember[] {new CORBA.StructMember("name", CORBA.ORB.Init().CreateStringTc(0), null), });
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, DotNetOrb.ImR.Admin.IllegalServerName e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static DotNetOrb.ImR.Admin.IllegalServerName Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:DotNetOrb/ImR/Admin/IllegalServerName:1.0";
			}

			public static DotNetOrb.ImR.Admin.IllegalServerName Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new DotNetOrb.ImR.Admin.IllegalServerName();
				result.Name = inputStream.ReadString();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, DotNetOrb.ImR.Admin.IllegalServerName e)
			{
				outputStream.WriteString(Id());
				outputStream.WriteString(e.Name);
			}

		}
		[IdlName("DuplicateServerName")]
		[RepositoryID("IDL:DotNetOrb/ImR/Admin/DuplicateServerName:1.0")]
		[Helper(typeof(DuplicateServerNameHelper))]
		public partial class DuplicateServerName: CORBA.UserException, CORBA.IIDLEntity, IEquatable<DotNetOrb.ImR.Admin.DuplicateServerName>
		{
			public DuplicateServerName()
			{
			}

			public DuplicateServerName(string _msg): base(_msg)
			{
			}

			public DuplicateServerName(DuplicateServerName other)
			{
				Name = other.Name;
			}

			public DuplicateServerName(string name, string _msg = ""): base(_msg)
			{
				this.Name = name;
			}

			public bool Equals(DotNetOrb.ImR.Admin.DuplicateServerName? other)
			{
				if (other == null) return false;
				if (!Name.Equals(other.Name)) return false;
				return true;
			}
			[IdlName("name")]
			[WideChar(false)]
			public string Name { get; set; }
		}

		public static class DuplicateServerNameHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(DuplicateServerNameHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(DotNetOrb.ImR.Admin.DuplicateServerNameHelper.Id(), "DuplicateServerName", new CORBA.StructMember[] {new CORBA.StructMember("name", CORBA.ORB.Init().CreateStringTc(0), null), });
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, DotNetOrb.ImR.Admin.DuplicateServerName e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static DotNetOrb.ImR.Admin.DuplicateServerName Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:DotNetOrb/ImR/Admin/DuplicateServerName:1.0";
			}

			public static DotNetOrb.ImR.Admin.DuplicateServerName Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new DotNetOrb.ImR.Admin.DuplicateServerName();
				result.Name = inputStream.ReadString();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, DotNetOrb.ImR.Admin.DuplicateServerName e)
			{
				outputStream.WriteString(Id());
				outputStream.WriteString(e.Name);
			}

		}
		[IdlName("FileOpFailed")]
		[RepositoryID("IDL:DotNetOrb/ImR/Admin/FileOpFailed:1.0")]
		[Helper(typeof(FileOpFailedHelper))]
		public partial class FileOpFailed: CORBA.UserException, CORBA.IIDLEntity, IEquatable<DotNetOrb.ImR.Admin.FileOpFailed>
		{
			public FileOpFailed()
			{
			}

			public FileOpFailed(string _msg): base(_msg)
			{
			}

			public FileOpFailed(FileOpFailed other)
			{
			}

			public bool Equals(DotNetOrb.ImR.Admin.FileOpFailed? other)
			{
				if (other == null) return false;
				return true;
			}
		}

		public static class FileOpFailedHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(FileOpFailedHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(DotNetOrb.ImR.Admin.FileOpFailedHelper.Id(), "FileOpFailed", new CORBA.StructMember[] {});
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, DotNetOrb.ImR.Admin.FileOpFailed e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static DotNetOrb.ImR.Admin.FileOpFailed Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:DotNetOrb/ImR/Admin/FileOpFailed:1.0";
			}

			public static DotNetOrb.ImR.Admin.FileOpFailed Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new DotNetOrb.ImR.Admin.FileOpFailed();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, DotNetOrb.ImR.Admin.FileOpFailed e)
			{
				outputStream.WriteString(Id());
			}

		}
		[IdlName("UnknownHostName")]
		[RepositoryID("IDL:DotNetOrb/ImR/Admin/UnknownHostName:1.0")]
		[Helper(typeof(UnknownHostNameHelper))]
		public partial class UnknownHostName: CORBA.UserException, CORBA.IIDLEntity, IEquatable<DotNetOrb.ImR.Admin.UnknownHostName>
		{
			public UnknownHostName()
			{
			}

			public UnknownHostName(string _msg): base(_msg)
			{
			}

			public UnknownHostName(UnknownHostName other)
			{
				Name = other.Name;
			}

			public UnknownHostName(string name, string _msg = ""): base(_msg)
			{
				this.Name = name;
			}

			public bool Equals(DotNetOrb.ImR.Admin.UnknownHostName? other)
			{
				if (other == null) return false;
				if (!Name.Equals(other.Name)) return false;
				return true;
			}
			[IdlName("name")]
			[WideChar(false)]
			public string Name { get; set; }
		}

		public static class UnknownHostNameHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(UnknownHostNameHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(DotNetOrb.ImR.Admin.UnknownHostNameHelper.Id(), "UnknownHostName", new CORBA.StructMember[] {new CORBA.StructMember("name", CORBA.ORB.Init().CreateStringTc(0), null), });
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, DotNetOrb.ImR.Admin.UnknownHostName e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static DotNetOrb.ImR.Admin.UnknownHostName Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:DotNetOrb/ImR/Admin/UnknownHostName:1.0";
			}

			public static DotNetOrb.ImR.Admin.UnknownHostName Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new DotNetOrb.ImR.Admin.UnknownHostName();
				result.Name = inputStream.ReadString();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, DotNetOrb.ImR.Admin.UnknownHostName e)
			{
				outputStream.WriteString(Id());
				outputStream.WriteString(e.Name);
			}

		}
		[IdlName("list_hosts")]
		public abstract DotNetOrb.ImR.HostInfo[] ListHosts();
		[IdlName("list_servers")]
		public abstract DotNetOrb.ImR.ServerInfo[] ListServers();
		[IdlName("get_server_info")]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.UnknownServerName))]
		public abstract DotNetOrb.ImR.ServerInfo GetServerInfo([WideChar(false)] string name);
		[IdlName("shutdown")]
		public abstract void Shutdown(bool wait);
		[IdlName("save_server_table")]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.Admin.FileOpFailed))]
		public abstract void SaveServerTable();
		[IdlName("register_server")]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.Admin.IllegalServerName))]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.Admin.DuplicateServerName))]
		public abstract void RegisterServer([WideChar(false)] string name, [WideChar(false)] string command, [WideChar(false)] string host);
		[IdlName("unregister_server")]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.UnknownServerName))]
		public abstract void UnregisterServer([WideChar(false)] string name);
		[IdlName("edit_server")]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.UnknownServerName))]
		public abstract void EditServer([WideChar(false)] string name, [WideChar(false)] string command, [WideChar(false)] string host);
		[IdlName("hold_server")]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.UnknownServerName))]
		public abstract void HoldServer([WideChar(false)] string name);
		[IdlName("release_server")]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.UnknownServerName))]
		public abstract void ReleaseServer([WideChar(false)] string name);
		[IdlName("start_server")]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.UnknownServerName))]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.ServerStartupFailed))]
		public abstract void StartServer([WideChar(false)] string name);
		[IdlName("unregister_host")]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.Admin.UnknownHostName))]
		public abstract void UnregisterHost([WideChar(false)] string name);
	}
}

