/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:37
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace DotNetOrb.ImR
{

	public abstract class ServerStartupDaemonPOA: PortableServer.Servant, CORBA.IInvokeHandler, IServerStartupDaemonOperations
	{
		static private Dictionary<string,int> _opsDict = new Dictionary<string,int>();
		static ServerStartupDaemonPOA()
		{
			_opsDict.Add("get_system_load", 0);
			_opsDict.Add("start_server", 1);
		}
		private string[] _ids = {"IDL:DotNetOrb/ImR/ServerStartupDaemon:1.0"};

		[IdlName("get_system_load")]
		public abstract int GetSystemLoad();
		[IdlName("start_server")]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.ServerStartupFailed))]
		public abstract void StartServer([WideChar(false)] string command);

		public override string[] _AllInterfaces(PortableServer.IPOA poa, byte[] objId)
		{
			return _ids;
		}

		public virtual DotNetOrb.ImR.IServerStartupDaemon _This()
		{
			return DotNetOrb.ImR.ServerStartupDaemonHelper.Narrow(_ThisObject());
		}

		public virtual DotNetOrb.ImR.IServerStartupDaemon _This(CORBA.ORB orb)
		{
			return DotNetOrb.ImR.ServerStartupDaemonHelper.Narrow(_ThisObject(orb));
		}

		public CORBA.IOutputStream _Invoke(string method, CORBA.IInputStream inputStream, CORBA.IResponseHandler handler)
		{
			CORBA.IOutputStream outputStream = null;
			int opIndex;
			if (_opsDict.TryGetValue(method, out opIndex))
			{
				switch (opIndex)
				{
					case 0:
					{
							outputStream = handler.CreateReply();
							var _result = GetSystemLoad();
							outputStream.WriteLong(_result);
					}
					break;
					case 1:
					{
						try
						{
							string command;
							command = inputStream.ReadString();
							outputStream = handler.CreateReply();
							StartServer(command);
						}
						catch(DotNetOrb.ImR.ServerStartupFailed ex)
						{
							outputStream = handler.CreateExceptionReply();
							DotNetOrb.ImR.ServerStartupFailedHelper.Write(outputStream, ex);
						}
					}
					break;
				}
				return outputStream;
			}
			else
			{
				throw new CORBA.BadOperation(method + " not found");
			}
		}
	}
}
