/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:37
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace DotNetOrb.ImR
{
	public static class ServerInfoHelper
	{
		private static volatile CORBA.TypeCode type;

		public static CORBA.TypeCode Type()
		{
			if (type == null)
			{
				lock (typeof(ServerInfoHelper))
				{
					if (type == null)
					{
						type = CORBA.ORB.Init().CreateStructTc(DotNetOrb.ImR.ServerInfoHelper.Id(), "ServerInfo", new CORBA.StructMember[] {new CORBA.StructMember("name", CORBA.ORB.Init().CreateStringTc(0), null), new CORBA.StructMember("command", CORBA.ORB.Init().CreateStringTc(0), null), new CORBA.StructMember("poas", CORBA.ORB.Init().CreateSequenceTc(0, DotNetOrb.ImR.POAInfoHelper.Type()), null), new CORBA.StructMember("host", CORBA.ORB.Init().CreateStringTc(0), null), new CORBA.StructMember("active", CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 8), null), new CORBA.StructMember("holding", CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 8), null), });
					}
				}
			}
			return type;
		}

		public static void Insert(CORBA.Any any, DotNetOrb.ImR.ServerInfo s)
		{
			any.Type = Type();
			Write(any.CreateOutputStream(), s);
		}

		public static DotNetOrb.ImR.ServerInfo Extract(CORBA.Any any)
		{
			var inputStream = any.CreateInputStream();
			try
			{
				return Read(inputStream);
			}
			finally
			{
				inputStream.Close();
			}
		}

		public static string Id()
		{
			return "IDL:DotNetOrb/ImR/ServerInfo:1.0";
		}

		public static DotNetOrb.ImR.ServerInfo Read(CORBA.IInputStream inputStream)
		{
			var result = new DotNetOrb.ImR.ServerInfo();
			result.Name = inputStream.ReadString();
			result.Command = inputStream.ReadString();
			{
				var _capacity0 = inputStream.ReadLong();
				if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
				{
					throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
				}
				result.Poas = new DotNetOrb.ImR.POAInfo[_capacity0];
				for (int i0 = 0; i0 < _capacity0; i0++)
				{
					DotNetOrb.ImR.POAInfo _item0;
					_item0 = DotNetOrb.ImR.POAInfoHelper.Read(inputStream);
					result.Poas[i0] = _item0;
				}
			}
			result.Host = inputStream.ReadString();
			result.Active = inputStream.ReadBoolean();
			result.Holding = inputStream.ReadBoolean();
			return result;
		}

		public static void Write(CORBA.IOutputStream outputStream, DotNetOrb.ImR.ServerInfo s)
		{
			outputStream.WriteString(s.Name);
			outputStream.WriteString(s.Command);
			{
				outputStream.WriteLong(s.Poas.Length);
				for (int i0 = 0; i0 < s.Poas.Length; i0++)
				{
					DotNetOrb.ImR.POAInfoHelper.Write(outputStream, s.Poas[i0]);
				}
			}
			outputStream.WriteString(s.Host);
			outputStream.WriteBoolean(s.Active);
			outputStream.WriteBoolean(s.Holding);
		}

	}
}
