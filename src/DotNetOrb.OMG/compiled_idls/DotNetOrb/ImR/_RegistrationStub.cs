/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:37
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace DotNetOrb.ImR
{
	public class _RegistrationStub: CORBA.Object, IRegistration
	{
		private new string[] _ids = {"IDL:DotNetOrb/ImR/Registration:1.0"};

		public override string[] _Ids()
		{
			return _ids;
		}

		public static Type _opsType = typeof(IRegistrationOperations);

		[IdlName("register_host")]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.Registration.IllegalHostName))]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.Registration.InvalidSSDRef))]
		public void RegisterHost(DotNetOrb.ImR.HostInfo info)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("register_host", true);
					DotNetOrb.ImR.HostInfoHelper.Write(outputStream, info);
					inputStream = _Invoke(outputStream);
					return;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:DotNetOrb/ImR/Registration/IllegalHostName:1.0":
								throw DotNetOrb.ImR.Registration.IllegalHostNameHelper.Read(aex.InputStream);
							case "IDL:DotNetOrb/ImR/Registration/InvalidSSDRef:1.0":
								throw DotNetOrb.ImR.Registration.InvalidSSDRefHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("set_server_down")]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.UnknownServerName))]
		public void SetServerDown([WideChar(false)] string name)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("set_server_down", true);
					outputStream.WriteString(name);
					inputStream = _Invoke(outputStream);
					return;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:DotNetOrb/ImR/UnknownServerName:1.0":
								throw DotNetOrb.ImR.UnknownServerNameHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("register_poa")]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.Registration.IllegalPOAName))]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.Registration.DuplicatePOAName))]
		[ThrowsIdlException(typeof(DotNetOrb.ImR.UnknownServerName))]
		public void RegisterPoa([WideChar(false)] string name, [WideChar(false)] string server, [WideChar(false)] string host, uint port)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("register_poa", true);
					outputStream.WriteString(name);
					outputStream.WriteString(server);
					outputStream.WriteString(host);
					outputStream.WriteULong(port);
					inputStream = _Invoke(outputStream);
					return;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:DotNetOrb/ImR/Registration/IllegalPOAName:1.0":
								throw DotNetOrb.ImR.Registration.IllegalPOANameHelper.Read(aex.InputStream);
							case "IDL:DotNetOrb/ImR/Registration/DuplicatePOAName:1.0":
								throw DotNetOrb.ImR.Registration.DuplicatePOANameHelper.Read(aex.InputStream);
							case "IDL:DotNetOrb/ImR/UnknownServerName:1.0":
								throw DotNetOrb.ImR.UnknownServerNameHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("get_imr_info")]
		public DotNetOrb.ImR.ImRInfo GetImrInfo()
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("get_imr_info", true);
					inputStream = _Invoke(outputStream);
					DotNetOrb.ImR.ImRInfo _result;
					_result = DotNetOrb.ImR.ImRInfoHelper.Read(inputStream);
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}

	}

}
