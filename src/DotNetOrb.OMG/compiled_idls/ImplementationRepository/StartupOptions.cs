/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:38
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;

namespace ImplementationRepository
{
	[RepositoryID("IDL:ImplementationRepository/StartupOptions:1.0")]
	[Helper(typeof(StartupOptionsHelper))]
	public partial class StartupOptions: CORBA.IIDLEntity, IEquatable<ImplementationRepository.StartupOptions>
	{
		[IdlName("StartupOptions")]
		[WideChar(false)]
		public string CommandLine { get; set; }
		[IdlName("StartupOptions")]
		public ImplementationRepository.EnvironmentVariable[] Environment { get; set; }
		[IdlName("StartupOptions")]
		[WideChar(false)]
		public string WorkingDirectory { get; set; }
		[IdlName("StartupOptions")]
		public ImplementationRepository.ActivationMode Activation { get; set; }
		[IdlName("StartupOptions")]
		[WideChar(false)]
		public string Activator { get; set; }
		[IdlName("StartupOptions")]
		public int StartLimit { get; set; }

		public StartupOptions()
		{
		}

		public StartupOptions(StartupOptions other)
		{
			CommandLine = other.CommandLine;
			Environment = other.Environment;
			WorkingDirectory = other.WorkingDirectory;
			Activation = other.Activation;
			Activator = other.Activator;
			StartLimit = other.StartLimit;
		}

		public StartupOptions(string commandLine, ImplementationRepository.EnvironmentVariable[] environment, string workingDirectory, ImplementationRepository.ActivationMode activation, string activator, int startLimit)
		{
			this.CommandLine = commandLine;
			this.Environment = environment;
			this.WorkingDirectory = workingDirectory;
			this.Activation = activation;
			this.Activator = activator;
			this.StartLimit = startLimit;
		}

		public bool Equals(ImplementationRepository.StartupOptions? other)
		{
			if (other == null) return false;
			if (!CommandLine.Equals(other.CommandLine)) return false;
			if (!Environment.SequenceEqual(other.Environment)) return false;
			if (!WorkingDirectory.Equals(other.WorkingDirectory)) return false;
			if (!Activation.Equals(other.Activation)) return false;
			if (!Activator.Equals(other.Activator)) return false;
			if (!StartLimit.Equals(other.StartLimit)) return false;
			return true;
		}
	}

}
