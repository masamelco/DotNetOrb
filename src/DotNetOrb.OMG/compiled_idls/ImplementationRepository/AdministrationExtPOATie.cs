/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:38
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace ImplementationRepository
{

	public class AdministrationExtPOATie: AdministrationExtPOA
	{
		public IAdministrationExtOperations _OperationsDelegate { get; set; }
		private PortableServer.IPOA _poa;

		public AdministrationExtPOATie(IAdministrationExtOperations d)
		{
			_OperationsDelegate = d;
		}

		public AdministrationExtPOATie(IAdministrationExtOperations d, PortableServer.POA poa)
		{
			_OperationsDelegate = d;
			_poa = poa;
		}

		public override PortableServer.IPOA _DefaultPOA()
		{
			if (_poa != null)
			{
				return _poa;
			}
			return base._DefaultPOA();
		}

		public override ImplementationRepository.IAdministrationExt _This()
		{
			return ImplementationRepository.AdministrationExtHelper.Narrow(_ThisObject());
		}

		public override ImplementationRepository.IAdministrationExt _This(CORBA.ORB orb)
		{
			return ImplementationRepository.AdministrationExtHelper.Narrow(_ThisObject(orb));
		}

		[IdlName("activate_server")]
		[ThrowsIdlException(typeof(ImplementationRepository.NotFound))]
		[ThrowsIdlException(typeof(ImplementationRepository.CannotActivate))]
		public override void ActivateServer([WideChar(false)] string server)
		{
			_OperationsDelegate.ActivateServer(server);
		}
		[IdlName("add_or_update_server")]
		[ThrowsIdlException(typeof(ImplementationRepository.NotFound))]
		public override void AddOrUpdateServer([WideChar(false)] string server, ImplementationRepository.StartupOptions options)
		{
			_OperationsDelegate.AddOrUpdateServer(server, options);
		}
		[IdlName("remove_server")]
		[ThrowsIdlException(typeof(ImplementationRepository.NotFound))]
		public override void RemoveServer([WideChar(false)] string server)
		{
			_OperationsDelegate.RemoveServer(server);
		}
		[IdlName("shutdown_server")]
		[ThrowsIdlException(typeof(ImplementationRepository.NotFound))]
		public override void ShutdownServer([WideChar(false)] string server)
		{
			_OperationsDelegate.ShutdownServer(server);
		}
		[IdlName("server_is_running")]
		[ThrowsIdlException(typeof(ImplementationRepository.NotFound))]
		public override void ServerIsRunning([WideChar(false)] string server, [WideChar(false)] string partialIor, ImplementationRepository.IServerObject serverObject)
		{
			_OperationsDelegate.ServerIsRunning(server, partialIor, serverObject);
		}
		[IdlName("server_is_shutting_down")]
		[ThrowsIdlException(typeof(ImplementationRepository.NotFound))]
		public override void ServerIsShuttingDown([WideChar(false)] string server)
		{
			_OperationsDelegate.ServerIsShuttingDown(server);
		}
		[IdlName("find")]
		public override void Find([WideChar(false)] string server, out ImplementationRepository.ServerInformation info)
		{
			_OperationsDelegate.Find(server, out info);
		}
		[IdlName("list")]
		public override void List(uint howMany, bool determineActiveStatus, out ImplementationRepository.ServerInformation[] serverList, out ImplementationRepository.IServerInformationIterator serverIterator)
		{
			_OperationsDelegate.List(howMany, determineActiveStatus, out serverList, out serverIterator);
		}
		[IdlName("shutdown")]
		public override void Shutdown(bool activators, bool servers)
		{
			_OperationsDelegate.Shutdown(activators, servers);
		}
		[IdlName("link_servers")]
		[ThrowsIdlException(typeof(ImplementationRepository.NotFound))]
		[ThrowsIdlException(typeof(ImplementationRepository.CannotComplete))]
		public override void LinkServers([WideChar(false)] string server, string[] peers)
		{
			_OperationsDelegate.LinkServers(server, peers);
		}
		[IdlName("kill_server")]
		[ThrowsIdlException(typeof(ImplementationRepository.NotFound))]
		[ThrowsIdlException(typeof(ImplementationRepository.CannotComplete))]
		public override void KillServer([WideChar(false)] string server, short signum)
		{
			_OperationsDelegate.KillServer(server, signum);
		}
		[IdlName("force_remove_server")]
		[ThrowsIdlException(typeof(ImplementationRepository.NotFound))]
		[ThrowsIdlException(typeof(ImplementationRepository.CannotComplete))]
		public override void ForceRemoveServer([WideChar(false)] string server, short signum)
		{
			_OperationsDelegate.ForceRemoveServer(server, signum);
		}
	}
}
