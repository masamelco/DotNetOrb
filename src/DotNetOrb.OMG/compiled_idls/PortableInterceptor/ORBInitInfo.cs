/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:37
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace PortableInterceptor
{
	public abstract partial class ORBInitInfo : CORBA.Object, PortableInterceptor.IORBInitInfo
	{
		public static class ObjectIdHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(ObjectIdHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateAliasTc(PortableInterceptor.ORBInitInfo.ObjectIdHelper.Id(), "ObjectId", CORBA.ORB.Init().CreateStringTc(0));
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, string value)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), value);
			}

			public static string Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:PortableInterceptor/ORBInitInfo/ObjectId:1.0";
			}

			public static string Read(CORBA.IInputStream inputStream)
			{
				string result;
				result = inputStream.ReadString();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, string value)
			{
				outputStream.WriteString(value);
			}

		}
		[IdlName("DuplicateName")]
		[RepositoryID("IDL:PortableInterceptor/ORBInitInfo/DuplicateName:1.0")]
		[Helper(typeof(DuplicateNameHelper))]
		public partial class DuplicateName: CORBA.UserException, CORBA.IIDLEntity, IEquatable<PortableInterceptor.ORBInitInfo.DuplicateName>
		{
			public DuplicateName()
			{
			}

			public DuplicateName(string _msg): base(_msg)
			{
			}

			public DuplicateName(DuplicateName other)
			{
				Name = other.Name;
			}

			public DuplicateName(string name, string _msg = ""): base(_msg)
			{
				this.Name = name;
			}

			public bool Equals(PortableInterceptor.ORBInitInfo.DuplicateName? other)
			{
				if (other == null) return false;
				if (!Name.Equals(other.Name)) return false;
				return true;
			}
			[IdlName("name")]
			[WideChar(false)]
			public string Name { get; set; }
		}

		public static class DuplicateNameHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(DuplicateNameHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(PortableInterceptor.ORBInitInfo.DuplicateNameHelper.Id(), "DuplicateName", new CORBA.StructMember[] {new CORBA.StructMember("name", CORBA.ORB.Init().CreateStringTc(0), null), });
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, PortableInterceptor.ORBInitInfo.DuplicateName e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static PortableInterceptor.ORBInitInfo.DuplicateName Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:PortableInterceptor/ORBInitInfo/DuplicateName:1.0";
			}

			public static PortableInterceptor.ORBInitInfo.DuplicateName Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new PortableInterceptor.ORBInitInfo.DuplicateName();
				result.Name = inputStream.ReadString();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, PortableInterceptor.ORBInitInfo.DuplicateName e)
			{
				outputStream.WriteString(Id());
				outputStream.WriteString(e.Name);
			}

		}
		[IdlName("InvalidName")]
		[RepositoryID("IDL:PortableInterceptor/ORBInitInfo/InvalidName:1.0")]
		[Helper(typeof(InvalidNameHelper))]
		public partial class InvalidName: CORBA.UserException, CORBA.IIDLEntity, IEquatable<PortableInterceptor.ORBInitInfo.InvalidName>
		{
			public InvalidName()
			{
			}

			public InvalidName(string _msg): base(_msg)
			{
			}

			public InvalidName(InvalidName other)
			{
			}

			public bool Equals(PortableInterceptor.ORBInitInfo.InvalidName? other)
			{
				if (other == null) return false;
				return true;
			}
		}

		public static class InvalidNameHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(InvalidNameHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(PortableInterceptor.ORBInitInfo.InvalidNameHelper.Id(), "InvalidName", new CORBA.StructMember[] {});
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, PortableInterceptor.ORBInitInfo.InvalidName e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static PortableInterceptor.ORBInitInfo.InvalidName Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:PortableInterceptor/ORBInitInfo/InvalidName:1.0";
			}

			public static PortableInterceptor.ORBInitInfo.InvalidName Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new PortableInterceptor.ORBInitInfo.InvalidName();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, PortableInterceptor.ORBInitInfo.InvalidName e)
			{
				outputStream.WriteString(Id());
			}

		}
		[IdlName("arguments")]
		public abstract string[] Arguments 
		{
			get;
		}
		[IdlName("orb_id")]
		[WideChar(false)]
		public abstract string OrbId 
		{
			get;
		}
		[IdlName("codec_factory")]
		public abstract IOP.ICodecFactory CodecFactory 
		{
			get;
		}
		[IdlName("register_initial_reference")]
		[ThrowsIdlException(typeof(PortableInterceptor.ORBInitInfo.InvalidName))]
		public abstract void RegisterInitialReference([WideChar(false)] string id, CORBA.IObject obj);
		[IdlName("resolve_initial_references")]
		[ThrowsIdlException(typeof(PortableInterceptor.ORBInitInfo.InvalidName))]
		public abstract CORBA.IObject ResolveInitialReferences([WideChar(false)] string id);
		[IdlName("add_client_request_interceptor")]
		[ThrowsIdlException(typeof(PortableInterceptor.ORBInitInfo.DuplicateName))]
		public abstract void AddClientRequestInterceptor(PortableInterceptor.IClientRequestInterceptor interceptor);
		[IdlName("add_server_request_interceptor")]
		[ThrowsIdlException(typeof(PortableInterceptor.ORBInitInfo.DuplicateName))]
		public abstract void AddServerRequestInterceptor(PortableInterceptor.IServerRequestInterceptor interceptor);
		[IdlName("add_ior_interceptor")]
		[ThrowsIdlException(typeof(PortableInterceptor.ORBInitInfo.DuplicateName))]
		public abstract void AddIorInterceptor(PortableInterceptor.IIORInterceptor interceptor);
		[IdlName("allocate_slot_id")]
		public abstract uint AllocateSlotId();
		[IdlName("register_policy_factory")]
		public abstract void RegisterPolicyFactory(uint type, PortableInterceptor.IPolicyFactory policyFactory);
	}
}

