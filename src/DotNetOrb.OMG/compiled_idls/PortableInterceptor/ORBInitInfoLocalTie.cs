/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:37
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace PortableInterceptor
{

	public class ORBInitInfoLocalTie: _ORBInitInfoLocalBase
	{
		public IORBInitInfoOperations _OperationsDelegate { get; set; }

		public ORBInitInfoLocalTie(IORBInitInfoOperations d)
		{
			_OperationsDelegate = d;
		}

		public override string[] Arguments 
		{
			get
			{
				return _OperationsDelegate.Arguments;
			}
		}
		[WideChar(false)]
		public override string OrbId 
		{
			get
			{
				return _OperationsDelegate.OrbId;
			}
		}
		public override IOP.ICodecFactory CodecFactory 
		{
			get
			{
				return _OperationsDelegate.CodecFactory;
			}
		}
		[IdlName("register_initial_reference")]
		[ThrowsIdlException(typeof(PortableInterceptor.ORBInitInfo.InvalidName))]
		public override void RegisterInitialReference([WideChar(false)] string id, CORBA.IObject obj)
		{
			_OperationsDelegate.RegisterInitialReference(id, obj);
		}
		[IdlName("resolve_initial_references")]
		[ThrowsIdlException(typeof(PortableInterceptor.ORBInitInfo.InvalidName))]
		public override CORBA.IObject ResolveInitialReferences([WideChar(false)] string id)
		{
			return _OperationsDelegate.ResolveInitialReferences(id);
		}
		[IdlName("add_client_request_interceptor")]
		[ThrowsIdlException(typeof(PortableInterceptor.ORBInitInfo.DuplicateName))]
		public override void AddClientRequestInterceptor(PortableInterceptor.IClientRequestInterceptor interceptor)
		{
			_OperationsDelegate.AddClientRequestInterceptor(interceptor);
		}
		[IdlName("add_server_request_interceptor")]
		[ThrowsIdlException(typeof(PortableInterceptor.ORBInitInfo.DuplicateName))]
		public override void AddServerRequestInterceptor(PortableInterceptor.IServerRequestInterceptor interceptor)
		{
			_OperationsDelegate.AddServerRequestInterceptor(interceptor);
		}
		[IdlName("add_ior_interceptor")]
		[ThrowsIdlException(typeof(PortableInterceptor.ORBInitInfo.DuplicateName))]
		public override void AddIorInterceptor(PortableInterceptor.IIORInterceptor interceptor)
		{
			_OperationsDelegate.AddIorInterceptor(interceptor);
		}
		[IdlName("allocate_slot_id")]
		public override uint AllocateSlotId()
		{
			return _OperationsDelegate.AllocateSlotId();
		}
		[IdlName("register_policy_factory")]
		public override void RegisterPolicyFactory(uint type, PortableInterceptor.IPolicyFactory policyFactory)
		{
			_OperationsDelegate.RegisterPolicyFactory(type, policyFactory);
		}
	}
}
