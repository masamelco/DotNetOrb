/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:37
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace PortableInterceptor
{

	public class ServerRequestInterceptorLocalTie: _ServerRequestInterceptorLocalBase
	{
		public IServerRequestInterceptorOperations _OperationsDelegate { get; set; }

		public ServerRequestInterceptorLocalTie(IServerRequestInterceptorOperations d)
		{
			_OperationsDelegate = d;
		}

		[WideChar(false)]
		public override string Name 
		{
			get
			{
				return _OperationsDelegate.Name;
			}
		}
		[IdlName("destroy")]
		public override void Destroy()
		{
			_OperationsDelegate.Destroy();
		}
		[IdlName("receive_request_service_contexts")]
		[ThrowsIdlException(typeof(PortableInterceptor.ForwardRequest))]
		public override void ReceiveRequestServiceContexts(PortableInterceptor.IServerRequestInfo ri)
		{
			_OperationsDelegate.ReceiveRequestServiceContexts(ri);
		}
		[IdlName("receive_request")]
		[ThrowsIdlException(typeof(PortableInterceptor.ForwardRequest))]
		public override void ReceiveRequest(PortableInterceptor.IServerRequestInfo ri)
		{
			_OperationsDelegate.ReceiveRequest(ri);
		}
		[IdlName("send_reply")]
		public override void SendReply(PortableInterceptor.IServerRequestInfo ri)
		{
			_OperationsDelegate.SendReply(ri);
		}
		[IdlName("send_exception")]
		[ThrowsIdlException(typeof(PortableInterceptor.ForwardRequest))]
		public override void SendException(PortableInterceptor.IServerRequestInfo ri)
		{
			_OperationsDelegate.SendException(ri);
		}
		[IdlName("send_other")]
		[ThrowsIdlException(typeof(PortableInterceptor.ForwardRequest))]
		public override void SendOther(PortableInterceptor.IServerRequestInfo ri)
		{
			_OperationsDelegate.SendOther(ri);
		}
	}
}
