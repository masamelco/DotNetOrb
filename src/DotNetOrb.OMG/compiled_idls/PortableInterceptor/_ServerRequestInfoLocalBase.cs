/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:37
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace PortableInterceptor
{
	public abstract class _ServerRequestInfoLocalBase: CORBA.LocalObject, IServerRequestInfo
	{
		private string[] _ids = {"IDL:PortableInterceptor/ServerRequestInfo:1.0","IDL:PortableInterceptor/RequestInfo:1.0"};

		public override string[] _Ids()
		{
			return _ids;
		}

		[IdlName("request_id")]
		public abstract uint RequestId 
		{
			get;
		}
		[IdlName("operation")]
		[WideChar(false)]
		public abstract string Operation 
		{
			get;
		}
		[IdlName("arguments")]
		public abstract Dynamic.Parameter[] Arguments 
		{
			get;
		}
		[IdlName("exceptions")]
		public abstract CORBA.TypeCode[] Exceptions 
		{
			get;
		}
		[IdlName("contexts")]
		public abstract string[] Contexts 
		{
			get;
		}
		[IdlName("operation_context")]
		public abstract string[] OperationContext 
		{
			get;
		}
		[IdlName("result")]
		public abstract CORBA.Any Result 
		{
			get;
		}
		[IdlName("response_expected")]
		public abstract bool ResponseExpected 
		{
			get;
		}
		[IdlName("sync_scope")]
		public abstract short SyncScope 
		{
			get;
		}
		[IdlName("reply_status")]
		public abstract short ReplyStatus 
		{
			get;
		}
		[IdlName("forward_reference")]
		public abstract CORBA.IObject ForwardReference 
		{
			get;
		}
		[IdlName("get_slot")]
		[ThrowsIdlException(typeof(PortableInterceptor.InvalidSlot))]
		public abstract CORBA.Any GetSlot(uint id);
		[IdlName("get_request_service_context")]
		public abstract IOP.ServiceContext GetRequestServiceContext(uint id);
		[IdlName("get_reply_service_context")]
		public abstract IOP.ServiceContext GetReplyServiceContext(uint id);
		[IdlName("sending_exception")]
		public abstract CORBA.Any SendingException 
		{
			get;
		}
		[IdlName("server_id")]
		[WideChar(false)]
		public abstract string ServerId 
		{
			get;
		}
		[IdlName("orb_id")]
		[WideChar(false)]
		public abstract string OrbId 
		{
			get;
		}
		[IdlName("adapter_name")]
		public abstract string[] AdapterName 
		{
			get;
		}
		[IdlName("object_id")]
		public abstract byte[] ObjectId 
		{
			get;
		}
		[IdlName("adapter_id")]
		public abstract byte[] AdapterId 
		{
			get;
		}
		[IdlName("target_most_derived_interface")]
		[WideChar(false)]
		public abstract string TargetMostDerivedInterface 
		{
			get;
		}
		[IdlName("get_server_policy")]
		public abstract CORBA.IPolicy GetServerPolicy(uint type);
		[IdlName("set_slot")]
		[ThrowsIdlException(typeof(PortableInterceptor.InvalidSlot))]
		public abstract void SetSlot(uint id, CORBA.Any data);
		[IdlName("target_is_a")]
		public abstract bool TargetIsA([WideChar(false)] string id);
		[IdlName("add_reply_service_context")]
		public abstract void AddReplyServiceContext(IOP.ServiceContext serviceContext, bool replace);
	}

}
