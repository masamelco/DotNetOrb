/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:30
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;

namespace PortableGroup
{
	[RepositoryID("IDL:omg.org/PortableGroup/TagGroupTaggedComponent:1.0")]
	[Helper(typeof(TagGroupTaggedComponentHelper))]
	public partial class TagGroupTaggedComponent: CORBA.IIDLEntity, IEquatable<PortableGroup.TagGroupTaggedComponent>
	{
		[IdlName("TagGroupTaggedComponent")]
		public GIOP.Version GroupVersion { get; set; }
		[IdlName("TagGroupTaggedComponent")]
		[WideChar(false)]
		public string GroupDomainId { get; set; }
		[IdlName("TagGroupTaggedComponent")]
		public ulong ObjectGroupId { get; set; }
		[IdlName("TagGroupTaggedComponent")]
		public uint ObjectGroupRefVersion { get; set; }

		public TagGroupTaggedComponent()
		{
		}

		public TagGroupTaggedComponent(TagGroupTaggedComponent other)
		{
			GroupVersion = other.GroupVersion;
			GroupDomainId = other.GroupDomainId;
			ObjectGroupId = other.ObjectGroupId;
			ObjectGroupRefVersion = other.ObjectGroupRefVersion;
		}

		public TagGroupTaggedComponent(GIOP.Version groupVersion, string groupDomainId, ulong objectGroupId, uint objectGroupRefVersion)
		{
			this.GroupVersion = groupVersion;
			this.GroupDomainId = groupDomainId;
			this.ObjectGroupId = objectGroupId;
			this.ObjectGroupRefVersion = objectGroupRefVersion;
		}

		public bool Equals(PortableGroup.TagGroupTaggedComponent? other)
		{
			if (other == null) return false;
			if (!GroupVersion.Equals(other.GroupVersion)) return false;
			if (!GroupDomainId.Equals(other.GroupDomainId)) return false;
			if (!ObjectGroupId.Equals(other.ObjectGroupId)) return false;
			if (!ObjectGroupRefVersion.Equals(other.ObjectGroupRefVersion)) return false;
			return true;
		}
	}

}
