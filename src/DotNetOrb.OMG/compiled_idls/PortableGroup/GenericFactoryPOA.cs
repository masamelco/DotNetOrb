/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:30
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace PortableGroup
{

	public abstract class GenericFactoryPOA: PortableServer.Servant, CORBA.IInvokeHandler, IGenericFactoryOperations
	{
		static private Dictionary<string,int> _opsDict = new Dictionary<string,int>();
		static GenericFactoryPOA()
		{
			_opsDict.Add("create_object", 0);
			_opsDict.Add("delete_object", 1);
		}
		private string[] _ids = {"IDL:omg.org/PortableGroup/GenericFactory:1.0"};

		[IdlName("create_object")]
		[ThrowsIdlException(typeof(PortableGroup.NoFactory))]
		[ThrowsIdlException(typeof(PortableGroup.ObjectNotCreated))]
		[ThrowsIdlException(typeof(PortableGroup.InvalidCriteria))]
		[ThrowsIdlException(typeof(PortableGroup.InvalidProperty))]
		[ThrowsIdlException(typeof(PortableGroup.CannotMeetCriteria))]
		public abstract CORBA.IObject CreateObject([WideChar(false)] string typeId, PortableGroup.Property[] theCriteria, out CORBA.Any factoryCreationId);
		[IdlName("delete_object")]
		[ThrowsIdlException(typeof(PortableGroup.ObjectNotFound))]
		public abstract void DeleteObject(CORBA.Any factoryCreationId);

		public override string[] _AllInterfaces(PortableServer.IPOA poa, byte[] objId)
		{
			return _ids;
		}

		public virtual PortableGroup.IGenericFactory _This()
		{
			return PortableGroup.GenericFactoryHelper.Narrow(_ThisObject());
		}

		public virtual PortableGroup.IGenericFactory _This(CORBA.ORB orb)
		{
			return PortableGroup.GenericFactoryHelper.Narrow(_ThisObject(orb));
		}

		public CORBA.IOutputStream _Invoke(string method, CORBA.IInputStream inputStream, CORBA.IResponseHandler handler)
		{
			CORBA.IOutputStream outputStream = null;
			int opIndex;
			if (_opsDict.TryGetValue(method, out opIndex))
			{
				switch (opIndex)
				{
					case 0:
					{
						try
						{
							string typeId;
							typeId = inputStream.ReadString();
							PortableGroup.Property[] theCriteria;
							{
								var _capacity0 = inputStream.ReadLong();
								if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
								{
									throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
								}
								theCriteria = new PortableGroup.Property[_capacity0];
								for (int i0 = 0; i0 < _capacity0; i0++)
								{
									PortableGroup.Property _item0;
									_item0 = PortableGroup.PropertyHelper.Read(inputStream);
									theCriteria[i0] = _item0;
								}
							}
							outputStream = handler.CreateReply();
							var _result = CreateObject(typeId, theCriteria, out CORBA.Any factoryCreationId);
							outputStream.WriteObject(_result);
							outputStream.WriteAny(factoryCreationId);
						}
						catch(PortableGroup.NoFactory ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.NoFactoryHelper.Write(outputStream, ex);
						}
						catch(PortableGroup.ObjectNotCreated ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.ObjectNotCreatedHelper.Write(outputStream, ex);
						}
						catch(PortableGroup.InvalidCriteria ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.InvalidCriteriaHelper.Write(outputStream, ex);
						}
						catch(PortableGroup.InvalidProperty ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.InvalidPropertyHelper.Write(outputStream, ex);
						}
						catch(PortableGroup.CannotMeetCriteria ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.CannotMeetCriteriaHelper.Write(outputStream, ex);
						}
					}
					break;
					case 1:
					{
						try
						{
							CORBA.Any factoryCreationId;
							factoryCreationId = inputStream.ReadAny();
							outputStream = handler.CreateReply();
							DeleteObject(factoryCreationId);
						}
						catch(PortableGroup.ObjectNotFound ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.ObjectNotFoundHelper.Write(outputStream, ex);
						}
					}
					break;
				}
				return outputStream;
			}
			else
			{
				throw new CORBA.BadOperation(method + " not found");
			}
		}
	}
}
