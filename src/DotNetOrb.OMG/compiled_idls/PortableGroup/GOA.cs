/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:30
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace PortableGroup
{
	public abstract partial class GOA : CORBA.Object, PortableGroup.IGOA
	{
		[IdlName("NotAGroupObject")]
		[RepositoryID("IDL:omg.org/PortableGroup/GOA/NotAGroupObject:1.0")]
		[Helper(typeof(NotAGroupObjectHelper))]
		public partial class NotAGroupObject: CORBA.UserException, CORBA.IIDLEntity, IEquatable<PortableGroup.GOA.NotAGroupObject>
		{
			public NotAGroupObject()
			{
			}

			public NotAGroupObject(string _msg): base(_msg)
			{
			}

			public NotAGroupObject(NotAGroupObject other)
			{
			}

			public bool Equals(PortableGroup.GOA.NotAGroupObject? other)
			{
				if (other == null) return false;
				return true;
			}
		}

		public static class NotAGroupObjectHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(NotAGroupObjectHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(PortableGroup.GOA.NotAGroupObjectHelper.Id(), "NotAGroupObject", new CORBA.StructMember[] {});
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, PortableGroup.GOA.NotAGroupObject e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static PortableGroup.GOA.NotAGroupObject Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:omg.org/PortableGroup/GOA/NotAGroupObject:1.0";
			}

			public static PortableGroup.GOA.NotAGroupObject Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new PortableGroup.GOA.NotAGroupObject();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, PortableGroup.GOA.NotAGroupObject e)
			{
				outputStream.WriteString(Id());
			}

		}
		public static class IDsHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(IDsHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateAliasTc(PortableGroup.GOA.IDsHelper.Id(), "IDs", CORBA.ORB.Init().CreateSequenceTc(0, CORBA.ORB.Init().CreateSequenceTc(0, CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 10))));
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, byte[][] value)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), value);
			}

			public static byte[][] Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:omg.org/PortableGroup/GOA/IDs:1.0";
			}

			public static byte[][] Read(CORBA.IInputStream inputStream)
			{
				byte[][] result;
				{
					var _capacity0 = inputStream.ReadLong();
					if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
					{
						throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
					}
					result = new byte[_capacity0][];
					for (int i0 = 0; i0 < _capacity0; i0++)
					{
						byte[] _item0;
						{
							var _capacity1 = inputStream.ReadLong();
							if (inputStream.Available > 0 && _capacity1 > inputStream.Available)
							{
								throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity1}");
							}
							var _array = new byte[_capacity1];
							inputStream.ReadOctetArray(ref _array, 0, _capacity1);
							_item0 = _array;
						}
						result[i0] = _item0;
					}
				}
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, byte[][] value)
			{
				{
					outputStream.WriteLong(value.Length);
					for (int i0 = 0; i0 < value.Length; i0++)
					{
						{
							outputStream.WriteLong(value[i0].Length);
							outputStream.WriteOctetArray(value[i0], 0, value[i0].Length);
						}
					}
				}
			}

		}
		[IdlName("create_POA")]
		[ThrowsIdlException(typeof(PortableServer.POA.AdapterAlreadyExists))]
		[ThrowsIdlException(typeof(PortableServer.POA.InvalidPolicy))]
		public abstract PortableServer.IPOA CreatePoa([WideChar(false)] string adapterName, PortableServer.IPOAManager aPOAManager, CORBA.IPolicy[] policies);
		[IdlName("find_POA")]
		[ThrowsIdlException(typeof(PortableServer.POA.AdapterNonExistent))]
		public abstract PortableServer.IPOA FindPoa([WideChar(false)] string adapterName, bool activateIt);
		[IdlName("destroy")]
		public abstract void Destroy(bool etherealizeObjects, bool waitForCompletion);
		[IdlName("create_thread_policy")]
		public abstract PortableServer.IThreadPolicy CreateThreadPolicy(PortableServer.ThreadPolicyValue value);
		[IdlName("create_lifespan_policy")]
		public abstract PortableServer.ILifespanPolicy CreateLifespanPolicy(PortableServer.LifespanPolicyValue value);
		[IdlName("create_id_uniqueness_policy")]
		public abstract PortableServer.IIdUniquenessPolicy CreateIdUniquenessPolicy(PortableServer.IdUniquenessPolicyValue value);
		[IdlName("create_id_assignment_policy")]
		public abstract PortableServer.IIdAssignmentPolicy CreateIdAssignmentPolicy(PortableServer.IdAssignmentPolicyValue value);
		[IdlName("create_implicit_activation_policy")]
		public abstract PortableServer.IImplicitActivationPolicy CreateImplicitActivationPolicy(PortableServer.ImplicitActivationPolicyValue value);
		[IdlName("create_servant_retention_policy")]
		public abstract PortableServer.IServantRetentionPolicy CreateServantRetentionPolicy(PortableServer.ServantRetentionPolicyValue value);
		[IdlName("create_request_processing_policy")]
		public abstract PortableServer.IRequestProcessingPolicy CreateRequestProcessingPolicy(PortableServer.RequestProcessingPolicyValue value);
		[IdlName("the_name")]
		[WideChar(false)]
		public abstract string TheName 
		{
			get;
		}
		[IdlName("the_parent")]
		public abstract PortableServer.IPOA TheParent 
		{
			get;
		}
		[IdlName("the_children")]
		public abstract PortableServer.IPOA[] TheChildren 
		{
			get;
		}
		[IdlName("the_POAManager")]
		public abstract PortableServer.IPOAManager ThePOAManager 
		{
			get;
		}
		[IdlName("the_activator")]
		public abstract PortableServer.IAdapterActivator TheActivator 
		{
			get;

			set;
		}
		[IdlName("get_servant_manager")]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract PortableServer.IServantManager GetServantManager();
		[IdlName("set_servant_manager")]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract void SetServantManager(PortableServer.IServantManager imgr);
		[IdlName("get_servant")]
		[ThrowsIdlException(typeof(PortableServer.POA.NoServant))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract PortableServer.Servant GetServant();
		[IdlName("set_servant")]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract void SetServant(PortableServer.Servant pServant);
		[IdlName("activate_object")]
		[ThrowsIdlException(typeof(PortableServer.POA.ServantAlreadyActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract byte[] ActivateObject(PortableServer.Servant pServant);
		[IdlName("activate_object_with_id")]
		[ThrowsIdlException(typeof(PortableServer.POA.ServantAlreadyActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.ObjectAlreadyActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract void ActivateObjectWithId(byte[] id, PortableServer.Servant pServant);
		[IdlName("deactivate_object")]
		[ThrowsIdlException(typeof(PortableServer.POA.ObjectNotActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract void DeactivateObject(byte[] oid);
		[IdlName("create_reference")]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract CORBA.IObject CreateReference([WideChar(false)] string intf);
		[IdlName("create_reference_with_id")]
		public abstract CORBA.IObject CreateReferenceWithId(byte[] oid, [WideChar(false)] string intf);
		[IdlName("servant_to_id")]
		[ThrowsIdlException(typeof(PortableServer.POA.ServantNotActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract byte[] ServantToId(PortableServer.Servant pServant);
		[IdlName("servant_to_reference")]
		[ThrowsIdlException(typeof(PortableServer.POA.ServantNotActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract CORBA.IObject ServantToReference(PortableServer.Servant pServant);
		[IdlName("reference_to_servant")]
		[ThrowsIdlException(typeof(PortableServer.POA.ObjectNotActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongAdapter))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract PortableServer.Servant ReferenceToServant(CORBA.IObject reference);
		[IdlName("reference_to_id")]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongAdapter))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract byte[] ReferenceToId(CORBA.IObject reference);
		[IdlName("id_to_servant")]
		[ThrowsIdlException(typeof(PortableServer.POA.ObjectNotActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract PortableServer.Servant IdToServant(byte[] oid);
		[IdlName("id_to_reference")]
		[ThrowsIdlException(typeof(PortableServer.POA.ObjectNotActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract CORBA.IObject IdToReference(byte[] oid);
		[IdlName("id")]
		public abstract byte[] Id 
		{
			get;
		}
		[IdlName("the_POAManagerFactory")]
		public abstract PortableServer.IPOAManagerFactory ThePOAManagerFactory 
		{
			get;
		}
		[IdlName("create_id_for_reference")]
		[ThrowsIdlException(typeof(PortableGroup.GOA.NotAGroupObject))]
		public abstract byte[] CreateIdForReference(CORBA.IObject theRef);
		[IdlName("reference_to_ids")]
		[ThrowsIdlException(typeof(PortableGroup.GOA.NotAGroupObject))]
		public abstract byte[][] ReferenceToIds(CORBA.IObject theRef);
		[IdlName("associate_reference_with_id")]
		[ThrowsIdlException(typeof(PortableGroup.GOA.NotAGroupObject))]
		public abstract void AssociateReferenceWithId(CORBA.IObject @ref, byte[] oid);
		[IdlName("disassociate_reference_with_id")]
		[ThrowsIdlException(typeof(PortableGroup.GOA.NotAGroupObject))]
		public abstract void DisassociateReferenceWithId(CORBA.IObject @ref, byte[] oid);
	}
}

