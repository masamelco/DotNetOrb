/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:30
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace PortableGroup
{

	public abstract class ObjectGroupManagerPOA: PortableServer.Servant, CORBA.IInvokeHandler, IObjectGroupManagerOperations
	{
		static private Dictionary<string,int> _opsDict = new Dictionary<string,int>();
		static ObjectGroupManagerPOA()
		{
			_opsDict.Add("create_member", 0);
			_opsDict.Add("add_member", 1);
			_opsDict.Add("remove_member", 2);
			_opsDict.Add("locations_of_members", 3);
			_opsDict.Add("get_object_group_id", 4);
			_opsDict.Add("get_object_group_ref", 5);
			_opsDict.Add("get_member_ref", 6);
		}
		private string[] _ids = {"IDL:omg.org/PortableGroup/ObjectGroupManager:1.0"};

		[IdlName("create_member")]
		[ThrowsIdlException(typeof(PortableGroup.ObjectGroupNotFound))]
		[ThrowsIdlException(typeof(PortableGroup.MemberAlreadyPresent))]
		[ThrowsIdlException(typeof(PortableGroup.NoFactory))]
		[ThrowsIdlException(typeof(PortableGroup.ObjectNotCreated))]
		[ThrowsIdlException(typeof(PortableGroup.InvalidCriteria))]
		[ThrowsIdlException(typeof(PortableGroup.CannotMeetCriteria))]
		public abstract CORBA.IObject CreateMember(CORBA.IObject objectGroup, CosNaming.NameComponent[] theLocation, [WideChar(false)] string typeId, PortableGroup.Property[] theCriteria);
		[IdlName("add_member")]
		[ThrowsIdlException(typeof(PortableGroup.ObjectGroupNotFound))]
		[ThrowsIdlException(typeof(PortableGroup.MemberAlreadyPresent))]
		[ThrowsIdlException(typeof(PortableGroup.ObjectNotAdded))]
		public abstract CORBA.IObject AddMember(CORBA.IObject objectGroup, CosNaming.NameComponent[] theLocation, CORBA.IObject member);
		[IdlName("remove_member")]
		[ThrowsIdlException(typeof(PortableGroup.ObjectGroupNotFound))]
		[ThrowsIdlException(typeof(PortableGroup.MemberNotFound))]
		public abstract CORBA.IObject RemoveMember(CORBA.IObject objectGroup, CosNaming.NameComponent[] theLocation);
		[IdlName("locations_of_members")]
		[ThrowsIdlException(typeof(PortableGroup.ObjectGroupNotFound))]
		public abstract CosNaming.NameComponent[][] LocationsOfMembers(CORBA.IObject objectGroup);
		[IdlName("get_object_group_id")]
		[ThrowsIdlException(typeof(PortableGroup.ObjectGroupNotFound))]
		public abstract ulong GetObjectGroupId(CORBA.IObject objectGroup);
		[IdlName("get_object_group_ref")]
		[ThrowsIdlException(typeof(PortableGroup.ObjectGroupNotFound))]
		public abstract CORBA.IObject GetObjectGroupRef(CORBA.IObject objectGroup);
		[IdlName("get_member_ref")]
		[ThrowsIdlException(typeof(PortableGroup.ObjectGroupNotFound))]
		[ThrowsIdlException(typeof(PortableGroup.MemberNotFound))]
		public abstract CORBA.IObject GetMemberRef(CORBA.IObject objectGroup, CosNaming.NameComponent[] loc);

		public override string[] _AllInterfaces(PortableServer.IPOA poa, byte[] objId)
		{
			return _ids;
		}

		public virtual PortableGroup.IObjectGroupManager _This()
		{
			return PortableGroup.ObjectGroupManagerHelper.Narrow(_ThisObject());
		}

		public virtual PortableGroup.IObjectGroupManager _This(CORBA.ORB orb)
		{
			return PortableGroup.ObjectGroupManagerHelper.Narrow(_ThisObject(orb));
		}

		public CORBA.IOutputStream _Invoke(string method, CORBA.IInputStream inputStream, CORBA.IResponseHandler handler)
		{
			CORBA.IOutputStream outputStream = null;
			int opIndex;
			if (_opsDict.TryGetValue(method, out opIndex))
			{
				switch (opIndex)
				{
					case 0:
					{
						try
						{
							CORBA.IObject objectGroup;
							objectGroup = inputStream.ReadObject();
							CosNaming.NameComponent[] theLocation;
							{
								var _capacity0 = inputStream.ReadLong();
								if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
								{
									throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
								}
								theLocation = new CosNaming.NameComponent[_capacity0];
								for (int i0 = 0; i0 < _capacity0; i0++)
								{
									CosNaming.NameComponent _item0;
									_item0 = CosNaming.NameComponentHelper.Read(inputStream);
									theLocation[i0] = _item0;
								}
							}
							string typeId;
							typeId = inputStream.ReadString();
							PortableGroup.Property[] theCriteria;
							{
								var _capacity0 = inputStream.ReadLong();
								if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
								{
									throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
								}
								theCriteria = new PortableGroup.Property[_capacity0];
								for (int i0 = 0; i0 < _capacity0; i0++)
								{
									PortableGroup.Property _item0;
									_item0 = PortableGroup.PropertyHelper.Read(inputStream);
									theCriteria[i0] = _item0;
								}
							}
							outputStream = handler.CreateReply();
							var _result = CreateMember(objectGroup, theLocation, typeId, theCriteria);
							outputStream.WriteObject(_result);
						}
						catch(PortableGroup.ObjectGroupNotFound ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.ObjectGroupNotFoundHelper.Write(outputStream, ex);
						}
						catch(PortableGroup.MemberAlreadyPresent ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.MemberAlreadyPresentHelper.Write(outputStream, ex);
						}
						catch(PortableGroup.NoFactory ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.NoFactoryHelper.Write(outputStream, ex);
						}
						catch(PortableGroup.ObjectNotCreated ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.ObjectNotCreatedHelper.Write(outputStream, ex);
						}
						catch(PortableGroup.InvalidCriteria ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.InvalidCriteriaHelper.Write(outputStream, ex);
						}
						catch(PortableGroup.CannotMeetCriteria ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.CannotMeetCriteriaHelper.Write(outputStream, ex);
						}
					}
					break;
					case 1:
					{
						try
						{
							CORBA.IObject objectGroup;
							objectGroup = inputStream.ReadObject();
							CosNaming.NameComponent[] theLocation;
							{
								var _capacity0 = inputStream.ReadLong();
								if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
								{
									throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
								}
								theLocation = new CosNaming.NameComponent[_capacity0];
								for (int i0 = 0; i0 < _capacity0; i0++)
								{
									CosNaming.NameComponent _item0;
									_item0 = CosNaming.NameComponentHelper.Read(inputStream);
									theLocation[i0] = _item0;
								}
							}
							CORBA.IObject member;
							member = inputStream.ReadObject();
							outputStream = handler.CreateReply();
							var _result = AddMember(objectGroup, theLocation, member);
							outputStream.WriteObject(_result);
						}
						catch(PortableGroup.ObjectGroupNotFound ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.ObjectGroupNotFoundHelper.Write(outputStream, ex);
						}
						catch(PortableGroup.MemberAlreadyPresent ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.MemberAlreadyPresentHelper.Write(outputStream, ex);
						}
						catch(PortableGroup.ObjectNotAdded ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.ObjectNotAddedHelper.Write(outputStream, ex);
						}
					}
					break;
					case 2:
					{
						try
						{
							CORBA.IObject objectGroup;
							objectGroup = inputStream.ReadObject();
							CosNaming.NameComponent[] theLocation;
							{
								var _capacity0 = inputStream.ReadLong();
								if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
								{
									throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
								}
								theLocation = new CosNaming.NameComponent[_capacity0];
								for (int i0 = 0; i0 < _capacity0; i0++)
								{
									CosNaming.NameComponent _item0;
									_item0 = CosNaming.NameComponentHelper.Read(inputStream);
									theLocation[i0] = _item0;
								}
							}
							outputStream = handler.CreateReply();
							var _result = RemoveMember(objectGroup, theLocation);
							outputStream.WriteObject(_result);
						}
						catch(PortableGroup.ObjectGroupNotFound ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.ObjectGroupNotFoundHelper.Write(outputStream, ex);
						}
						catch(PortableGroup.MemberNotFound ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.MemberNotFoundHelper.Write(outputStream, ex);
						}
					}
					break;
					case 3:
					{
						try
						{
							CORBA.IObject objectGroup;
							objectGroup = inputStream.ReadObject();
							outputStream = handler.CreateReply();
							var _result = LocationsOfMembers(objectGroup);
							{
								outputStream.WriteLong(_result.Length);
								for (int i0 = 0; i0 < _result.Length; i0++)
								{
									{
										outputStream.WriteLong(_result[i0].Length);
										for (int i1 = 0; i1 < _result[i0].Length; i1++)
										{
											CosNaming.NameComponentHelper.Write(outputStream, _result[i0][i1]);
										}
									}
								}
							}
						}
						catch(PortableGroup.ObjectGroupNotFound ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.ObjectGroupNotFoundHelper.Write(outputStream, ex);
						}
					}
					break;
					case 4:
					{
						try
						{
							CORBA.IObject objectGroup;
							objectGroup = inputStream.ReadObject();
							outputStream = handler.CreateReply();
							var _result = GetObjectGroupId(objectGroup);
							outputStream.WriteULongLong(_result);
						}
						catch(PortableGroup.ObjectGroupNotFound ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.ObjectGroupNotFoundHelper.Write(outputStream, ex);
						}
					}
					break;
					case 5:
					{
						try
						{
							CORBA.IObject objectGroup;
							objectGroup = inputStream.ReadObject();
							outputStream = handler.CreateReply();
							var _result = GetObjectGroupRef(objectGroup);
							outputStream.WriteObject(_result);
						}
						catch(PortableGroup.ObjectGroupNotFound ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.ObjectGroupNotFoundHelper.Write(outputStream, ex);
						}
					}
					break;
					case 6:
					{
						try
						{
							CORBA.IObject objectGroup;
							objectGroup = inputStream.ReadObject();
							CosNaming.NameComponent[] loc;
							{
								var _capacity0 = inputStream.ReadLong();
								if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
								{
									throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
								}
								loc = new CosNaming.NameComponent[_capacity0];
								for (int i0 = 0; i0 < _capacity0; i0++)
								{
									CosNaming.NameComponent _item0;
									_item0 = CosNaming.NameComponentHelper.Read(inputStream);
									loc[i0] = _item0;
								}
							}
							outputStream = handler.CreateReply();
							var _result = GetMemberRef(objectGroup, loc);
							outputStream.WriteObject(_result);
						}
						catch(PortableGroup.ObjectGroupNotFound ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.ObjectGroupNotFoundHelper.Write(outputStream, ex);
						}
						catch(PortableGroup.MemberNotFound ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.MemberNotFoundHelper.Write(outputStream, ex);
						}
					}
					break;
				}
				return outputStream;
			}
			else
			{
				throw new CORBA.BadOperation(method + " not found");
			}
		}
	}
}
