/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:30
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace PortableGroup
{
	public class _ObjectGroupManagerStub: CORBA.Object, IObjectGroupManager
	{
		private new string[] _ids = {"IDL:omg.org/PortableGroup/ObjectGroupManager:1.0"};

		public override string[] _Ids()
		{
			return _ids;
		}

		public static Type _opsType = typeof(IObjectGroupManagerOperations);

		[IdlName("create_member")]
		[ThrowsIdlException(typeof(PortableGroup.ObjectGroupNotFound))]
		[ThrowsIdlException(typeof(PortableGroup.MemberAlreadyPresent))]
		[ThrowsIdlException(typeof(PortableGroup.NoFactory))]
		[ThrowsIdlException(typeof(PortableGroup.ObjectNotCreated))]
		[ThrowsIdlException(typeof(PortableGroup.InvalidCriteria))]
		[ThrowsIdlException(typeof(PortableGroup.CannotMeetCriteria))]
		public CORBA.IObject CreateMember(CORBA.IObject objectGroup, CosNaming.NameComponent[] theLocation, [WideChar(false)] string typeId, PortableGroup.Property[] theCriteria)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("create_member", true);
					outputStream.WriteObject(objectGroup);
					{
						outputStream.WriteLong(theLocation.Length);
						for (int i0 = 0; i0 < theLocation.Length; i0++)
						{
							CosNaming.NameComponentHelper.Write(outputStream, theLocation[i0]);
						}
					}
					outputStream.WriteString(typeId);
					{
						outputStream.WriteLong(theCriteria.Length);
						for (int i0 = 0; i0 < theCriteria.Length; i0++)
						{
							PortableGroup.PropertyHelper.Write(outputStream, theCriteria[i0]);
						}
					}
					inputStream = _Invoke(outputStream);
					CORBA.IObject _result;
					_result = inputStream.ReadObject();
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0":
								throw PortableGroup.ObjectGroupNotFoundHelper.Read(aex.InputStream);
							case "IDL:omg.org/PortableGroup/MemberAlreadyPresent:1.0":
								throw PortableGroup.MemberAlreadyPresentHelper.Read(aex.InputStream);
							case "IDL:omg.org/PortableGroup/NoFactory:1.0":
								throw PortableGroup.NoFactoryHelper.Read(aex.InputStream);
							case "IDL:omg.org/PortableGroup/ObjectNotCreated:1.0":
								throw PortableGroup.ObjectNotCreatedHelper.Read(aex.InputStream);
							case "IDL:omg.org/PortableGroup/InvalidCriteria:1.0":
								throw PortableGroup.InvalidCriteriaHelper.Read(aex.InputStream);
							case "IDL:omg.org/PortableGroup/CannotMeetCriteria:1.0":
								throw PortableGroup.CannotMeetCriteriaHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("add_member")]
		[ThrowsIdlException(typeof(PortableGroup.ObjectGroupNotFound))]
		[ThrowsIdlException(typeof(PortableGroup.MemberAlreadyPresent))]
		[ThrowsIdlException(typeof(PortableGroup.ObjectNotAdded))]
		public CORBA.IObject AddMember(CORBA.IObject objectGroup, CosNaming.NameComponent[] theLocation, CORBA.IObject member)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("add_member", true);
					outputStream.WriteObject(objectGroup);
					{
						outputStream.WriteLong(theLocation.Length);
						for (int i0 = 0; i0 < theLocation.Length; i0++)
						{
							CosNaming.NameComponentHelper.Write(outputStream, theLocation[i0]);
						}
					}
					outputStream.WriteObject(member);
					inputStream = _Invoke(outputStream);
					CORBA.IObject _result;
					_result = inputStream.ReadObject();
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0":
								throw PortableGroup.ObjectGroupNotFoundHelper.Read(aex.InputStream);
							case "IDL:omg.org/PortableGroup/MemberAlreadyPresent:1.0":
								throw PortableGroup.MemberAlreadyPresentHelper.Read(aex.InputStream);
							case "IDL:omg.org/PortableGroup/ObjectNotAdded:1.0":
								throw PortableGroup.ObjectNotAddedHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("remove_member")]
		[ThrowsIdlException(typeof(PortableGroup.ObjectGroupNotFound))]
		[ThrowsIdlException(typeof(PortableGroup.MemberNotFound))]
		public CORBA.IObject RemoveMember(CORBA.IObject objectGroup, CosNaming.NameComponent[] theLocation)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("remove_member", true);
					outputStream.WriteObject(objectGroup);
					{
						outputStream.WriteLong(theLocation.Length);
						for (int i0 = 0; i0 < theLocation.Length; i0++)
						{
							CosNaming.NameComponentHelper.Write(outputStream, theLocation[i0]);
						}
					}
					inputStream = _Invoke(outputStream);
					CORBA.IObject _result;
					_result = inputStream.ReadObject();
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0":
								throw PortableGroup.ObjectGroupNotFoundHelper.Read(aex.InputStream);
							case "IDL:omg.org/PortableGroup/MemberNotFound:1.0":
								throw PortableGroup.MemberNotFoundHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("locations_of_members")]
		[ThrowsIdlException(typeof(PortableGroup.ObjectGroupNotFound))]
		public CosNaming.NameComponent[][] LocationsOfMembers(CORBA.IObject objectGroup)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("locations_of_members", true);
					outputStream.WriteObject(objectGroup);
					inputStream = _Invoke(outputStream);
					CosNaming.NameComponent[][] _result;
					{
						var _capacity0 = inputStream.ReadLong();
						if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
						{
							throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
						}
						_result = new CosNaming.NameComponent[_capacity0][];
						for (int i0 = 0; i0 < _capacity0; i0++)
						{
							CosNaming.NameComponent[] _item0;
							{
								var _capacity1 = inputStream.ReadLong();
								if (inputStream.Available > 0 && _capacity1 > inputStream.Available)
								{
									throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity1}");
								}
								_item0 = new CosNaming.NameComponent[_capacity1];
								for (int i1 = 0; i1 < _capacity1; i1++)
								{
									CosNaming.NameComponent _item1;
									_item1 = CosNaming.NameComponentHelper.Read(inputStream);
									_item0[i1] = _item1;
								}
							}
							_result[i0] = _item0;
						}
					}
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0":
								throw PortableGroup.ObjectGroupNotFoundHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("get_object_group_id")]
		[ThrowsIdlException(typeof(PortableGroup.ObjectGroupNotFound))]
		public ulong GetObjectGroupId(CORBA.IObject objectGroup)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("get_object_group_id", true);
					outputStream.WriteObject(objectGroup);
					inputStream = _Invoke(outputStream);
					ulong _result;
					_result = inputStream.ReadULongLong();
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0":
								throw PortableGroup.ObjectGroupNotFoundHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("get_object_group_ref")]
		[ThrowsIdlException(typeof(PortableGroup.ObjectGroupNotFound))]
		public CORBA.IObject GetObjectGroupRef(CORBA.IObject objectGroup)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("get_object_group_ref", true);
					outputStream.WriteObject(objectGroup);
					inputStream = _Invoke(outputStream);
					CORBA.IObject _result;
					_result = inputStream.ReadObject();
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0":
								throw PortableGroup.ObjectGroupNotFoundHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("get_member_ref")]
		[ThrowsIdlException(typeof(PortableGroup.ObjectGroupNotFound))]
		[ThrowsIdlException(typeof(PortableGroup.MemberNotFound))]
		public CORBA.IObject GetMemberRef(CORBA.IObject objectGroup, CosNaming.NameComponent[] loc)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("get_member_ref", true);
					outputStream.WriteObject(objectGroup);
					{
						outputStream.WriteLong(loc.Length);
						for (int i0 = 0; i0 < loc.Length; i0++)
						{
							CosNaming.NameComponentHelper.Write(outputStream, loc[i0]);
						}
					}
					inputStream = _Invoke(outputStream);
					CORBA.IObject _result;
					_result = inputStream.ReadObject();
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0":
								throw PortableGroup.ObjectGroupNotFoundHelper.Read(aex.InputStream);
							case "IDL:omg.org/PortableGroup/MemberNotFound:1.0":
								throw PortableGroup.MemberNotFoundHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}

	}

}
