/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:36
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace MessageRouting
{

	public abstract class UntypedReplyHandlerPOA: PortableServer.Servant, CORBA.IInvokeHandler, IUntypedReplyHandlerOperations
	{
		static private Dictionary<string,int> _opsDict = new Dictionary<string,int>();
		static UntypedReplyHandlerPOA()
		{
			_opsDict.Add("reply", 0);
		}
		private string[] _ids = {"IDL:MessageRouting/UntypedReplyHandler:1.0","IDL:Messaging/ReplyHandler:1.0"};

		[IdlName("reply")]
		public abstract void Reply([WideChar(false)] string operationName, GIOP.ReplyStatusType12 replyType, MessageRouting.MessageBody replyBody);

		public override string[] _AllInterfaces(PortableServer.IPOA poa, byte[] objId)
		{
			return _ids;
		}

		public virtual MessageRouting.IUntypedReplyHandler _This()
		{
			return MessageRouting.UntypedReplyHandlerHelper.Narrow(_ThisObject());
		}

		public virtual MessageRouting.IUntypedReplyHandler _This(CORBA.ORB orb)
		{
			return MessageRouting.UntypedReplyHandlerHelper.Narrow(_ThisObject(orb));
		}

		public CORBA.IOutputStream _Invoke(string method, CORBA.IInputStream inputStream, CORBA.IResponseHandler handler)
		{
			CORBA.IOutputStream outputStream = null;
			int opIndex;
			if (_opsDict.TryGetValue(method, out opIndex))
			{
				switch (opIndex)
				{
					case 0:
					{
							string operationName;
							operationName = inputStream.ReadString();
							GIOP.ReplyStatusType12 replyType;
							replyType = GIOP.ReplyStatusType12Helper.Read(inputStream);
							MessageRouting.MessageBody replyBody;
							replyBody = MessageRouting.MessageBodyHelper.Read(inputStream);
							outputStream = handler.CreateReply();
							Reply(operationName,replyType,replyBody);
					}
					break;
				}
				return outputStream;
			}
			else
			{
				throw new CORBA.BadOperation(method + " not found");
			}
		}
	}
}
