/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:36
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace MessageRouting
{

	public abstract class PersistentRequestPOA: PortableServer.Servant, CORBA.IInvokeHandler, IPersistentRequestOperations
	{
		static private Dictionary<string,int> _opsDict = new Dictionary<string,int>();
		static PersistentRequestPOA()
		{
			_opsDict.Add("_get_reply_available", 0);
			_opsDict.Add("get_reply", 1);
			_opsDict.Add("_set_associated_handler", 2);
			_opsDict.Add("_get_associated_handler", 3);
			_opsDict.Add("get_reply_with_context", 4);
		}
		private string[] _ids = {"IDL:MessageRouting/PersistentRequest:1.0"};

		[IdlName("reply_available")]
		public abstract bool ReplyAvailable 
		{
			get;
		}
		[IdlName("get_reply")]
		[ThrowsIdlException(typeof(MessageRouting.ReplyNotAvailable))]
		public abstract GIOP.ReplyStatusType12 GetReply(bool blocking, uint timeout, out MessageRouting.MessageBody replyBody);
		[IdlName("associated_handler")]
		public abstract Messaging.IReplyHandler AssociatedHandler 
		{
			get;

			set;
		}
		[IdlName("get_reply_with_context")]
		[ThrowsIdlException(typeof(MessageRouting.ReplyNotAvailable))]
		public abstract GIOP.ReplyStatusType12 GetReplyWithContext(bool blocking, uint timeout, out MessageRouting.MessageBody replyBody, out IOP.ServiceContext[] serviceContexts);

		public override string[] _AllInterfaces(PortableServer.IPOA poa, byte[] objId)
		{
			return _ids;
		}

		public virtual MessageRouting.IPersistentRequest _This()
		{
			return MessageRouting.PersistentRequestHelper.Narrow(_ThisObject());
		}

		public virtual MessageRouting.IPersistentRequest _This(CORBA.ORB orb)
		{
			return MessageRouting.PersistentRequestHelper.Narrow(_ThisObject(orb));
		}

		public CORBA.IOutputStream _Invoke(string method, CORBA.IInputStream inputStream, CORBA.IResponseHandler handler)
		{
			CORBA.IOutputStream outputStream = null;
			int opIndex;
			if (_opsDict.TryGetValue(method, out opIndex))
			{
				switch (opIndex)
				{
					case 0:
					{
							outputStream = handler.CreateReply();
							outputStream.WriteBoolean(ReplyAvailable);
					}
					break;
					case 1:
					{
						try
						{
							bool blocking;
							blocking = inputStream.ReadBoolean();
							uint timeout;
							timeout = inputStream.ReadULong();
							outputStream = handler.CreateReply();
							var _result = GetReply(blocking, timeout, out MessageRouting.MessageBody replyBody);
							GIOP.ReplyStatusType12Helper.Write(outputStream, _result);
							MessageRouting.MessageBodyHelper.Write(outputStream, replyBody);
						}
						catch(MessageRouting.ReplyNotAvailable ex)
						{
							outputStream = handler.CreateExceptionReply();
							MessageRouting.ReplyNotAvailableHelper.Write(outputStream, ex);
						}
					}
					break;
					case 2:
					{
							outputStream = handler.CreateReply();
							AssociatedHandler = Messaging.ReplyHandlerHelper.Read(inputStream);
					}
					break;
					case 3:
					{
							outputStream = handler.CreateReply();
							Messaging.ReplyHandlerHelper.Write(outputStream, AssociatedHandler);
					}
					break;
					case 4:
					{
						try
						{
							bool blocking;
							blocking = inputStream.ReadBoolean();
							uint timeout;
							timeout = inputStream.ReadULong();
							outputStream = handler.CreateReply();
							var _result = GetReplyWithContext(blocking, timeout, out MessageRouting.MessageBody replyBody, out IOP.ServiceContext[] serviceContexts);
							GIOP.ReplyStatusType12Helper.Write(outputStream, _result);
							MessageRouting.MessageBodyHelper.Write(outputStream, replyBody);
							{
								outputStream.WriteLong(serviceContexts.Length);
								for (int i0 = 0; i0 < serviceContexts.Length; i0++)
								{
									IOP.ServiceContextHelper.Write(outputStream, serviceContexts[i0]);
								}
							}
						}
						catch(MessageRouting.ReplyNotAvailable ex)
						{
							outputStream = handler.CreateExceptionReply();
							MessageRouting.ReplyNotAvailableHelper.Write(outputStream, ex);
						}
					}
					break;
				}
				return outputStream;
			}
			else
			{
				throw new CORBA.BadOperation(method + " not found");
			}
		}
	}
}
