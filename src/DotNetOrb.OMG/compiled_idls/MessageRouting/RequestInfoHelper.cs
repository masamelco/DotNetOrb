/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:35
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace MessageRouting
{
	public static class RequestInfoHelper
	{
		private static volatile CORBA.TypeCode type;

		public static CORBA.TypeCode Type()
		{
			if (type == null)
			{
				lock (typeof(RequestInfoHelper))
				{
					if (type == null)
					{
						type = CORBA.ORB.Init().CreateStructTc(MessageRouting.RequestInfoHelper.Id(), "RequestInfo", new CORBA.StructMember[] {new CORBA.StructMember("visited", CORBA.ORB.Init().CreateSequenceTc(0, MessageRouting.RouterHelper.Type()), null), new CORBA.StructMember("to_visit", CORBA.ORB.Init().CreateSequenceTc(0, MessageRouting.RouterHelper.Type()), null), new CORBA.StructMember("target", CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 14), null), new CORBA.StructMember("profile_index", CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 2), null), new CORBA.StructMember("reply_destination", MessageRouting.ReplyDestinationHelper.Type(), null), new CORBA.StructMember("selected_qos", CORBA.ORB.Init().CreateSequenceTc(0, Messaging.PolicyValueHelper.Type()), null), new CORBA.StructMember("payload", MessageRouting.RequestMessageHelper.Type(), null), });
					}
				}
			}
			return type;
		}

		public static void Insert(CORBA.Any any, MessageRouting.RequestInfo s)
		{
			any.Type = Type();
			Write(any.CreateOutputStream(), s);
		}

		public static MessageRouting.RequestInfo Extract(CORBA.Any any)
		{
			var inputStream = any.CreateInputStream();
			try
			{
				return Read(inputStream);
			}
			finally
			{
				inputStream.Close();
			}
		}

		public static string Id()
		{
			return "IDL:MessageRouting/RequestInfo:1.0";
		}

		public static MessageRouting.RequestInfo Read(CORBA.IInputStream inputStream)
		{
			var result = new MessageRouting.RequestInfo();
			{
				var _capacity0 = inputStream.ReadLong();
				if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
				{
					throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
				}
				result.Visited = new MessageRouting.IRouter[_capacity0];
				for (int i0 = 0; i0 < _capacity0; i0++)
				{
					MessageRouting.IRouter _item0;
					_item0 = MessageRouting.RouterHelper.Read(inputStream);
					result.Visited[i0] = _item0;
				}
			}
			{
				var _capacity0 = inputStream.ReadLong();
				if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
				{
					throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
				}
				result.ToVisit = new MessageRouting.IRouter[_capacity0];
				for (int i0 = 0; i0 < _capacity0; i0++)
				{
					MessageRouting.IRouter _item0;
					_item0 = MessageRouting.RouterHelper.Read(inputStream);
					result.ToVisit[i0] = _item0;
				}
			}
			result.Target = inputStream.ReadObject();
			result.ProfileIndex = inputStream.ReadUShort();
			result.ReplyDestination = MessageRouting.ReplyDestinationHelper.Read(inputStream);
			{
				var _capacity0 = inputStream.ReadLong();
				if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
				{
					throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
				}
				result.SelectedQos = new Messaging.PolicyValue[_capacity0];
				for (int i0 = 0; i0 < _capacity0; i0++)
				{
					Messaging.PolicyValue _item0;
					_item0 = Messaging.PolicyValueHelper.Read(inputStream);
					result.SelectedQos[i0] = _item0;
				}
			}
			result.Payload = MessageRouting.RequestMessageHelper.Read(inputStream);
			return result;
		}

		public static void Write(CORBA.IOutputStream outputStream, MessageRouting.RequestInfo s)
		{
			{
				outputStream.WriteLong(s.Visited.Length);
				for (int i0 = 0; i0 < s.Visited.Length; i0++)
				{
					MessageRouting.RouterHelper.Write(outputStream, s.Visited[i0]);
				}
			}
			{
				outputStream.WriteLong(s.ToVisit.Length);
				for (int i0 = 0; i0 < s.ToVisit.Length; i0++)
				{
					MessageRouting.RouterHelper.Write(outputStream, s.ToVisit[i0]);
				}
			}
			outputStream.WriteObject(s.Target);
			outputStream.WriteUShort(s.ProfileIndex);
			MessageRouting.ReplyDestinationHelper.Write(outputStream, s.ReplyDestination);
			{
				outputStream.WriteLong(s.SelectedQos.Length);
				for (int i0 = 0; i0 < s.SelectedQos.Length; i0++)
				{
					Messaging.PolicyValueHelper.Write(outputStream, s.SelectedQos[i0]);
				}
			}
			MessageRouting.RequestMessageHelper.Write(outputStream, s.Payload);
		}

	}
}
