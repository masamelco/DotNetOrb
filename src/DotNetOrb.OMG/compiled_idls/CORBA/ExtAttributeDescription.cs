/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:28
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;

namespace CORBA
{
	[RepositoryID("IDL:CORBA/ExtAttributeDescription:1.0")]
	[Helper(typeof(ExtAttributeDescriptionHelper))]
	public partial class ExtAttributeDescription: CORBA.IIDLEntity, IEquatable<CORBA.ExtAttributeDescription>
	{
		[IdlName("ExtAttributeDescription")]
		[WideChar(false)]
		public string Name { get; set; }
		[IdlName("ExtAttributeDescription")]
		[WideChar(false)]
		public string Id { get; set; }
		[IdlName("ExtAttributeDescription")]
		[WideChar(false)]
		public string DefinedIn { get; set; }
		[IdlName("ExtAttributeDescription")]
		[WideChar(false)]
		public string Version { get; set; }
		[IdlName("ExtAttributeDescription")]
		public CORBA.TypeCode Type { get; set; }
		[IdlName("ExtAttributeDescription")]
		public CORBA.AttributeMode Mode { get; set; }
		[IdlName("ExtAttributeDescription")]
		public CORBA.ExceptionDescription[] GetExceptions { get; set; }
		[IdlName("ExtAttributeDescription")]
		public CORBA.ExceptionDescription[] PutExceptions { get; set; }

		public ExtAttributeDescription()
		{
		}

		public ExtAttributeDescription(ExtAttributeDescription other)
		{
			Name = other.Name;
			Id = other.Id;
			DefinedIn = other.DefinedIn;
			Version = other.Version;
			Type = other.Type;
			Mode = other.Mode;
			GetExceptions = other.GetExceptions;
			PutExceptions = other.PutExceptions;
		}

		public ExtAttributeDescription(string name, string id, string definedIn, string version, CORBA.TypeCode type, CORBA.AttributeMode mode, CORBA.ExceptionDescription[] getExceptions, CORBA.ExceptionDescription[] putExceptions)
		{
			this.Name = name;
			this.Id = id;
			this.DefinedIn = definedIn;
			this.Version = version;
			this.Type = type;
			this.Mode = mode;
			this.GetExceptions = getExceptions;
			this.PutExceptions = putExceptions;
		}

		public bool Equals(CORBA.ExtAttributeDescription? other)
		{
			if (other == null) return false;
			if (!Name.Equals(other.Name)) return false;
			if (!Id.Equals(other.Id)) return false;
			if (!DefinedIn.Equals(other.DefinedIn)) return false;
			if (!Version.Equals(other.Version)) return false;
			if (!Type.Equals(other.Type)) return false;
			if (!Mode.Equals(other.Mode)) return false;
			if (!GetExceptions.SequenceEqual(other.GetExceptions)) return false;
			if (!PutExceptions.SequenceEqual(other.PutExceptions)) return false;
			return true;
		}
	}

}
