/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:27
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace CORBA
{
	public abstract partial class Container : CORBA.Object, CORBA.IContainer
	{
		[RepositoryID("IDL:CORBA/Container/Description:1.0")]
		[Helper(typeof(DescriptionHelper))]
		public partial class Description: CORBA.IIDLEntity, IEquatable<CORBA.Container.Description>
		{
			[IdlName("Description")]
			public CORBA.IContained ContainedObject { get; set; }
			[IdlName("Description")]
			public CORBA.DefinitionKind Kind { get; set; }
			[IdlName("Description")]
			public CORBA.Any Value { get; set; }

			public Description()
			{
			}

			public Description(Description other)
			{
				ContainedObject = other.ContainedObject;
				Kind = other.Kind;
				Value = other.Value;
			}

			public Description(CORBA.IContained containedObject, CORBA.DefinitionKind kind, CORBA.Any value)
			{
				this.ContainedObject = containedObject;
				this.Kind = kind;
				this.Value = value;
			}

			public bool Equals(CORBA.Container.Description? other)
			{
				if (other == null) return false;
				if (!ContainedObject.Equals(other.ContainedObject)) return false;
				if (!Kind.Equals(other.Kind)) return false;
				if (!Value.Equals(other.Value)) return false;
				return true;
			}
		}

		public static class DescriptionHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(DescriptionHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateStructTc(CORBA.Container.DescriptionHelper.Id(), "Description", new CORBA.StructMember[] {new CORBA.StructMember("contained_object", CORBA.ContainedHelper.Type(), null), new CORBA.StructMember("kind", CORBA.DefinitionKindHelper.Type(), null), new CORBA.StructMember("value", CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 11), null), });
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, CORBA.Container.Description s)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), s);
			}

			public static CORBA.Container.Description Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:CORBA/Container/Description:1.0";
			}

			public static CORBA.Container.Description Read(CORBA.IInputStream inputStream)
			{
				var result = new CORBA.Container.Description();
				result.ContainedObject = CORBA.ContainedHelper.Read(inputStream);
				result.Kind = CORBA.DefinitionKindHelper.Read(inputStream);
				result.Value = inputStream.ReadAny();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, CORBA.Container.Description s)
			{
				CORBA.ContainedHelper.Write(outputStream, s.ContainedObject);
				CORBA.DefinitionKindHelper.Write(outputStream, s.Kind);
				outputStream.WriteAny(s.Value);
			}

		}
		public static class DescriptionSeqHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(DescriptionSeqHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateAliasTc(CORBA.Container.DescriptionSeqHelper.Id(), "DescriptionSeq", CORBA.ORB.Init().CreateSequenceTc(0, CORBA.Container.DescriptionHelper.Type()));
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, CORBA.Container.Description[] value)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), value);
			}

			public static CORBA.Container.Description[] Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:CORBA/Container/DescriptionSeq:1.0";
			}

			public static CORBA.Container.Description[] Read(CORBA.IInputStream inputStream)
			{
				CORBA.Container.Description[] result;
				{
					var _capacity0 = inputStream.ReadLong();
					if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
					{
						throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
					}
					result = new CORBA.Container.Description[_capacity0];
					for (int i0 = 0; i0 < _capacity0; i0++)
					{
						CORBA.Container.Description _item0;
						_item0 = CORBA.Container.DescriptionHelper.Read(inputStream);
						result[i0] = _item0;
					}
				}
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, CORBA.Container.Description[] value)
			{
				{
					outputStream.WriteLong(value.Length);
					for (int i0 = 0; i0 < value.Length; i0++)
					{
						CORBA.Container.DescriptionHelper.Write(outputStream, value[i0]);
					}
				}
			}

		}
		[IdlName("def_kind")]
		public abstract CORBA.DefinitionKind DefKind 
		{
			get;
		}
		[IdlName("destroy")]
		public abstract void Destroy();
		[IdlName("lookup")]
		public abstract CORBA.IContained Lookup([WideChar(false)] string searchName);
		[IdlName("contents")]
		public abstract CORBA.IContained[] Contents(CORBA.DefinitionKind limitType, bool excludeInherited);
		[IdlName("lookup_name")]
		public abstract CORBA.IContained[] LookupName([WideChar(false)] string searchName, int levelsToSearch, CORBA.DefinitionKind limitType, bool excludeInherited);
		[IdlName("describe_contents")]
		public abstract CORBA.Container.Description[] DescribeContents(CORBA.DefinitionKind limitType, bool excludeInherited, int maxReturnedObjs);
		[IdlName("create_module")]
		public abstract CORBA.IModuleDef CreateModule([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version);
		[IdlName("create_constant")]
		public abstract CORBA.IConstantDef CreateConstant([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IIDLType type, CORBA.Any value);
		[IdlName("create_struct")]
		public abstract CORBA.IStructDef CreateStruct([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.StructMember[] members);
		[IdlName("create_union")]
		public abstract CORBA.IUnionDef CreateUnion([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IIDLType discriminatorType, CORBA.UnionMember[] members);
		[IdlName("create_enum")]
		public abstract CORBA.IEnumDef CreateEnum([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, string[] members);
		[IdlName("create_alias")]
		public abstract CORBA.IAliasDef CreateAlias([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IIDLType originalType);
		[IdlName("create_interface")]
		public abstract CORBA.IInterfaceDef CreateInterface([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IInterfaceDef[] baseInterfaces, bool isAbstract);
		[IdlName("create_value")]
		public abstract CORBA.IValueDef CreateValue([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, bool isCustom, bool isAbstract, CORBA.IValueDef baseValue, bool isTruncatable, CORBA.IValueDef[] abstractBaseValues, CORBA.IInterfaceDef[] supportedInterfaces, CORBA.Initializer[] initializers);
		[IdlName("create_value_box")]
		public abstract CORBA.IValueBoxDef CreateValueBox([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IIDLType originalTypeDef);
		[IdlName("create_exception")]
		public abstract CORBA.IExceptionDef CreateException([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.StructMember[] members);
		[IdlName("create_native")]
		public abstract CORBA.INativeDef CreateNative([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version);
		[IdlName("create_abstract_interface")]
		public abstract CORBA.IAbstractInterfaceDef CreateAbstractInterface([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IAbstractInterfaceDef[] baseInterfaces);
		[IdlName("create_local_interface")]
		public abstract CORBA.ILocalInterfaceDef CreateLocalInterface([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IInterfaceDef[] baseInterfaces);
		[IdlName("create_ext_value")]
		public abstract CORBA.IExtValueDef CreateExtValue([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, bool isCustom, bool isAbstract, CORBA.IValueDef baseValue, bool isTruncatable, CORBA.IValueDef[] abstractBaseValues, CORBA.IInterfaceDef[] supportedInterfaces, CORBA.ExtInitializer[] initializers);
	}
}

