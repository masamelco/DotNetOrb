/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:28
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace CORBA
{
	public abstract partial class ValueDef : CORBA.Object, CORBA.IValueDef
	{
		[RepositoryID("IDL:CORBA/ValueDef/FullValueDescription:1.0")]
		[Helper(typeof(FullValueDescriptionHelper))]
		public partial class FullValueDescription: CORBA.IIDLEntity, IEquatable<CORBA.ValueDef.FullValueDescription>
		{
			[IdlName("FullValueDescription")]
			[WideChar(false)]
			public string Name { get; set; }
			[IdlName("FullValueDescription")]
			[WideChar(false)]
			public string Id { get; set; }
			[IdlName("FullValueDescription")]
			public bool IsAbstract { get; set; }
			[IdlName("FullValueDescription")]
			public bool IsCustom { get; set; }
			[IdlName("FullValueDescription")]
			[WideChar(false)]
			public string DefinedIn { get; set; }
			[IdlName("FullValueDescription")]
			[WideChar(false)]
			public string Version { get; set; }
			[IdlName("FullValueDescription")]
			public CORBA.OperationDescription[] Operations { get; set; }
			[IdlName("FullValueDescription")]
			public CORBA.AttributeDescription[] Attributes { get; set; }
			[IdlName("FullValueDescription")]
			public CORBA.ValueMember[] Members { get; set; }
			[IdlName("FullValueDescription")]
			public CORBA.Initializer[] Initializers { get; set; }
			[IdlName("FullValueDescription")]
			public string[] SupportedInterfaces { get; set; }
			[IdlName("FullValueDescription")]
			public string[] AbstractBaseValues { get; set; }
			[IdlName("FullValueDescription")]
			public bool IsTruncatable { get; set; }
			[IdlName("FullValueDescription")]
			[WideChar(false)]
			public string BaseValue { get; set; }
			[IdlName("FullValueDescription")]
			public CORBA.TypeCode Type { get; set; }

			public FullValueDescription()
			{
			}

			public FullValueDescription(FullValueDescription other)
			{
				Name = other.Name;
				Id = other.Id;
				IsAbstract = other.IsAbstract;
				IsCustom = other.IsCustom;
				DefinedIn = other.DefinedIn;
				Version = other.Version;
				Operations = other.Operations;
				Attributes = other.Attributes;
				Members = other.Members;
				Initializers = other.Initializers;
				SupportedInterfaces = other.SupportedInterfaces;
				AbstractBaseValues = other.AbstractBaseValues;
				IsTruncatable = other.IsTruncatable;
				BaseValue = other.BaseValue;
				Type = other.Type;
			}

			public FullValueDescription(string name, string id, bool isAbstract, bool isCustom, string definedIn, string version, CORBA.OperationDescription[] operations, CORBA.AttributeDescription[] attributes, CORBA.ValueMember[] members, CORBA.Initializer[] initializers, string[] supportedInterfaces, string[] abstractBaseValues, bool isTruncatable, string baseValue, CORBA.TypeCode type)
			{
				this.Name = name;
				this.Id = id;
				this.IsAbstract = isAbstract;
				this.IsCustom = isCustom;
				this.DefinedIn = definedIn;
				this.Version = version;
				this.Operations = operations;
				this.Attributes = attributes;
				this.Members = members;
				this.Initializers = initializers;
				this.SupportedInterfaces = supportedInterfaces;
				this.AbstractBaseValues = abstractBaseValues;
				this.IsTruncatable = isTruncatable;
				this.BaseValue = baseValue;
				this.Type = type;
			}

			public bool Equals(CORBA.ValueDef.FullValueDescription? other)
			{
				if (other == null) return false;
				if (!Name.Equals(other.Name)) return false;
				if (!Id.Equals(other.Id)) return false;
				if (!IsAbstract.Equals(other.IsAbstract)) return false;
				if (!IsCustom.Equals(other.IsCustom)) return false;
				if (!DefinedIn.Equals(other.DefinedIn)) return false;
				if (!Version.Equals(other.Version)) return false;
				if (!Operations.SequenceEqual(other.Operations)) return false;
				if (!Attributes.SequenceEqual(other.Attributes)) return false;
				if (!Members.SequenceEqual(other.Members)) return false;
				if (!Initializers.SequenceEqual(other.Initializers)) return false;
				if (!SupportedInterfaces.SequenceEqual(other.SupportedInterfaces)) return false;
				if (!AbstractBaseValues.SequenceEqual(other.AbstractBaseValues)) return false;
				if (!IsTruncatable.Equals(other.IsTruncatable)) return false;
				if (!BaseValue.Equals(other.BaseValue)) return false;
				if (!Type.Equals(other.Type)) return false;
				return true;
			}
		}

		public static class FullValueDescriptionHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(FullValueDescriptionHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateStructTc(CORBA.ValueDef.FullValueDescriptionHelper.Id(), "FullValueDescription", new CORBA.StructMember[] {new CORBA.StructMember("name", CORBA.ORB.Init().CreateStringTc(0), null), new CORBA.StructMember("id", CORBA.ORB.Init().CreateStringTc(0), null), new CORBA.StructMember("is_abstract", CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 8), null), new CORBA.StructMember("is_custom", CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 8), null), new CORBA.StructMember("defined_in", CORBA.ORB.Init().CreateStringTc(0), null), new CORBA.StructMember("version", CORBA.ORB.Init().CreateStringTc(0), null), new CORBA.StructMember("operations", CORBA.ORB.Init().CreateSequenceTc(0, CORBA.OperationDescriptionHelper.Type()), null), new CORBA.StructMember("attributes", CORBA.ORB.Init().CreateSequenceTc(0, CORBA.AttributeDescriptionHelper.Type()), null), new CORBA.StructMember("members", CORBA.ORB.Init().CreateSequenceTc(0, CORBA.ValueMemberHelper.Type()), null), new CORBA.StructMember("initializers", CORBA.ORB.Init().CreateSequenceTc(0, CORBA.InitializerHelper.Type()), null), new CORBA.StructMember("supported_interfaces", CORBA.ORB.Init().CreateSequenceTc(0, CORBA.ORB.Init().CreateStringTc(0)), null), new CORBA.StructMember("abstract_base_values", CORBA.ORB.Init().CreateSequenceTc(0, CORBA.ORB.Init().CreateStringTc(0)), null), new CORBA.StructMember("is_truncatable", CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 8), null), new CORBA.StructMember("base_value", CORBA.ORB.Init().CreateStringTc(0), null), new CORBA.StructMember("type", CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 12), null), });
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, CORBA.ValueDef.FullValueDescription s)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), s);
			}

			public static CORBA.ValueDef.FullValueDescription Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:CORBA/ValueDef/FullValueDescription:1.0";
			}

			public static CORBA.ValueDef.FullValueDescription Read(CORBA.IInputStream inputStream)
			{
				var result = new CORBA.ValueDef.FullValueDescription();
				result.Name = inputStream.ReadString();
				result.Id = inputStream.ReadString();
				result.IsAbstract = inputStream.ReadBoolean();
				result.IsCustom = inputStream.ReadBoolean();
				result.DefinedIn = inputStream.ReadString();
				result.Version = inputStream.ReadString();
				{
					var _capacity0 = inputStream.ReadLong();
					if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
					{
						throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
					}
					result.Operations = new CORBA.OperationDescription[_capacity0];
					for (int i0 = 0; i0 < _capacity0; i0++)
					{
						CORBA.OperationDescription _item0;
						_item0 = CORBA.OperationDescriptionHelper.Read(inputStream);
						result.Operations[i0] = _item0;
					}
				}
				{
					var _capacity0 = inputStream.ReadLong();
					if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
					{
						throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
					}
					result.Attributes = new CORBA.AttributeDescription[_capacity0];
					for (int i0 = 0; i0 < _capacity0; i0++)
					{
						CORBA.AttributeDescription _item0;
						_item0 = CORBA.AttributeDescriptionHelper.Read(inputStream);
						result.Attributes[i0] = _item0;
					}
				}
				{
					var _capacity0 = inputStream.ReadLong();
					if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
					{
						throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
					}
					result.Members = new CORBA.ValueMember[_capacity0];
					for (int i0 = 0; i0 < _capacity0; i0++)
					{
						CORBA.ValueMember _item0;
						_item0 = CORBA.ValueMemberHelper.Read(inputStream);
						result.Members[i0] = _item0;
					}
				}
				{
					var _capacity0 = inputStream.ReadLong();
					if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
					{
						throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
					}
					result.Initializers = new CORBA.Initializer[_capacity0];
					for (int i0 = 0; i0 < _capacity0; i0++)
					{
						CORBA.Initializer _item0;
						_item0 = CORBA.InitializerHelper.Read(inputStream);
						result.Initializers[i0] = _item0;
					}
				}
				{
					var _capacity0 = inputStream.ReadLong();
					if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
					{
						throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
					}
					result.SupportedInterfaces = new string[_capacity0];
					for (int i0 = 0; i0 < _capacity0; i0++)
					{
						string _item0;
						_item0 = inputStream.ReadString();
						result.SupportedInterfaces[i0] = _item0;
					}
				}
				{
					var _capacity0 = inputStream.ReadLong();
					if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
					{
						throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
					}
					result.AbstractBaseValues = new string[_capacity0];
					for (int i0 = 0; i0 < _capacity0; i0++)
					{
						string _item0;
						_item0 = inputStream.ReadString();
						result.AbstractBaseValues[i0] = _item0;
					}
				}
				result.IsTruncatable = inputStream.ReadBoolean();
				result.BaseValue = inputStream.ReadString();
				result.Type = inputStream.ReadTypeCode();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, CORBA.ValueDef.FullValueDescription s)
			{
				outputStream.WriteString(s.Name);
				outputStream.WriteString(s.Id);
				outputStream.WriteBoolean(s.IsAbstract);
				outputStream.WriteBoolean(s.IsCustom);
				outputStream.WriteString(s.DefinedIn);
				outputStream.WriteString(s.Version);
				{
					outputStream.WriteLong(s.Operations.Length);
					for (int i0 = 0; i0 < s.Operations.Length; i0++)
					{
						CORBA.OperationDescriptionHelper.Write(outputStream, s.Operations[i0]);
					}
				}
				{
					outputStream.WriteLong(s.Attributes.Length);
					for (int i0 = 0; i0 < s.Attributes.Length; i0++)
					{
						CORBA.AttributeDescriptionHelper.Write(outputStream, s.Attributes[i0]);
					}
				}
				{
					outputStream.WriteLong(s.Members.Length);
					for (int i0 = 0; i0 < s.Members.Length; i0++)
					{
						CORBA.ValueMemberHelper.Write(outputStream, s.Members[i0]);
					}
				}
				{
					outputStream.WriteLong(s.Initializers.Length);
					for (int i0 = 0; i0 < s.Initializers.Length; i0++)
					{
						CORBA.InitializerHelper.Write(outputStream, s.Initializers[i0]);
					}
				}
				{
					outputStream.WriteLong(s.SupportedInterfaces.Length);
					for (int i0 = 0; i0 < s.SupportedInterfaces.Length; i0++)
					{
						outputStream.WriteString(s.SupportedInterfaces[i0]);
					}
				}
				{
					outputStream.WriteLong(s.AbstractBaseValues.Length);
					for (int i0 = 0; i0 < s.AbstractBaseValues.Length; i0++)
					{
						outputStream.WriteString(s.AbstractBaseValues[i0]);
					}
				}
				outputStream.WriteBoolean(s.IsTruncatable);
				outputStream.WriteString(s.BaseValue);
				outputStream.WriteTypeCode(s.Type);
			}

		}
		[IdlName("def_kind")]
		public abstract CORBA.DefinitionKind DefKind 
		{
			get;
		}
		[IdlName("destroy")]
		public abstract void Destroy();
		[IdlName("lookup")]
		public abstract CORBA.IContained Lookup([WideChar(false)] string searchName);
		[IdlName("contents")]
		public abstract CORBA.IContained[] Contents(CORBA.DefinitionKind limitType, bool excludeInherited);
		[IdlName("lookup_name")]
		public abstract CORBA.IContained[] LookupName([WideChar(false)] string searchName, int levelsToSearch, CORBA.DefinitionKind limitType, bool excludeInherited);
		[IdlName("describe_contents")]
		public abstract CORBA.Container.Description[] DescribeContents(CORBA.DefinitionKind limitType, bool excludeInherited, int maxReturnedObjs);
		[IdlName("create_module")]
		public abstract CORBA.IModuleDef CreateModule([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version);
		[IdlName("create_constant")]
		public abstract CORBA.IConstantDef CreateConstant([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IIDLType type, CORBA.Any value);
		[IdlName("create_struct")]
		public abstract CORBA.IStructDef CreateStruct([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.StructMember[] members);
		[IdlName("create_union")]
		public abstract CORBA.IUnionDef CreateUnion([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IIDLType discriminatorType, CORBA.UnionMember[] members);
		[IdlName("create_enum")]
		public abstract CORBA.IEnumDef CreateEnum([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, string[] members);
		[IdlName("create_alias")]
		public abstract CORBA.IAliasDef CreateAlias([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IIDLType originalType);
		[IdlName("create_interface")]
		public abstract CORBA.IInterfaceDef CreateInterface([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IInterfaceDef[] baseInterfaces, bool isAbstract);
		[IdlName("create_value")]
		public abstract CORBA.IValueDef CreateValue([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, bool isCustom, bool isAbstract, CORBA.IValueDef baseValue, bool isTruncatable, CORBA.IValueDef[] abstractBaseValues, CORBA.IInterfaceDef[] supportedInterfaces, CORBA.Initializer[] initializers);
		[IdlName("create_value_box")]
		public abstract CORBA.IValueBoxDef CreateValueBox([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IIDLType originalTypeDef);
		[IdlName("create_exception")]
		public abstract CORBA.IExceptionDef CreateException([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.StructMember[] members);
		[IdlName("create_native")]
		public abstract CORBA.INativeDef CreateNative([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version);
		[IdlName("create_abstract_interface")]
		public abstract CORBA.IAbstractInterfaceDef CreateAbstractInterface([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IAbstractInterfaceDef[] baseInterfaces);
		[IdlName("create_local_interface")]
		public abstract CORBA.ILocalInterfaceDef CreateLocalInterface([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IInterfaceDef[] baseInterfaces);
		[IdlName("create_ext_value")]
		public abstract CORBA.IExtValueDef CreateExtValue([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, bool isCustom, bool isAbstract, CORBA.IValueDef baseValue, bool isTruncatable, CORBA.IValueDef[] abstractBaseValues, CORBA.IInterfaceDef[] supportedInterfaces, CORBA.ExtInitializer[] initializers);
		[IdlName("id")]
		[WideChar(false)]
		public abstract string Id 
		{
			get;

			set;
		}
		[IdlName("name")]
		[WideChar(false)]
		public abstract string Name 
		{
			get;

			set;
		}
		[IdlName("version")]
		[WideChar(false)]
		public abstract string Version 
		{
			get;

			set;
		}
		[IdlName("defined_in")]
		public abstract CORBA.IContainer DefinedIn 
		{
			get;
		}
		[IdlName("absolute_name")]
		[WideChar(false)]
		public abstract string AbsoluteName 
		{
			get;
		}
		[IdlName("containing_repository")]
		public abstract CORBA.IRepository ContainingRepository 
		{
			get;
		}
		[IdlName("describe")]
		public abstract CORBA.Contained.Description Describe();
		[IdlName("move")]
		public abstract void Move(CORBA.IContainer newContainer, [WideChar(false)] string newName, [WideChar(false)] string newVersion);
		[IdlName("type")]
		public abstract CORBA.TypeCode Type 
		{
			get;
		}
		[IdlName("supported_interfaces")]
		public abstract CORBA.IInterfaceDef[] SupportedInterfaces 
		{
			get;

			set;
		}
		[IdlName("initializers")]
		public abstract CORBA.Initializer[] Initializers 
		{
			get;

			set;
		}
		[IdlName("base_value")]
		public abstract CORBA.IValueDef BaseValue 
		{
			get;

			set;
		}
		[IdlName("abstract_base_values")]
		public abstract CORBA.IValueDef[] AbstractBaseValues 
		{
			get;

			set;
		}
		[IdlName("is_abstract")]
		public abstract bool IsAbstract 
		{
			get;

			set;
		}
		[IdlName("is_custom")]
		public abstract bool IsCustom 
		{
			get;

			set;
		}
		[IdlName("is_truncatable")]
		public abstract bool IsTruncatable 
		{
			get;

			set;
		}
		[IdlName("is_a")]
		public abstract bool IsA([WideChar(false)] string id);
		[IdlName("describe_value")]
		public abstract CORBA.ValueDef.FullValueDescription DescribeValue();
		[IdlName("create_value_member")]
		public abstract CORBA.IValueMemberDef CreateValueMember([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IIDLType type, short access);
		[IdlName("create_attribute")]
		public abstract CORBA.IAttributeDef CreateAttribute([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IIDLType type, CORBA.AttributeMode mode);
		[IdlName("create_operation")]
		public abstract CORBA.IOperationDef CreateOperation([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IIDLType result, CORBA.OperationMode mode, CORBA.ParameterDescription[] @params, CORBA.IExceptionDef[] exceptions, string[] contexts);
	}
}

