/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:26
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace CORBA
{

	public abstract class DomainManagerPOA: PortableServer.Servant, CORBA.IInvokeHandler, IDomainManagerOperations
	{
		static private Dictionary<string,int> _opsDict = new Dictionary<string,int>();
		static DomainManagerPOA()
		{
			_opsDict.Add("get_domain_policy", 0);
		}
		private string[] _ids = {"IDL:CORBA/DomainManager:1.0"};

		[IdlName("get_domain_policy")]
		public abstract CORBA.IPolicy GetDomainPolicy(uint policyType);

		public override string[] _AllInterfaces(PortableServer.IPOA poa, byte[] objId)
		{
			return _ids;
		}

		public virtual CORBA.IDomainManager _This()
		{
			return CORBA.DomainManagerHelper.Narrow(_ThisObject());
		}

		public virtual CORBA.IDomainManager _This(CORBA.ORB orb)
		{
			return CORBA.DomainManagerHelper.Narrow(_ThisObject(orb));
		}

		public CORBA.IOutputStream _Invoke(string method, CORBA.IInputStream inputStream, CORBA.IResponseHandler handler)
		{
			CORBA.IOutputStream outputStream = null;
			int opIndex;
			if (_opsDict.TryGetValue(method, out opIndex))
			{
				switch (opIndex)
				{
					case 0:
					{
							uint policyType;
							policyType = inputStream.ReadULong();
							outputStream = handler.CreateReply();
							var _result = GetDomainPolicy(policyType);
							CORBA.PolicyHelper.Write(outputStream, _result);
					}
					break;
				}
				return outputStream;
			}
			else
			{
				throw new CORBA.BadOperation(method + " not found");
			}
		}
	}
}
