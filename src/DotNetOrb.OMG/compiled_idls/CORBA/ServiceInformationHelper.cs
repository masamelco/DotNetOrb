/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:28
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace CORBA
{
	public static class ServiceInformationHelper
	{
		private static volatile CORBA.TypeCode type;

		public static CORBA.TypeCode Type()
		{
			if (type == null)
			{
				lock (typeof(ServiceInformationHelper))
				{
					if (type == null)
					{
						type = CORBA.ORB.Init().CreateStructTc(CORBA.ServiceInformationHelper.Id(), "ServiceInformation", new CORBA.StructMember[] {new CORBA.StructMember("service_options", CORBA.ORB.Init().CreateSequenceTc(0, CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 5)), null), new CORBA.StructMember("service_details", CORBA.ORB.Init().CreateSequenceTc(0, CORBA.ServiceDetailHelper.Type()), null), });
					}
				}
			}
			return type;
		}

		public static void Insert(CORBA.Any any, CORBA.ServiceInformation s)
		{
			any.Type = Type();
			Write(any.CreateOutputStream(), s);
		}

		public static CORBA.ServiceInformation Extract(CORBA.Any any)
		{
			var inputStream = any.CreateInputStream();
			try
			{
				return Read(inputStream);
			}
			finally
			{
				inputStream.Close();
			}
		}

		public static string Id()
		{
			return "IDL:CORBA/ServiceInformation:1.0";
		}

		public static CORBA.ServiceInformation Read(CORBA.IInputStream inputStream)
		{
			var result = new CORBA.ServiceInformation();
			{
				var _capacity0 = inputStream.ReadLong();
				if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
				{
					throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
				}
				var _array = new uint[_capacity0];
				inputStream.ReadULongArray(ref _array, 0, _capacity0);
				result.ServiceOptions = _array;
			}
			{
				var _capacity0 = inputStream.ReadLong();
				if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
				{
					throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
				}
				result.ServiceDetails = new CORBA.ServiceDetail[_capacity0];
				for (int i0 = 0; i0 < _capacity0; i0++)
				{
					CORBA.ServiceDetail _item0;
					_item0 = CORBA.ServiceDetailHelper.Read(inputStream);
					result.ServiceDetails[i0] = _item0;
				}
			}
			return result;
		}

		public static void Write(CORBA.IOutputStream outputStream, CORBA.ServiceInformation s)
		{
			{
				outputStream.WriteLong(s.ServiceOptions.Length);
				outputStream.WriteULongArray(s.ServiceOptions, 0, s.ServiceOptions.Length);
			}
			{
				outputStream.WriteLong(s.ServiceDetails.Length);
				for (int i0 = 0; i0 < s.ServiceDetails.Length; i0++)
				{
					CORBA.ServiceDetailHelper.Write(outputStream, s.ServiceDetails[i0]);
				}
			}
		}

	}
}
