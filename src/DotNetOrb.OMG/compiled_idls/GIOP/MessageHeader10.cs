/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:28
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;

namespace GIOP
{
	[RepositoryID("IDL:GIOP/MessageHeader_1_0:1.0")]
	[Helper(typeof(MessageHeader10Helper))]
	public partial class MessageHeader10: CORBA.IIDLEntity, IEquatable<GIOP.MessageHeader10>
	{
		[IdlName("MessageHeader_1_0")]
		public char[] Magic { get; set; }
		[IdlName("MessageHeader_1_0")]
		public GIOP.Version GiopVersion { get; set; }
		[IdlName("MessageHeader_1_0")]
		public bool ByteOrder { get; set; }
		[IdlName("MessageHeader_1_0")]
		public byte MessageType { get; set; }
		[IdlName("MessageHeader_1_0")]
		public uint MessageSize { get; set; }

		public MessageHeader10()
		{
		}

		public MessageHeader10(MessageHeader10 other)
		{
			Magic = other.Magic;
			GiopVersion = other.GiopVersion;
			ByteOrder = other.ByteOrder;
			MessageType = other.MessageType;
			MessageSize = other.MessageSize;
		}

		public MessageHeader10(char[] magic, GIOP.Version giopVersion, bool byteOrder, byte messageType, uint messageSize)
		{
			this.Magic = magic;
			this.GiopVersion = giopVersion;
			this.ByteOrder = byteOrder;
			this.MessageType = messageType;
			this.MessageSize = messageSize;
		}

		public bool Equals(GIOP.MessageHeader10? other)
		{
			if (other == null) return false;
			if (!Magic.SequenceEqual(other.Magic)) return false;
			if (!GiopVersion.Equals(other.GiopVersion)) return false;
			if (!ByteOrder.Equals(other.ByteOrder)) return false;
			if (!MessageType.Equals(other.MessageType)) return false;
			if (!MessageSize.Equals(other.MessageSize)) return false;
			return true;
		}
	}

}
