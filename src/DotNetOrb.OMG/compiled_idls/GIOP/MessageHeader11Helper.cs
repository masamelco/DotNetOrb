/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:28
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace GIOP
{
	public static class MessageHeader11Helper
	{
		private static volatile CORBA.TypeCode type;

		public static CORBA.TypeCode Type()
		{
			if (type == null)
			{
				lock (typeof(MessageHeader11Helper))
				{
					if (type == null)
					{
						type = CORBA.ORB.Init().CreateStructTc(GIOP.MessageHeader11Helper.Id(), "MessageHeader_1_1", new CORBA.StructMember[] {new CORBA.StructMember("magic", CORBA.ORB.Init().CreateArrayTc(4, CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 9)), null), new CORBA.StructMember("GIOP_version", GIOP.VersionHelper.Type(), null), new CORBA.StructMember("flags", CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 10), null), new CORBA.StructMember("message_type", CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 10), null), new CORBA.StructMember("message_size", CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 5), null), });
					}
				}
			}
			return type;
		}

		public static void Insert(CORBA.Any any, GIOP.MessageHeader11 s)
		{
			any.Type = Type();
			Write(any.CreateOutputStream(), s);
		}

		public static GIOP.MessageHeader11 Extract(CORBA.Any any)
		{
			var inputStream = any.CreateInputStream();
			try
			{
				return Read(inputStream);
			}
			finally
			{
				inputStream.Close();
			}
		}

		public static string Id()
		{
			return "IDL:GIOP/MessageHeader_1_1:1.0";
		}

		public static GIOP.MessageHeader11 Read(CORBA.IInputStream inputStream)
		{
			var result = new GIOP.MessageHeader11();
			result.Magic = new char[4];
			{
				for (int i0 = 0; i0 < 4; i0++)
				{
					result.Magic[i0] = inputStream.ReadChar();
				}
			}
			result.GiopVersion = GIOP.VersionHelper.Read(inputStream);
			result.Flags = inputStream.ReadOctet();
			result.MessageType = inputStream.ReadOctet();
			result.MessageSize = inputStream.ReadULong();
			return result;
		}

		public static void Write(CORBA.IOutputStream outputStream, GIOP.MessageHeader11 s)
		{
			if (s.Magic.Length < 4)			{
				throw new CORBA.Marshal($"Incorrect array size {s.Magic.Length}, expecting 4");
			}
			for (int i0 = 0; i0 < 4; i0++)
			{
				outputStream.WriteChar(s.Magic[i0]);
			}
			GIOP.VersionHelper.Write(outputStream, s.GiopVersion);
			outputStream.WriteOctet(s.Flags);
			outputStream.WriteOctet(s.MessageType);
			outputStream.WriteULong(s.MessageSize);
		}

	}
}
