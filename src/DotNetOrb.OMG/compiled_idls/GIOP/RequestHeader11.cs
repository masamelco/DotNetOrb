/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:28
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;

namespace GIOP
{
	[RepositoryID("IDL:GIOP/RequestHeader_1_1:1.0")]
	[Helper(typeof(RequestHeader11Helper))]
	public partial class RequestHeader11: CORBA.IIDLEntity, IEquatable<GIOP.RequestHeader11>
	{
		[IdlName("RequestHeader_1_1")]
		public IOP.ServiceContext[] ServiceContext { get; set; }
		[IdlName("RequestHeader_1_1")]
		public uint RequestId { get; set; }
		[IdlName("RequestHeader_1_1")]
		public bool ResponseExpected { get; set; }
		[IdlName("RequestHeader_1_1")]
		public byte[] Reserved { get; set; }
		[IdlName("RequestHeader_1_1")]
		public byte[] ObjectKey { get; set; }
		[IdlName("RequestHeader_1_1")]
		[WideChar(false)]
		public string Operation { get; set; }
		[IdlName("RequestHeader_1_1")]
		public byte[] RequestingPrincipal { get; set; }

		public RequestHeader11()
		{
		}

		public RequestHeader11(RequestHeader11 other)
		{
			ServiceContext = other.ServiceContext;
			RequestId = other.RequestId;
			ResponseExpected = other.ResponseExpected;
			Reserved = other.Reserved;
			ObjectKey = other.ObjectKey;
			Operation = other.Operation;
			RequestingPrincipal = other.RequestingPrincipal;
		}

		public RequestHeader11(IOP.ServiceContext[] serviceContext, uint requestId, bool responseExpected, byte[] reserved, byte[] objectKey, string operation, byte[] requestingPrincipal)
		{
			this.ServiceContext = serviceContext;
			this.RequestId = requestId;
			this.ResponseExpected = responseExpected;
			this.Reserved = reserved;
			this.ObjectKey = objectKey;
			this.Operation = operation;
			this.RequestingPrincipal = requestingPrincipal;
		}

		public bool Equals(GIOP.RequestHeader11? other)
		{
			if (other == null) return false;
			if (!ServiceContext.SequenceEqual(other.ServiceContext)) return false;
			if (!RequestId.Equals(other.RequestId)) return false;
			if (!ResponseExpected.Equals(other.ResponseExpected)) return false;
			if (!Reserved.SequenceEqual(other.Reserved)) return false;
			if (!ObjectKey.SequenceEqual(other.ObjectKey)) return false;
			if (!Operation.Equals(other.Operation)) return false;
			if (!RequestingPrincipal.SequenceEqual(other.RequestingPrincipal)) return false;
			return true;
		}
	}

}
