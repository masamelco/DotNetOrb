/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:30
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace CosNaming
{
	public abstract partial class NamingContextExt : CORBA.Object, CosNaming.INamingContextExt
	{
		public static class StringNameHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(StringNameHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateAliasTc(CosNaming.NamingContextExt.StringNameHelper.Id(), "StringName", CORBA.ORB.Init().CreateStringTc(0));
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, string value)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), value);
			}

			public static string Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:omg.org/CosNaming/NamingContextExt/StringName:1.0";
			}

			public static string Read(CORBA.IInputStream inputStream)
			{
				string result;
				result = inputStream.ReadString();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, string value)
			{
				outputStream.WriteString(value);
			}

		}
		public static class AddressHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(AddressHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateAliasTc(CosNaming.NamingContextExt.AddressHelper.Id(), "Address", CORBA.ORB.Init().CreateStringTc(0));
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, string value)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), value);
			}

			public static string Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:omg.org/CosNaming/NamingContextExt/Address:1.0";
			}

			public static string Read(CORBA.IInputStream inputStream)
			{
				string result;
				result = inputStream.ReadString();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, string value)
			{
				outputStream.WriteString(value);
			}

		}
		public static class URLStringHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(URLStringHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateAliasTc(CosNaming.NamingContextExt.URLStringHelper.Id(), "URLString", CORBA.ORB.Init().CreateStringTc(0));
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, string value)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), value);
			}

			public static string Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:omg.org/CosNaming/NamingContextExt/URLString:1.0";
			}

			public static string Read(CORBA.IInputStream inputStream)
			{
				string result;
				result = inputStream.ReadString();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, string value)
			{
				outputStream.WriteString(value);
			}

		}
		[IdlName("InvalidAddress")]
		[RepositoryID("IDL:omg.org/CosNaming/NamingContextExt/InvalidAddress:1.0")]
		[Helper(typeof(InvalidAddressHelper))]
		public partial class InvalidAddress: CORBA.UserException, CORBA.IIDLEntity, IEquatable<CosNaming.NamingContextExt.InvalidAddress>
		{
			public InvalidAddress()
			{
			}

			public InvalidAddress(string _msg): base(_msg)
			{
			}

			public InvalidAddress(InvalidAddress other)
			{
			}

			public bool Equals(CosNaming.NamingContextExt.InvalidAddress? other)
			{
				if (other == null) return false;
				return true;
			}
		}

		public static class InvalidAddressHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(InvalidAddressHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(CosNaming.NamingContextExt.InvalidAddressHelper.Id(), "InvalidAddress", new CORBA.StructMember[] {});
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, CosNaming.NamingContextExt.InvalidAddress e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static CosNaming.NamingContextExt.InvalidAddress Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:omg.org/CosNaming/NamingContextExt/InvalidAddress:1.0";
			}

			public static CosNaming.NamingContextExt.InvalidAddress Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new CosNaming.NamingContextExt.InvalidAddress();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, CosNaming.NamingContextExt.InvalidAddress e)
			{
				outputStream.WriteString(Id());
			}

		}
		[IdlName("bind")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.AlreadyBound))]
		public abstract void Bind(CosNaming.NameComponent[] n, CORBA.IObject obj);
		[IdlName("rebind")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		public abstract void Rebind(CosNaming.NameComponent[] n, CORBA.IObject obj);
		[IdlName("bind_context")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.AlreadyBound))]
		public abstract void BindContext(CosNaming.NameComponent[] n, CosNaming.INamingContext nc);
		[IdlName("rebind_context")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		public abstract void RebindContext(CosNaming.NameComponent[] n, CosNaming.INamingContext nc);
		[IdlName("resolve")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		public abstract CORBA.IObject Resolve(CosNaming.NameComponent[] n);
		[IdlName("unbind")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		public abstract void Unbind(CosNaming.NameComponent[] n);
		[IdlName("new_context")]
		public abstract CosNaming.INamingContext NewContext();
		[IdlName("bind_new_context")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.AlreadyBound))]
		public abstract CosNaming.INamingContext BindNewContext(CosNaming.NameComponent[] n);
		[IdlName("destroy")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotEmpty))]
		public abstract void Destroy();
		[IdlName("list")]
		public abstract void List(uint howMany, out CosNaming.Binding[] bl, out CosNaming.IBindingIterator bi);
		[IdlName("to_string")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		[return: WideChar(false)]
		public abstract string ToString(CosNaming.NameComponent[] n);
		[IdlName("to_name")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		public abstract CosNaming.NameComponent[] ToName([WideChar(false)] string sn);
		[IdlName("to_url")]
		[ThrowsIdlException(typeof(CosNaming.NamingContextExt.InvalidAddress))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		[return: WideChar(false)]
		public abstract string ToUrl([WideChar(false)] string addr, [WideChar(false)] string sn);
		[IdlName("resolve_str")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		public abstract CORBA.IObject ResolveStr([WideChar(false)] string n);
	}
}

