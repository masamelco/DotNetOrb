/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:30
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace CosNaming
{

	public abstract class BindingIteratorPOA: PortableServer.Servant, CORBA.IInvokeHandler, IBindingIteratorOperations
	{
		static private Dictionary<string,int> _opsDict = new Dictionary<string,int>();
		static BindingIteratorPOA()
		{
			_opsDict.Add("next_one", 0);
			_opsDict.Add("next_n", 1);
			_opsDict.Add("destroy", 2);
		}
		private string[] _ids = {"IDL:omg.org/CosNaming/BindingIterator:1.0"};

		[IdlName("next_one")]
		public abstract bool NextOne(out CosNaming.Binding b);
		[IdlName("next_n")]
		public abstract bool NextN(uint howMany, out CosNaming.Binding[] bl);
		[IdlName("destroy")]
		public abstract void Destroy();

		public override string[] _AllInterfaces(PortableServer.IPOA poa, byte[] objId)
		{
			return _ids;
		}

		public virtual CosNaming.IBindingIterator _This()
		{
			return CosNaming.BindingIteratorHelper.Narrow(_ThisObject());
		}

		public virtual CosNaming.IBindingIterator _This(CORBA.ORB orb)
		{
			return CosNaming.BindingIteratorHelper.Narrow(_ThisObject(orb));
		}

		public CORBA.IOutputStream _Invoke(string method, CORBA.IInputStream inputStream, CORBA.IResponseHandler handler)
		{
			CORBA.IOutputStream outputStream = null;
			int opIndex;
			if (_opsDict.TryGetValue(method, out opIndex))
			{
				switch (opIndex)
				{
					case 0:
					{
							outputStream = handler.CreateReply();
							var _result = NextOne(out CosNaming.Binding b);
							outputStream.WriteBoolean(_result);
							CosNaming.BindingHelper.Write(outputStream, b);
					}
					break;
					case 1:
					{
							uint howMany;
							howMany = inputStream.ReadULong();
							outputStream = handler.CreateReply();
							var _result = NextN(howMany, out CosNaming.Binding[] bl);
							outputStream.WriteBoolean(_result);
							{
								outputStream.WriteLong(bl.Length);
								for (int i0 = 0; i0 < bl.Length; i0++)
								{
									CosNaming.BindingHelper.Write(outputStream, bl[i0]);
								}
							}
					}
					break;
					case 2:
					{
							outputStream = handler.CreateReply();
							Destroy();
					}
					break;
				}
				return outputStream;
			}
			else
			{
				throw new CORBA.BadOperation(method + " not found");
			}
		}
	}
}
