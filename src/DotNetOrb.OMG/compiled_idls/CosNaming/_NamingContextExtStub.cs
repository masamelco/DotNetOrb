/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:30
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace CosNaming
{
	public class _NamingContextExtStub: CORBA.Object, INamingContextExt
	{
		private new string[] _ids = {"IDL:omg.org/CosNaming/NamingContextExt:1.0","IDL:omg.org/CosNaming/NamingContext:1.0"};

		public override string[] _Ids()
		{
			return _ids;
		}

		public static Type _opsType = typeof(INamingContextExtOperations);

		[IdlName("bind")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.AlreadyBound))]
		public void Bind(CosNaming.NameComponent[] n, CORBA.IObject obj)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("bind", true);
					{
						outputStream.WriteLong(n.Length);
						for (int i0 = 0; i0 < n.Length; i0++)
						{
							CosNaming.NameComponentHelper.Write(outputStream, n[i0]);
						}
					}
					outputStream.WriteObject(obj);
					inputStream = _Invoke(outputStream);
					return;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/CosNaming/NamingContext/NotFound:1.0":
								throw CosNaming.NamingContext.NotFoundHelper.Read(aex.InputStream);
							case "IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0":
								throw CosNaming.NamingContext.CannotProceedHelper.Read(aex.InputStream);
							case "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0":
								throw CosNaming.NamingContext.InvalidNameHelper.Read(aex.InputStream);
							case "IDL:omg.org/CosNaming/NamingContext/AlreadyBound:1.0":
								throw CosNaming.NamingContext.AlreadyBoundHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("rebind")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		public void Rebind(CosNaming.NameComponent[] n, CORBA.IObject obj)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("rebind", true);
					{
						outputStream.WriteLong(n.Length);
						for (int i0 = 0; i0 < n.Length; i0++)
						{
							CosNaming.NameComponentHelper.Write(outputStream, n[i0]);
						}
					}
					outputStream.WriteObject(obj);
					inputStream = _Invoke(outputStream);
					return;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/CosNaming/NamingContext/NotFound:1.0":
								throw CosNaming.NamingContext.NotFoundHelper.Read(aex.InputStream);
							case "IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0":
								throw CosNaming.NamingContext.CannotProceedHelper.Read(aex.InputStream);
							case "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0":
								throw CosNaming.NamingContext.InvalidNameHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("bind_context")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.AlreadyBound))]
		public void BindContext(CosNaming.NameComponent[] n, CosNaming.INamingContext nc)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("bind_context", true);
					{
						outputStream.WriteLong(n.Length);
						for (int i0 = 0; i0 < n.Length; i0++)
						{
							CosNaming.NameComponentHelper.Write(outputStream, n[i0]);
						}
					}
					CosNaming.NamingContextHelper.Write(outputStream, nc);
					inputStream = _Invoke(outputStream);
					return;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/CosNaming/NamingContext/NotFound:1.0":
								throw CosNaming.NamingContext.NotFoundHelper.Read(aex.InputStream);
							case "IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0":
								throw CosNaming.NamingContext.CannotProceedHelper.Read(aex.InputStream);
							case "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0":
								throw CosNaming.NamingContext.InvalidNameHelper.Read(aex.InputStream);
							case "IDL:omg.org/CosNaming/NamingContext/AlreadyBound:1.0":
								throw CosNaming.NamingContext.AlreadyBoundHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("rebind_context")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		public void RebindContext(CosNaming.NameComponent[] n, CosNaming.INamingContext nc)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("rebind_context", true);
					{
						outputStream.WriteLong(n.Length);
						for (int i0 = 0; i0 < n.Length; i0++)
						{
							CosNaming.NameComponentHelper.Write(outputStream, n[i0]);
						}
					}
					CosNaming.NamingContextHelper.Write(outputStream, nc);
					inputStream = _Invoke(outputStream);
					return;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/CosNaming/NamingContext/NotFound:1.0":
								throw CosNaming.NamingContext.NotFoundHelper.Read(aex.InputStream);
							case "IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0":
								throw CosNaming.NamingContext.CannotProceedHelper.Read(aex.InputStream);
							case "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0":
								throw CosNaming.NamingContext.InvalidNameHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("resolve")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		public CORBA.IObject Resolve(CosNaming.NameComponent[] n)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("resolve", true);
					{
						outputStream.WriteLong(n.Length);
						for (int i0 = 0; i0 < n.Length; i0++)
						{
							CosNaming.NameComponentHelper.Write(outputStream, n[i0]);
						}
					}
					inputStream = _Invoke(outputStream);
					CORBA.IObject _result;
					_result = inputStream.ReadObject();
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/CosNaming/NamingContext/NotFound:1.0":
								throw CosNaming.NamingContext.NotFoundHelper.Read(aex.InputStream);
							case "IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0":
								throw CosNaming.NamingContext.CannotProceedHelper.Read(aex.InputStream);
							case "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0":
								throw CosNaming.NamingContext.InvalidNameHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("unbind")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		public void Unbind(CosNaming.NameComponent[] n)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("unbind", true);
					{
						outputStream.WriteLong(n.Length);
						for (int i0 = 0; i0 < n.Length; i0++)
						{
							CosNaming.NameComponentHelper.Write(outputStream, n[i0]);
						}
					}
					inputStream = _Invoke(outputStream);
					return;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/CosNaming/NamingContext/NotFound:1.0":
								throw CosNaming.NamingContext.NotFoundHelper.Read(aex.InputStream);
							case "IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0":
								throw CosNaming.NamingContext.CannotProceedHelper.Read(aex.InputStream);
							case "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0":
								throw CosNaming.NamingContext.InvalidNameHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("new_context")]
		public CosNaming.INamingContext NewContext()
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("new_context", true);
					inputStream = _Invoke(outputStream);
					CosNaming.INamingContext _result;
					_result = CosNaming.NamingContextHelper.Read(inputStream);
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("bind_new_context")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.AlreadyBound))]
		public CosNaming.INamingContext BindNewContext(CosNaming.NameComponent[] n)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("bind_new_context", true);
					{
						outputStream.WriteLong(n.Length);
						for (int i0 = 0; i0 < n.Length; i0++)
						{
							CosNaming.NameComponentHelper.Write(outputStream, n[i0]);
						}
					}
					inputStream = _Invoke(outputStream);
					CosNaming.INamingContext _result;
					_result = CosNaming.NamingContextHelper.Read(inputStream);
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/CosNaming/NamingContext/NotFound:1.0":
								throw CosNaming.NamingContext.NotFoundHelper.Read(aex.InputStream);
							case "IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0":
								throw CosNaming.NamingContext.CannotProceedHelper.Read(aex.InputStream);
							case "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0":
								throw CosNaming.NamingContext.InvalidNameHelper.Read(aex.InputStream);
							case "IDL:omg.org/CosNaming/NamingContext/AlreadyBound:1.0":
								throw CosNaming.NamingContext.AlreadyBoundHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("destroy")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotEmpty))]
		public void Destroy()
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("destroy", true);
					inputStream = _Invoke(outputStream);
					return;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/CosNaming/NamingContext/NotEmpty:1.0":
								throw CosNaming.NamingContext.NotEmptyHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("list")]
		public void List(uint howMany, out CosNaming.Binding[] bl, out CosNaming.IBindingIterator bi)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("list", true);
					outputStream.WriteULong(howMany);
					inputStream = _Invoke(outputStream);
					{
						var _capacity0 = inputStream.ReadLong();
						if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
						{
							throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
						}
						bl = new CosNaming.Binding[_capacity0];
						for (int i0 = 0; i0 < _capacity0; i0++)
						{
							CosNaming.Binding _item0;
							_item0 = CosNaming.BindingHelper.Read(inputStream);
							bl[i0] = _item0;
						}
					}
					bi = CosNaming.BindingIteratorHelper.Read(inputStream);
					return;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("to_string")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		[return: WideChar(false)]
		public string ToString(CosNaming.NameComponent[] n)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("to_string", true);
					{
						outputStream.WriteLong(n.Length);
						for (int i0 = 0; i0 < n.Length; i0++)
						{
							CosNaming.NameComponentHelper.Write(outputStream, n[i0]);
						}
					}
					inputStream = _Invoke(outputStream);
					string _result;
					_result = inputStream.ReadString();
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0":
								throw CosNaming.NamingContext.InvalidNameHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("to_name")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		public CosNaming.NameComponent[] ToName([WideChar(false)] string sn)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("to_name", true);
					outputStream.WriteString(sn);
					inputStream = _Invoke(outputStream);
					CosNaming.NameComponent[] _result;
					{
						var _capacity0 = inputStream.ReadLong();
						if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
						{
							throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
						}
						_result = new CosNaming.NameComponent[_capacity0];
						for (int i0 = 0; i0 < _capacity0; i0++)
						{
							CosNaming.NameComponent _item0;
							_item0 = CosNaming.NameComponentHelper.Read(inputStream);
							_result[i0] = _item0;
						}
					}
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0":
								throw CosNaming.NamingContext.InvalidNameHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("to_url")]
		[ThrowsIdlException(typeof(CosNaming.NamingContextExt.InvalidAddress))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		[return: WideChar(false)]
		public string ToUrl([WideChar(false)] string addr, [WideChar(false)] string sn)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("to_url", true);
					outputStream.WriteString(addr);
					outputStream.WriteString(sn);
					inputStream = _Invoke(outputStream);
					string _result;
					_result = inputStream.ReadString();
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/CosNaming/NamingContextExt/InvalidAddress:1.0":
								throw CosNaming.NamingContextExt.InvalidAddressHelper.Read(aex.InputStream);
							case "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0":
								throw CosNaming.NamingContext.InvalidNameHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("resolve_str")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		public CORBA.IObject ResolveStr([WideChar(false)] string n)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("resolve_str", true);
					outputStream.WriteString(n);
					inputStream = _Invoke(outputStream);
					CORBA.IObject _result;
					_result = inputStream.ReadObject();
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/CosNaming/NamingContext/NotFound:1.0":
								throw CosNaming.NamingContext.NotFoundHelper.Read(aex.InputStream);
							case "IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0":
								throw CosNaming.NamingContext.CannotProceedHelper.Read(aex.InputStream);
							case "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0":
								throw CosNaming.NamingContext.InvalidNameHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}

	}

}
