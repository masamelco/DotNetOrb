/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:29
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace SSLIOP
{
	public static class SSLHelper
	{
		private static volatile CORBA.TypeCode type;

		public static CORBA.TypeCode Type()
		{
			if (type == null)
			{
				lock (typeof(SSLHelper))
				{
					if (type == null)
					{
						type = CORBA.ORB.Init().CreateStructTc(SSLIOP.SSLHelper.Id(), "SSL", new CORBA.StructMember[] {new CORBA.StructMember("target_supports", CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 2), null), new CORBA.StructMember("target_requires", CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 2), null), new CORBA.StructMember("port", CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 2), null), });
					}
				}
			}
			return type;
		}

		public static void Insert(CORBA.Any any, SSLIOP.SSL s)
		{
			any.Type = Type();
			Write(any.CreateOutputStream(), s);
		}

		public static SSLIOP.SSL Extract(CORBA.Any any)
		{
			var inputStream = any.CreateInputStream();
			try
			{
				return Read(inputStream);
			}
			finally
			{
				inputStream.Close();
			}
		}

		public static string Id()
		{
			return "IDL:omg.org/SSLIOP/SSL:1.0";
		}

		public static SSLIOP.SSL Read(CORBA.IInputStream inputStream)
		{
			var result = new SSLIOP.SSL();
			result.TargetSupports = inputStream.ReadUShort();
			result.TargetRequires = inputStream.ReadUShort();
			result.Port = inputStream.ReadUShort();
			return result;
		}

		public static void Write(CORBA.IOutputStream outputStream, SSLIOP.SSL s)
		{
			outputStream.WriteUShort(s.TargetSupports);
			outputStream.WriteUShort(s.TargetRequires);
			outputStream.WriteUShort(s.Port);
		}

	}
}
