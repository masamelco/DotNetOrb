/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:29
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;

namespace MIOP
{
	[RepositoryID("IDL:omg.org/MIOP/UIPMC_ProfileBody:1.0")]
	[Helper(typeof(UipmcProfileBodyHelper))]
	public partial class UipmcProfileBody: CORBA.IIDLEntity, IEquatable<MIOP.UipmcProfileBody>
	{
		[IdlName("UIPMC_ProfileBody")]
		public GIOP.Version MiopVersion { get; set; }
		[IdlName("UIPMC_ProfileBody")]
		[WideChar(false)]
		public string TheAddress { get; set; }
		[IdlName("UIPMC_ProfileBody")]
		public short ThePort { get; set; }
		[IdlName("UIPMC_ProfileBody")]
		public IOP.TaggedComponent[] Components { get; set; }

		public UipmcProfileBody()
		{
		}

		public UipmcProfileBody(UipmcProfileBody other)
		{
			MiopVersion = other.MiopVersion;
			TheAddress = other.TheAddress;
			ThePort = other.ThePort;
			Components = other.Components;
		}

		public UipmcProfileBody(GIOP.Version miopVersion, string theAddress, short thePort, IOP.TaggedComponent[] components)
		{
			this.MiopVersion = miopVersion;
			this.TheAddress = theAddress;
			this.ThePort = thePort;
			this.Components = components;
		}

		public bool Equals(MIOP.UipmcProfileBody? other)
		{
			if (other == null) return false;
			if (!MiopVersion.Equals(other.MiopVersion)) return false;
			if (!TheAddress.Equals(other.TheAddress)) return false;
			if (!ThePort.Equals(other.ThePort)) return false;
			if (!Components.SequenceEqual(other.Components)) return false;
			return true;
		}
	}

}
