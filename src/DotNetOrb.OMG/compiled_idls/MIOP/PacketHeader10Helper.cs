/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:29
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace MIOP
{
	public static class PacketHeader10Helper
	{
		private static volatile CORBA.TypeCode type;

		public static CORBA.TypeCode Type()
		{
			if (type == null)
			{
				lock (typeof(PacketHeader10Helper))
				{
					if (type == null)
					{
						type = CORBA.ORB.Init().CreateStructTc(MIOP.PacketHeader10Helper.Id(), "PacketHeader_1_0", new CORBA.StructMember[] {new CORBA.StructMember("magic", CORBA.ORB.Init().CreateArrayTc(4, CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 9)), null), new CORBA.StructMember("hdr_version", CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 10), null), new CORBA.StructMember("flags", CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 10), null), new CORBA.StructMember("packet_length", CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 2), null), new CORBA.StructMember("packet_number", CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 5), null), new CORBA.StructMember("number_of_packets", CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 5), null), new CORBA.StructMember("Id", CORBA.ORB.Init().CreateSequenceTc(252, CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 10)), null), });
					}
				}
			}
			return type;
		}

		public static void Insert(CORBA.Any any, MIOP.PacketHeader10 s)
		{
			any.Type = Type();
			Write(any.CreateOutputStream(), s);
		}

		public static MIOP.PacketHeader10 Extract(CORBA.Any any)
		{
			var inputStream = any.CreateInputStream();
			try
			{
				return Read(inputStream);
			}
			finally
			{
				inputStream.Close();
			}
		}

		public static string Id()
		{
			return "IDL:omg.org/MIOP/PacketHeader_1_0:1.0";
		}

		public static MIOP.PacketHeader10 Read(CORBA.IInputStream inputStream)
		{
			var result = new MIOP.PacketHeader10();
			result.Magic = new char[4];
			{
				for (int i0 = 0; i0 < 4; i0++)
				{
					result.Magic[i0] = inputStream.ReadChar();
				}
			}
			result.HdrVersion = inputStream.ReadOctet();
			result.Flags = inputStream.ReadOctet();
			result.PacketLength = inputStream.ReadUShort();
			result.PacketNumber = inputStream.ReadULong();
			result.NumberOfPackets = inputStream.ReadULong();
			{
				var _capacity0 = inputStream.ReadLong();
				if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
				{
					throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
				}
				var _array = new byte[_capacity0];
				inputStream.ReadOctetArray(ref _array, 0, _capacity0);
				result.Id = _array;
			}
			return result;
		}

		public static void Write(CORBA.IOutputStream outputStream, MIOP.PacketHeader10 s)
		{
			if (s.Magic.Length < 4)			{
				throw new CORBA.Marshal($"Incorrect array size {s.Magic.Length}, expecting 4");
			}
			for (int i0 = 0; i0 < 4; i0++)
			{
				outputStream.WriteChar(s.Magic[i0]);
			}
			outputStream.WriteOctet(s.HdrVersion);
			outputStream.WriteOctet(s.Flags);
			outputStream.WriteUShort(s.PacketLength);
			outputStream.WriteULong(s.PacketNumber);
			outputStream.WriteULong(s.NumberOfPackets);
			{
				outputStream.WriteLong(s.Id.Length);
				outputStream.WriteOctetArray(s.Id, 0, s.Id.Length);
			}
		}

	}
}
