/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:37
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace BiDirPolicy
{
	public class _BidirectionalPolicyStub: CORBA.Object, IBidirectionalPolicy
	{
		private new string[] _ids = {"IDL:omg.org/BiDirPolicy/BidirectionalPolicy:1.0","IDL:CORBA/Policy:1.0"};

		public override string[] _Ids()
		{
			return _ids;
		}

		public static Type _opsType = typeof(IBidirectionalPolicyOperations);

		public uint PolicyType
		{
			get
			{
				while(true)
				{
					{
						IInputStream inputStream = null;
						IOutputStream outputStream = null;
						try
						{
							outputStream = _Request("_get_policy_type", true);
							inputStream = _Invoke(outputStream);
							uint _result;
							_result = inputStream.ReadULong();
							return _result;
						}
						catch(RemarshalException)
						{
							continue;
						}
						catch(CORBA.ApplicationException aex)
						{
							try
							{
								switch (aex.Id)
								{
									default:
										throw new RuntimeException("Unexpected exception " + aex.Id);
								}						
							}
							finally
							{
								try
								{
									aex.InputStream.Close();
								}
								catch (Exception ex)
								{
									throw new RuntimeException("Unexpected exception " + ex.ToString());
								}
							}
						}
						finally
						{
							if (outputStream != null)
							{
								try
								{
									outputStream.Close();
								}
								catch (Exception e)
								{
									throw new RuntimeException("Unexpected exception " + e.ToString());
								}
							}
							if (inputStream != null)
							{
								this._ReleaseReply(inputStream);
							}
						}
					}
				}
			}
		}
		public ushort Value
		{
			get
			{
				while(true)
				{
					{
						IInputStream inputStream = null;
						IOutputStream outputStream = null;
						try
						{
							outputStream = _Request("_get_value", true);
							inputStream = _Invoke(outputStream);
							ushort _result;
							_result = inputStream.ReadUShort();
							return _result;
						}
						catch(RemarshalException)
						{
							continue;
						}
						catch(CORBA.ApplicationException aex)
						{
							try
							{
								switch (aex.Id)
								{
									default:
										throw new RuntimeException("Unexpected exception " + aex.Id);
								}						
							}
							finally
							{
								try
								{
									aex.InputStream.Close();
								}
								catch (Exception ex)
								{
									throw new RuntimeException("Unexpected exception " + ex.ToString());
								}
							}
						}
						finally
						{
							if (outputStream != null)
							{
								try
								{
									outputStream.Close();
								}
								catch (Exception e)
								{
									throw new RuntimeException("Unexpected exception " + e.ToString());
								}
							}
							if (inputStream != null)
							{
								this._ReleaseReply(inputStream);
							}
						}
					}
				}
			}
		}
		[IdlName("copy")]
		public CORBA.IPolicy Copy()
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("copy", true);
					inputStream = _Invoke(outputStream);
					CORBA.IPolicy _result;
					_result = CORBA.PolicyHelper.Read(inputStream);
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("destroy")]
		public void Destroy()
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("destroy", true);
					inputStream = _Invoke(outputStream);
					return;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}

	}

}
