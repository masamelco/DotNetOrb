/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:38
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace DynamicAny
{
	public abstract partial class DynAnyFactory : CORBA.Object, DynamicAny.IDynAnyFactory
	{
		[IdlName("InconsistentTypeCode")]
		[RepositoryID("IDL:DynamicAny/DynAnyFactory/InconsistentTypeCode:1.0")]
		[Helper(typeof(InconsistentTypeCodeHelper))]
		public partial class InconsistentTypeCode: CORBA.UserException, CORBA.IIDLEntity, IEquatable<DynamicAny.DynAnyFactory.InconsistentTypeCode>
		{
			public InconsistentTypeCode()
			{
			}

			public InconsistentTypeCode(string _msg): base(_msg)
			{
			}

			public InconsistentTypeCode(InconsistentTypeCode other)
			{
			}

			public bool Equals(DynamicAny.DynAnyFactory.InconsistentTypeCode? other)
			{
				if (other == null) return false;
				return true;
			}
		}

		public static class InconsistentTypeCodeHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(InconsistentTypeCodeHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(DynamicAny.DynAnyFactory.InconsistentTypeCodeHelper.Id(), "InconsistentTypeCode", new CORBA.StructMember[] {});
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, DynamicAny.DynAnyFactory.InconsistentTypeCode e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static DynamicAny.DynAnyFactory.InconsistentTypeCode Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:DynamicAny/DynAnyFactory/InconsistentTypeCode:1.0";
			}

			public static DynamicAny.DynAnyFactory.InconsistentTypeCode Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new DynamicAny.DynAnyFactory.InconsistentTypeCode();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, DynamicAny.DynAnyFactory.InconsistentTypeCode e)
			{
				outputStream.WriteString(Id());
			}

		}
		[IdlName("create_dyn_any")]
		[ThrowsIdlException(typeof(DynamicAny.DynAnyFactory.InconsistentTypeCode))]
		public abstract DynamicAny.IDynAny CreateDynAny(CORBA.Any value);
		[IdlName("create_dyn_any_from_type_code")]
		[ThrowsIdlException(typeof(DynamicAny.DynAnyFactory.InconsistentTypeCode))]
		public abstract DynamicAny.IDynAny CreateDynAnyFromTypeCode(CORBA.TypeCode type);
		[IdlName("create_dyn_any_without_truncation")]
		[ThrowsIdlException(typeof(DynamicAny.DynAnyFactory.InconsistentTypeCode))]
		[ThrowsIdlException(typeof(DynamicAny.MustTruncate))]
		public abstract DynamicAny.IDynAny CreateDynAnyWithoutTruncation(CORBA.Any value);
		[IdlName("create_multiple_dyn_anys")]
		[ThrowsIdlException(typeof(DynamicAny.DynAnyFactory.InconsistentTypeCode))]
		[ThrowsIdlException(typeof(DynamicAny.MustTruncate))]
		public abstract DynamicAny.IDynAny[] CreateMultipleDynAnys(CORBA.Any[] values, bool allowTruncate);
		[IdlName("create_multiple_anys")]
		public abstract CORBA.Any[] CreateMultipleAnys(DynamicAny.IDynAny[] values);
	}
}

