/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:29
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;

namespace CSI
{
	[RepositoryID("IDL:CSI/EstablishContext:1.0")]
	[Helper(typeof(EstablishContextHelper))]
	public partial class EstablishContext: CORBA.IIDLEntity, IEquatable<CSI.EstablishContext>
	{
		[IdlName("EstablishContext")]
		public ulong ClientContextId { get; set; }
		[IdlName("EstablishContext")]
		public CSI.AuthorizationElement[] AuthorizationToken { get; set; }
		[IdlName("EstablishContext")]
		public CSI.IdentityToken IdentityToken { get; set; }
		[IdlName("EstablishContext")]
		public byte[] ClientAuthenticationToken { get; set; }

		public EstablishContext()
		{
		}

		public EstablishContext(EstablishContext other)
		{
			ClientContextId = other.ClientContextId;
			AuthorizationToken = other.AuthorizationToken;
			IdentityToken = other.IdentityToken;
			ClientAuthenticationToken = other.ClientAuthenticationToken;
		}

		public EstablishContext(ulong clientContextId, CSI.AuthorizationElement[] authorizationToken, CSI.IdentityToken identityToken, byte[] clientAuthenticationToken)
		{
			this.ClientContextId = clientContextId;
			this.AuthorizationToken = authorizationToken;
			this.IdentityToken = identityToken;
			this.ClientAuthenticationToken = clientAuthenticationToken;
		}

		public bool Equals(CSI.EstablishContext? other)
		{
			if (other == null) return false;
			if (!ClientContextId.Equals(other.ClientContextId)) return false;
			if (!AuthorizationToken.SequenceEqual(other.AuthorizationToken)) return false;
			if (!IdentityToken.Equals(other.IdentityToken)) return false;
			if (!ClientAuthenticationToken.SequenceEqual(other.ClientAuthenticationToken)) return false;
			return true;
		}
	}

}
