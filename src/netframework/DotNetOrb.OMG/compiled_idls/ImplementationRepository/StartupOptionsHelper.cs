/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:38
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace ImplementationRepository
{
	public static class StartupOptionsHelper
	{
		private static volatile CORBA.TypeCode type;

		public static CORBA.TypeCode Type()
		{
			if (type == null)
			{
				lock (typeof(StartupOptionsHelper))
				{
					if (type == null)
					{
						type = CORBA.ORB.Init().CreateStructTc(ImplementationRepository.StartupOptionsHelper.Id(), "StartupOptions", new CORBA.StructMember[] {new CORBA.StructMember("command_line", CORBA.ORB.Init().CreateStringTc(0), null), new CORBA.StructMember("environment", CORBA.ORB.Init().CreateSequenceTc(0, ImplementationRepository.EnvironmentVariableHelper.Type()), null), new CORBA.StructMember("working_directory", CORBA.ORB.Init().CreateStringTc(0), null), new CORBA.StructMember("activation", ImplementationRepository.ActivationModeHelper.Type(), null), new CORBA.StructMember("activator", CORBA.ORB.Init().CreateStringTc(0), null), new CORBA.StructMember("start_limit", CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 3), null), });
					}
				}
			}
			return type;
		}

		public static void Insert(CORBA.Any any, ImplementationRepository.StartupOptions s)
		{
			any.Type = Type();
			Write(any.CreateOutputStream(), s);
		}

		public static ImplementationRepository.StartupOptions Extract(CORBA.Any any)
		{
			var inputStream = any.CreateInputStream();
			try
			{
				return Read(inputStream);
			}
			finally
			{
				inputStream.Close();
			}
		}

		public static string Id()
		{
			return "IDL:ImplementationRepository/StartupOptions:1.0";
		}

		public static ImplementationRepository.StartupOptions Read(CORBA.IInputStream inputStream)
		{
			var result = new ImplementationRepository.StartupOptions();
			result.CommandLine = inputStream.ReadString();
			{
				var _capacity0 = inputStream.ReadLong();
				if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
				{
					throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
				}
				result.Environment = new ImplementationRepository.EnvironmentVariable[_capacity0];
				for (int i0 = 0; i0 < _capacity0; i0++)
				{
					ImplementationRepository.EnvironmentVariable _item0;
					_item0 = ImplementationRepository.EnvironmentVariableHelper.Read(inputStream);
					result.Environment[i0] = _item0;
				}
			}
			result.WorkingDirectory = inputStream.ReadString();
			result.Activation = ImplementationRepository.ActivationModeHelper.Read(inputStream);
			result.Activator = inputStream.ReadString();
			result.StartLimit = inputStream.ReadLong();
			return result;
		}

		public static void Write(CORBA.IOutputStream outputStream, ImplementationRepository.StartupOptions s)
		{
			outputStream.WriteString(s.CommandLine);
			{
				outputStream.WriteLong(s.Environment.Length);
				for (int i0 = 0; i0 < s.Environment.Length; i0++)
				{
					ImplementationRepository.EnvironmentVariableHelper.Write(outputStream, s.Environment[i0]);
				}
			}
			outputStream.WriteString(s.WorkingDirectory);
			ImplementationRepository.ActivationModeHelper.Write(outputStream, s.Activation);
			outputStream.WriteString(s.Activator);
			outputStream.WriteLong(s.StartLimit);
		}

	}
}
