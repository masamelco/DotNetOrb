/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:38
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace ImplementationRepository
{
	public abstract partial class AdministrationExt : CORBA.Object, ImplementationRepository.IAdministrationExt
	{
		public static class StringSeqHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(StringSeqHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateAliasTc(ImplementationRepository.AdministrationExt.StringSeqHelper.Id(), "StringSeq", CORBA.ORB.Init().CreateSequenceTc(0, CORBA.ORB.Init().CreateStringTc(0)));
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, string[] value)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), value);
			}

			public static string[] Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:ImplementationRepository/AdministrationExt/StringSeq:1.0";
			}

			public static string[] Read(CORBA.IInputStream inputStream)
			{
				string[] result;
				{
					var _capacity0 = inputStream.ReadLong();
					if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
					{
						throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
					}
					result = new string[_capacity0];
					for (int i0 = 0; i0 < _capacity0; i0++)
					{
						string _item0;
						_item0 = inputStream.ReadString();
						result[i0] = _item0;
					}
				}
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, string[] value)
			{
				{
					outputStream.WriteLong(value.Length);
					for (int i0 = 0; i0 < value.Length; i0++)
					{
						outputStream.WriteString(value[i0]);
					}
				}
			}

		}
		[IdlName("activate_server")]
		[ThrowsIdlException(typeof(ImplementationRepository.NotFound))]
		[ThrowsIdlException(typeof(ImplementationRepository.CannotActivate))]
		public abstract void ActivateServer([WideChar(false)] string server);
		[IdlName("add_or_update_server")]
		[ThrowsIdlException(typeof(ImplementationRepository.NotFound))]
		public abstract void AddOrUpdateServer([WideChar(false)] string server, ImplementationRepository.StartupOptions options);
		[IdlName("remove_server")]
		[ThrowsIdlException(typeof(ImplementationRepository.NotFound))]
		public abstract void RemoveServer([WideChar(false)] string server);
		[IdlName("shutdown_server")]
		[ThrowsIdlException(typeof(ImplementationRepository.NotFound))]
		public abstract void ShutdownServer([WideChar(false)] string server);
		[IdlName("server_is_running")]
		[ThrowsIdlException(typeof(ImplementationRepository.NotFound))]
		public abstract void ServerIsRunning([WideChar(false)] string server, [WideChar(false)] string partialIor, ImplementationRepository.IServerObject serverObject);
		[IdlName("server_is_shutting_down")]
		[ThrowsIdlException(typeof(ImplementationRepository.NotFound))]
		public abstract void ServerIsShuttingDown([WideChar(false)] string server);
		[IdlName("find")]
		public abstract void Find([WideChar(false)] string server, out ImplementationRepository.ServerInformation info);
		[IdlName("list")]
		public abstract void List(uint howMany, bool determineActiveStatus, out ImplementationRepository.ServerInformation[] serverList, out ImplementationRepository.IServerInformationIterator serverIterator);
		[IdlName("shutdown")]
		public abstract void Shutdown(bool activators, bool servers);
		[IdlName("link_servers")]
		[ThrowsIdlException(typeof(ImplementationRepository.NotFound))]
		[ThrowsIdlException(typeof(ImplementationRepository.CannotComplete))]
		public abstract void LinkServers([WideChar(false)] string server, string[] peers);
		[IdlName("kill_server")]
		[ThrowsIdlException(typeof(ImplementationRepository.NotFound))]
		[ThrowsIdlException(typeof(ImplementationRepository.CannotComplete))]
		public abstract void KillServer([WideChar(false)] string server, short signum);
		[IdlName("force_remove_server")]
		[ThrowsIdlException(typeof(ImplementationRepository.NotFound))]
		[ThrowsIdlException(typeof(ImplementationRepository.CannotComplete))]
		public abstract void ForceRemoveServer([WideChar(false)] string server, short signum);
	}
}

