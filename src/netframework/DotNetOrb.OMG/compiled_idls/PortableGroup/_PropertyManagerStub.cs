/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:30
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace PortableGroup
{
	public class _PropertyManagerStub: CORBA.Object, IPropertyManager
	{
		private new string[] _ids = {"IDL:omg.org/PortableGroup/PropertyManager:1.0"};

		public override string[] _Ids()
		{
			return _ids;
		}

		public static Type _opsType = typeof(IPropertyManagerOperations);

		[IdlName("set_default_properties")]
		[ThrowsIdlException(typeof(PortableGroup.InvalidProperty))]
		[ThrowsIdlException(typeof(PortableGroup.UnsupportedProperty))]
		public void SetDefaultProperties(PortableGroup.Property[] props)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("set_default_properties", true);
					{
						outputStream.WriteLong(props.Length);
						for (int i0 = 0; i0 < props.Length; i0++)
						{
							PortableGroup.PropertyHelper.Write(outputStream, props[i0]);
						}
					}
					inputStream = _Invoke(outputStream);
					return;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/PortableGroup/InvalidProperty:1.0":
								throw PortableGroup.InvalidPropertyHelper.Read(aex.InputStream);
							case "IDL:omg.org/PortableGroup/UnsupportedProperty:1.0":
								throw PortableGroup.UnsupportedPropertyHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("get_default_properties")]
		public PortableGroup.Property[] GetDefaultProperties()
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("get_default_properties", true);
					inputStream = _Invoke(outputStream);
					PortableGroup.Property[] _result;
					{
						var _capacity0 = inputStream.ReadLong();
						if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
						{
							throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
						}
						_result = new PortableGroup.Property[_capacity0];
						for (int i0 = 0; i0 < _capacity0; i0++)
						{
							PortableGroup.Property _item0;
							_item0 = PortableGroup.PropertyHelper.Read(inputStream);
							_result[i0] = _item0;
						}
					}
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("remove_default_properties")]
		[ThrowsIdlException(typeof(PortableGroup.InvalidProperty))]
		[ThrowsIdlException(typeof(PortableGroup.UnsupportedProperty))]
		public void RemoveDefaultProperties(PortableGroup.Property[] props)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("remove_default_properties", true);
					{
						outputStream.WriteLong(props.Length);
						for (int i0 = 0; i0 < props.Length; i0++)
						{
							PortableGroup.PropertyHelper.Write(outputStream, props[i0]);
						}
					}
					inputStream = _Invoke(outputStream);
					return;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/PortableGroup/InvalidProperty:1.0":
								throw PortableGroup.InvalidPropertyHelper.Read(aex.InputStream);
							case "IDL:omg.org/PortableGroup/UnsupportedProperty:1.0":
								throw PortableGroup.UnsupportedPropertyHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("set_type_properties")]
		[ThrowsIdlException(typeof(PortableGroup.InvalidProperty))]
		[ThrowsIdlException(typeof(PortableGroup.UnsupportedProperty))]
		public void SetTypeProperties([WideChar(false)] string typeId, PortableGroup.Property[] overrides)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("set_type_properties", true);
					outputStream.WriteString(typeId);
					{
						outputStream.WriteLong(overrides.Length);
						for (int i0 = 0; i0 < overrides.Length; i0++)
						{
							PortableGroup.PropertyHelper.Write(outputStream, overrides[i0]);
						}
					}
					inputStream = _Invoke(outputStream);
					return;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/PortableGroup/InvalidProperty:1.0":
								throw PortableGroup.InvalidPropertyHelper.Read(aex.InputStream);
							case "IDL:omg.org/PortableGroup/UnsupportedProperty:1.0":
								throw PortableGroup.UnsupportedPropertyHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("get_type_properties")]
		public PortableGroup.Property[] GetTypeProperties([WideChar(false)] string typeId)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("get_type_properties", true);
					outputStream.WriteString(typeId);
					inputStream = _Invoke(outputStream);
					PortableGroup.Property[] _result;
					{
						var _capacity0 = inputStream.ReadLong();
						if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
						{
							throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
						}
						_result = new PortableGroup.Property[_capacity0];
						for (int i0 = 0; i0 < _capacity0; i0++)
						{
							PortableGroup.Property _item0;
							_item0 = PortableGroup.PropertyHelper.Read(inputStream);
							_result[i0] = _item0;
						}
					}
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("remove_type_properties")]
		[ThrowsIdlException(typeof(PortableGroup.InvalidProperty))]
		[ThrowsIdlException(typeof(PortableGroup.UnsupportedProperty))]
		public void RemoveTypeProperties([WideChar(false)] string typeId, PortableGroup.Property[] props)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("remove_type_properties", true);
					outputStream.WriteString(typeId);
					{
						outputStream.WriteLong(props.Length);
						for (int i0 = 0; i0 < props.Length; i0++)
						{
							PortableGroup.PropertyHelper.Write(outputStream, props[i0]);
						}
					}
					inputStream = _Invoke(outputStream);
					return;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/PortableGroup/InvalidProperty:1.0":
								throw PortableGroup.InvalidPropertyHelper.Read(aex.InputStream);
							case "IDL:omg.org/PortableGroup/UnsupportedProperty:1.0":
								throw PortableGroup.UnsupportedPropertyHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("set_properties_dynamically")]
		[ThrowsIdlException(typeof(PortableGroup.ObjectGroupNotFound))]
		[ThrowsIdlException(typeof(PortableGroup.InvalidProperty))]
		[ThrowsIdlException(typeof(PortableGroup.UnsupportedProperty))]
		public void SetPropertiesDynamically(CORBA.IObject objectGroup, PortableGroup.Property[] overrides)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("set_properties_dynamically", true);
					outputStream.WriteObject(objectGroup);
					{
						outputStream.WriteLong(overrides.Length);
						for (int i0 = 0; i0 < overrides.Length; i0++)
						{
							PortableGroup.PropertyHelper.Write(outputStream, overrides[i0]);
						}
					}
					inputStream = _Invoke(outputStream);
					return;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0":
								throw PortableGroup.ObjectGroupNotFoundHelper.Read(aex.InputStream);
							case "IDL:omg.org/PortableGroup/InvalidProperty:1.0":
								throw PortableGroup.InvalidPropertyHelper.Read(aex.InputStream);
							case "IDL:omg.org/PortableGroup/UnsupportedProperty:1.0":
								throw PortableGroup.UnsupportedPropertyHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("get_properties")]
		[ThrowsIdlException(typeof(PortableGroup.ObjectGroupNotFound))]
		public PortableGroup.Property[] GetProperties(CORBA.IObject objectGroup)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("get_properties", true);
					outputStream.WriteObject(objectGroup);
					inputStream = _Invoke(outputStream);
					PortableGroup.Property[] _result;
					{
						var _capacity0 = inputStream.ReadLong();
						if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
						{
							throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
						}
						_result = new PortableGroup.Property[_capacity0];
						for (int i0 = 0; i0 < _capacity0; i0++)
						{
							PortableGroup.Property _item0;
							_item0 = PortableGroup.PropertyHelper.Read(inputStream);
							_result[i0] = _item0;
						}
					}
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/PortableGroup/ObjectGroupNotFound:1.0":
								throw PortableGroup.ObjectGroupNotFoundHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}

	}

}
