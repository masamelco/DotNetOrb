/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:30
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace PortableGroup
{

	public abstract class PropertyManagerPOA: PortableServer.Servant, CORBA.IInvokeHandler, IPropertyManagerOperations
	{
		static private Dictionary<string,int> _opsDict = new Dictionary<string,int>();
		static PropertyManagerPOA()
		{
			_opsDict.Add("set_default_properties", 0);
			_opsDict.Add("get_default_properties", 1);
			_opsDict.Add("remove_default_properties", 2);
			_opsDict.Add("set_type_properties", 3);
			_opsDict.Add("get_type_properties", 4);
			_opsDict.Add("remove_type_properties", 5);
			_opsDict.Add("set_properties_dynamically", 6);
			_opsDict.Add("get_properties", 7);
		}
		private string[] _ids = {"IDL:omg.org/PortableGroup/PropertyManager:1.0"};

		[IdlName("set_default_properties")]
		[ThrowsIdlException(typeof(PortableGroup.InvalidProperty))]
		[ThrowsIdlException(typeof(PortableGroup.UnsupportedProperty))]
		public abstract void SetDefaultProperties(PortableGroup.Property[] props);
		[IdlName("get_default_properties")]
		public abstract PortableGroup.Property[] GetDefaultProperties();
		[IdlName("remove_default_properties")]
		[ThrowsIdlException(typeof(PortableGroup.InvalidProperty))]
		[ThrowsIdlException(typeof(PortableGroup.UnsupportedProperty))]
		public abstract void RemoveDefaultProperties(PortableGroup.Property[] props);
		[IdlName("set_type_properties")]
		[ThrowsIdlException(typeof(PortableGroup.InvalidProperty))]
		[ThrowsIdlException(typeof(PortableGroup.UnsupportedProperty))]
		public abstract void SetTypeProperties([WideChar(false)] string typeId, PortableGroup.Property[] overrides);
		[IdlName("get_type_properties")]
		public abstract PortableGroup.Property[] GetTypeProperties([WideChar(false)] string typeId);
		[IdlName("remove_type_properties")]
		[ThrowsIdlException(typeof(PortableGroup.InvalidProperty))]
		[ThrowsIdlException(typeof(PortableGroup.UnsupportedProperty))]
		public abstract void RemoveTypeProperties([WideChar(false)] string typeId, PortableGroup.Property[] props);
		[IdlName("set_properties_dynamically")]
		[ThrowsIdlException(typeof(PortableGroup.ObjectGroupNotFound))]
		[ThrowsIdlException(typeof(PortableGroup.InvalidProperty))]
		[ThrowsIdlException(typeof(PortableGroup.UnsupportedProperty))]
		public abstract void SetPropertiesDynamically(CORBA.IObject objectGroup, PortableGroup.Property[] overrides);
		[IdlName("get_properties")]
		[ThrowsIdlException(typeof(PortableGroup.ObjectGroupNotFound))]
		public abstract PortableGroup.Property[] GetProperties(CORBA.IObject objectGroup);

		public override string[] _AllInterfaces(PortableServer.IPOA poa, byte[] objId)
		{
			return _ids;
		}

		public virtual PortableGroup.IPropertyManager _This()
		{
			return PortableGroup.PropertyManagerHelper.Narrow(_ThisObject());
		}

		public virtual PortableGroup.IPropertyManager _This(CORBA.ORB orb)
		{
			return PortableGroup.PropertyManagerHelper.Narrow(_ThisObject(orb));
		}

		public CORBA.IOutputStream _Invoke(string method, CORBA.IInputStream inputStream, CORBA.IResponseHandler handler)
		{
			CORBA.IOutputStream outputStream = null;
			int opIndex;
			if (_opsDict.TryGetValue(method, out opIndex))
			{
				switch (opIndex)
				{
					case 0:
					{
						try
						{
							PortableGroup.Property[] props;
							{
								var _capacity0 = inputStream.ReadLong();
								if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
								{
									throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
								}
								props = new PortableGroup.Property[_capacity0];
								for (int i0 = 0; i0 < _capacity0; i0++)
								{
									PortableGroup.Property _item0;
									_item0 = PortableGroup.PropertyHelper.Read(inputStream);
									props[i0] = _item0;
								}
							}
							outputStream = handler.CreateReply();
							SetDefaultProperties(props);
						}
						catch(PortableGroup.InvalidProperty ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.InvalidPropertyHelper.Write(outputStream, ex);
						}
						catch(PortableGroup.UnsupportedProperty ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.UnsupportedPropertyHelper.Write(outputStream, ex);
						}
					}
					break;
					case 1:
					{
							outputStream = handler.CreateReply();
							var _result = GetDefaultProperties();
							{
								outputStream.WriteLong(_result.Length);
								for (int i0 = 0; i0 < _result.Length; i0++)
								{
									PortableGroup.PropertyHelper.Write(outputStream, _result[i0]);
								}
							}
					}
					break;
					case 2:
					{
						try
						{
							PortableGroup.Property[] props;
							{
								var _capacity0 = inputStream.ReadLong();
								if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
								{
									throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
								}
								props = new PortableGroup.Property[_capacity0];
								for (int i0 = 0; i0 < _capacity0; i0++)
								{
									PortableGroup.Property _item0;
									_item0 = PortableGroup.PropertyHelper.Read(inputStream);
									props[i0] = _item0;
								}
							}
							outputStream = handler.CreateReply();
							RemoveDefaultProperties(props);
						}
						catch(PortableGroup.InvalidProperty ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.InvalidPropertyHelper.Write(outputStream, ex);
						}
						catch(PortableGroup.UnsupportedProperty ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.UnsupportedPropertyHelper.Write(outputStream, ex);
						}
					}
					break;
					case 3:
					{
						try
						{
							string typeId;
							typeId = inputStream.ReadString();
							PortableGroup.Property[] overrides;
							{
								var _capacity0 = inputStream.ReadLong();
								if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
								{
									throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
								}
								overrides = new PortableGroup.Property[_capacity0];
								for (int i0 = 0; i0 < _capacity0; i0++)
								{
									PortableGroup.Property _item0;
									_item0 = PortableGroup.PropertyHelper.Read(inputStream);
									overrides[i0] = _item0;
								}
							}
							outputStream = handler.CreateReply();
							SetTypeProperties(typeId,overrides);
						}
						catch(PortableGroup.InvalidProperty ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.InvalidPropertyHelper.Write(outputStream, ex);
						}
						catch(PortableGroup.UnsupportedProperty ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.UnsupportedPropertyHelper.Write(outputStream, ex);
						}
					}
					break;
					case 4:
					{
							string typeId;
							typeId = inputStream.ReadString();
							outputStream = handler.CreateReply();
							var _result = GetTypeProperties(typeId);
							{
								outputStream.WriteLong(_result.Length);
								for (int i0 = 0; i0 < _result.Length; i0++)
								{
									PortableGroup.PropertyHelper.Write(outputStream, _result[i0]);
								}
							}
					}
					break;
					case 5:
					{
						try
						{
							string typeId;
							typeId = inputStream.ReadString();
							PortableGroup.Property[] props;
							{
								var _capacity0 = inputStream.ReadLong();
								if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
								{
									throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
								}
								props = new PortableGroup.Property[_capacity0];
								for (int i0 = 0; i0 < _capacity0; i0++)
								{
									PortableGroup.Property _item0;
									_item0 = PortableGroup.PropertyHelper.Read(inputStream);
									props[i0] = _item0;
								}
							}
							outputStream = handler.CreateReply();
							RemoveTypeProperties(typeId,props);
						}
						catch(PortableGroup.InvalidProperty ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.InvalidPropertyHelper.Write(outputStream, ex);
						}
						catch(PortableGroup.UnsupportedProperty ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.UnsupportedPropertyHelper.Write(outputStream, ex);
						}
					}
					break;
					case 6:
					{
						try
						{
							CORBA.IObject objectGroup;
							objectGroup = inputStream.ReadObject();
							PortableGroup.Property[] overrides;
							{
								var _capacity0 = inputStream.ReadLong();
								if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
								{
									throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
								}
								overrides = new PortableGroup.Property[_capacity0];
								for (int i0 = 0; i0 < _capacity0; i0++)
								{
									PortableGroup.Property _item0;
									_item0 = PortableGroup.PropertyHelper.Read(inputStream);
									overrides[i0] = _item0;
								}
							}
							outputStream = handler.CreateReply();
							SetPropertiesDynamically(objectGroup,overrides);
						}
						catch(PortableGroup.ObjectGroupNotFound ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.ObjectGroupNotFoundHelper.Write(outputStream, ex);
						}
						catch(PortableGroup.InvalidProperty ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.InvalidPropertyHelper.Write(outputStream, ex);
						}
						catch(PortableGroup.UnsupportedProperty ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.UnsupportedPropertyHelper.Write(outputStream, ex);
						}
					}
					break;
					case 7:
					{
						try
						{
							CORBA.IObject objectGroup;
							objectGroup = inputStream.ReadObject();
							outputStream = handler.CreateReply();
							var _result = GetProperties(objectGroup);
							{
								outputStream.WriteLong(_result.Length);
								for (int i0 = 0; i0 < _result.Length; i0++)
								{
									PortableGroup.PropertyHelper.Write(outputStream, _result[i0]);
								}
							}
						}
						catch(PortableGroup.ObjectGroupNotFound ex)
						{
							outputStream = handler.CreateExceptionReply();
							PortableGroup.ObjectGroupNotFoundHelper.Write(outputStream, ex);
						}
					}
					break;
				}
				return outputStream;
			}
			else
			{
				throw new CORBA.BadOperation(method + " not found");
			}
		}
	}
}
