/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:30
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace PortableGroup
{
	public class _GenericFactoryStub: CORBA.Object, IGenericFactory
	{
		private new string[] _ids = {"IDL:omg.org/PortableGroup/GenericFactory:1.0"};

		public override string[] _Ids()
		{
			return _ids;
		}

		public static Type _opsType = typeof(IGenericFactoryOperations);

		[IdlName("create_object")]
		[ThrowsIdlException(typeof(PortableGroup.NoFactory))]
		[ThrowsIdlException(typeof(PortableGroup.ObjectNotCreated))]
		[ThrowsIdlException(typeof(PortableGroup.InvalidCriteria))]
		[ThrowsIdlException(typeof(PortableGroup.InvalidProperty))]
		[ThrowsIdlException(typeof(PortableGroup.CannotMeetCriteria))]
		public CORBA.IObject CreateObject([WideChar(false)] string typeId, PortableGroup.Property[] theCriteria, out CORBA.Any factoryCreationId)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("create_object", true);
					outputStream.WriteString(typeId);
					{
						outputStream.WriteLong(theCriteria.Length);
						for (int i0 = 0; i0 < theCriteria.Length; i0++)
						{
							PortableGroup.PropertyHelper.Write(outputStream, theCriteria[i0]);
						}
					}
					inputStream = _Invoke(outputStream);
					CORBA.IObject _result;
					_result = inputStream.ReadObject();
					factoryCreationId = inputStream.ReadAny();
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/PortableGroup/NoFactory:1.0":
								throw PortableGroup.NoFactoryHelper.Read(aex.InputStream);
							case "IDL:omg.org/PortableGroup/ObjectNotCreated:1.0":
								throw PortableGroup.ObjectNotCreatedHelper.Read(aex.InputStream);
							case "IDL:omg.org/PortableGroup/InvalidCriteria:1.0":
								throw PortableGroup.InvalidCriteriaHelper.Read(aex.InputStream);
							case "IDL:omg.org/PortableGroup/InvalidProperty:1.0":
								throw PortableGroup.InvalidPropertyHelper.Read(aex.InputStream);
							case "IDL:omg.org/PortableGroup/CannotMeetCriteria:1.0":
								throw PortableGroup.CannotMeetCriteriaHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("delete_object")]
		[ThrowsIdlException(typeof(PortableGroup.ObjectNotFound))]
		public void DeleteObject(CORBA.Any factoryCreationId)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("delete_object", true);
					outputStream.WriteAny(factoryCreationId);
					inputStream = _Invoke(outputStream);
					return;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							case "IDL:omg.org/PortableGroup/ObjectNotFound:1.0":
								throw PortableGroup.ObjectNotFoundHelper.Read(aex.InputStream);
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}

	}

}
