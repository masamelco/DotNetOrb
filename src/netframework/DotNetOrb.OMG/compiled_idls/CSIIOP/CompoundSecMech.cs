/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:29
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;

namespace CSIIOP
{
	[RepositoryID("IDL:CSIIOP/CompoundSecMech:1.0")]
	[Helper(typeof(CompoundSecMechHelper))]
	public partial class CompoundSecMech: CORBA.IIDLEntity, IEquatable<CSIIOP.CompoundSecMech>
	{
		[IdlName("CompoundSecMech")]
		public ushort TargetRequires { get; set; }
		[IdlName("CompoundSecMech")]
		public IOP.TaggedComponent TransportMech { get; set; }
		[IdlName("CompoundSecMech")]
		public CSIIOP.AsContextSec AsContextMech { get; set; }
		[IdlName("CompoundSecMech")]
		public CSIIOP.SasContextSec SasContextMech { get; set; }

		public CompoundSecMech()
		{
		}

		public CompoundSecMech(CompoundSecMech other)
		{
			TargetRequires = other.TargetRequires;
			TransportMech = other.TransportMech;
			AsContextMech = other.AsContextMech;
			SasContextMech = other.SasContextMech;
		}

		public CompoundSecMech(ushort targetRequires, IOP.TaggedComponent transportMech, CSIIOP.AsContextSec asContextMech, CSIIOP.SasContextSec sasContextMech)
		{
			this.TargetRequires = targetRequires;
			this.TransportMech = transportMech;
			this.AsContextMech = asContextMech;
			this.SasContextMech = sasContextMech;
		}

		public bool Equals(CSIIOP.CompoundSecMech? other)
		{
			if (other == null) return false;
			if (!TargetRequires.Equals(other.TargetRequires)) return false;
			if (!TransportMech.Equals(other.TransportMech)) return false;
			if (!AsContextMech.Equals(other.AsContextMech)) return false;
			if (!SasContextMech.Equals(other.SasContextMech)) return false;
			return true;
		}
	}

}
