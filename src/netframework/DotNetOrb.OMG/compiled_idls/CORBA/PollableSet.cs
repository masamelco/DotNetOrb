/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:26
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace CORBA
{
	public abstract partial class PollableSet : CORBA.Object, CORBA.IPollableSet
	{
		[IdlName("NoPossiblePollable")]
		[RepositoryID("IDL:CORBA/PollableSet/NoPossiblePollable:1.0")]
		[Helper(typeof(NoPossiblePollableHelper))]
		public partial class NoPossiblePollable: CORBA.UserException, CORBA.IIDLEntity, IEquatable<CORBA.PollableSet.NoPossiblePollable>
		{
			public NoPossiblePollable()
			{
			}

			public NoPossiblePollable(string _msg): base(_msg)
			{
			}

			public NoPossiblePollable(NoPossiblePollable other)
			{
			}

			public bool Equals(CORBA.PollableSet.NoPossiblePollable? other)
			{
				if (other == null) return false;
				return true;
			}
		}

		public static class NoPossiblePollableHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(NoPossiblePollableHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(CORBA.PollableSet.NoPossiblePollableHelper.Id(), "NoPossiblePollable", new CORBA.StructMember[] {});
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, CORBA.PollableSet.NoPossiblePollable e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static CORBA.PollableSet.NoPossiblePollable Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:CORBA/PollableSet/NoPossiblePollable:1.0";
			}

			public static CORBA.PollableSet.NoPossiblePollable Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new CORBA.PollableSet.NoPossiblePollable();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, CORBA.PollableSet.NoPossiblePollable e)
			{
				outputStream.WriteString(Id());
			}

		}
		[IdlName("UnknownPollable")]
		[RepositoryID("IDL:CORBA/PollableSet/UnknownPollable:1.0")]
		[Helper(typeof(UnknownPollableHelper))]
		public partial class UnknownPollable: CORBA.UserException, CORBA.IIDLEntity, IEquatable<CORBA.PollableSet.UnknownPollable>
		{
			public UnknownPollable()
			{
			}

			public UnknownPollable(string _msg): base(_msg)
			{
			}

			public UnknownPollable(UnknownPollable other)
			{
			}

			public bool Equals(CORBA.PollableSet.UnknownPollable? other)
			{
				if (other == null) return false;
				return true;
			}
		}

		public static class UnknownPollableHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(UnknownPollableHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(CORBA.PollableSet.UnknownPollableHelper.Id(), "UnknownPollable", new CORBA.StructMember[] {});
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, CORBA.PollableSet.UnknownPollable e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static CORBA.PollableSet.UnknownPollable Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:CORBA/PollableSet/UnknownPollable:1.0";
			}

			public static CORBA.PollableSet.UnknownPollable Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new CORBA.PollableSet.UnknownPollable();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, CORBA.PollableSet.UnknownPollable e)
			{
				outputStream.WriteString(Id());
			}

		}
		[IdlName("create_dii_pollable")]
		public abstract CORBA.IDIIPollable CreateDiiPollable();
		[IdlName("add_pollable")]
		public abstract void AddPollable(CORBA.IPollable potential);
		[IdlName("get_ready_pollable")]
		[ThrowsIdlException(typeof(CORBA.PollableSet.NoPossiblePollable))]
		public abstract CORBA.IPollable GetReadyPollable(uint timeout);
		[IdlName("remove")]
		[ThrowsIdlException(typeof(CORBA.PollableSet.UnknownPollable))]
		public abstract void Remove(CORBA.IPollable potential);
		[IdlName("number_left")]
		public abstract ushort NumberLeft();
	}
}

