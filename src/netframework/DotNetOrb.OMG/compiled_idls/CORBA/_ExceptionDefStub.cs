/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:27
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace CORBA
{
	public class _ExceptionDefStub: CORBA.Object, IExceptionDef
	{
		private new string[] _ids = {"IDL:CORBA/ExceptionDef:1.0","IDL:CORBA/Contained:1.0","IDL:CORBA/Container:1.0"};

		public override string[] _Ids()
		{
			return _ids;
		}

		public static Type _opsType = typeof(IExceptionDefOperations);

		public CORBA.DefinitionKind DefKind
		{
			get
			{
				while(true)
				{
					{
						IInputStream inputStream = null;
						IOutputStream outputStream = null;
						try
						{
							outputStream = _Request("_get_def_kind", true);
							inputStream = _Invoke(outputStream);
							CORBA.DefinitionKind _result;
							_result = CORBA.DefinitionKindHelper.Read(inputStream);
							return _result;
						}
						catch(RemarshalException)
						{
							continue;
						}
						catch(CORBA.ApplicationException aex)
						{
							try
							{
								switch (aex.Id)
								{
									default:
										throw new RuntimeException("Unexpected exception " + aex.Id);
								}						
							}
							finally
							{
								try
								{
									aex.InputStream.Close();
								}
								catch (Exception ex)
								{
									throw new RuntimeException("Unexpected exception " + ex.ToString());
								}
							}
						}
						finally
						{
							if (outputStream != null)
							{
								try
								{
									outputStream.Close();
								}
								catch (Exception e)
								{
									throw new RuntimeException("Unexpected exception " + e.ToString());
								}
							}
							if (inputStream != null)
							{
								this._ReleaseReply(inputStream);
							}
						}
					}
				}
			}
		}
		[WideChar(false)]
		public string Id
		{
			get
			{
				while(true)
				{
					{
						IInputStream inputStream = null;
						IOutputStream outputStream = null;
						try
						{
							outputStream = _Request("_get_id", true);
							inputStream = _Invoke(outputStream);
							string _result;
							_result = inputStream.ReadString();
							return _result;
						}
						catch(RemarshalException)
						{
							continue;
						}
						catch(CORBA.ApplicationException aex)
						{
							try
							{
								switch (aex.Id)
								{
									default:
										throw new RuntimeException("Unexpected exception " + aex.Id);
								}						
							}
							finally
							{
								try
								{
									aex.InputStream.Close();
								}
								catch (Exception ex)
								{
									throw new RuntimeException("Unexpected exception " + ex.ToString());
								}
							}
						}
						finally
						{
							if (outputStream != null)
							{
								try
								{
									outputStream.Close();
								}
								catch (Exception e)
								{
									throw new RuntimeException("Unexpected exception " + e.ToString());
								}
							}
							if (inputStream != null)
							{
								this._ReleaseReply(inputStream);
							}
						}
					}
				}
			}
			set
			{
				while(true)
				{
					{
						IInputStream inputStream = null;
						IOutputStream outputStream = null;
						try
						{
							outputStream = _Request("_set_id", true);
							outputStream.WriteString(value);
							inputStream = _Invoke(outputStream);
							return;
						}
						catch(RemarshalException)
						{
							continue;
						}
						catch(CORBA.ApplicationException aex)
						{
							try
							{
								switch (aex.Id)
								{
									default:
										throw new RuntimeException("Unexpected exception " + aex.Id);
								}						
							}
							finally
							{
								try
								{
									aex.InputStream.Close();
								}
								catch (Exception ex)
								{
									throw new RuntimeException("Unexpected exception " + ex.ToString());
								}
							}
						}
						finally
						{
							if (outputStream != null)
							{
								try
								{
									outputStream.Close();
								}
								catch (Exception e)
								{
									throw new RuntimeException("Unexpected exception " + e.ToString());
								}
							}
							this._ReleaseReply(inputStream);
						}
					}
				}
			}
		}
		[WideChar(false)]
		public string Name
		{
			get
			{
				while(true)
				{
					{
						IInputStream inputStream = null;
						IOutputStream outputStream = null;
						try
						{
							outputStream = _Request("_get_name", true);
							inputStream = _Invoke(outputStream);
							string _result;
							_result = inputStream.ReadString();
							return _result;
						}
						catch(RemarshalException)
						{
							continue;
						}
						catch(CORBA.ApplicationException aex)
						{
							try
							{
								switch (aex.Id)
								{
									default:
										throw new RuntimeException("Unexpected exception " + aex.Id);
								}						
							}
							finally
							{
								try
								{
									aex.InputStream.Close();
								}
								catch (Exception ex)
								{
									throw new RuntimeException("Unexpected exception " + ex.ToString());
								}
							}
						}
						finally
						{
							if (outputStream != null)
							{
								try
								{
									outputStream.Close();
								}
								catch (Exception e)
								{
									throw new RuntimeException("Unexpected exception " + e.ToString());
								}
							}
							if (inputStream != null)
							{
								this._ReleaseReply(inputStream);
							}
						}
					}
				}
			}
			set
			{
				while(true)
				{
					{
						IInputStream inputStream = null;
						IOutputStream outputStream = null;
						try
						{
							outputStream = _Request("_set_name", true);
							outputStream.WriteString(value);
							inputStream = _Invoke(outputStream);
							return;
						}
						catch(RemarshalException)
						{
							continue;
						}
						catch(CORBA.ApplicationException aex)
						{
							try
							{
								switch (aex.Id)
								{
									default:
										throw new RuntimeException("Unexpected exception " + aex.Id);
								}						
							}
							finally
							{
								try
								{
									aex.InputStream.Close();
								}
								catch (Exception ex)
								{
									throw new RuntimeException("Unexpected exception " + ex.ToString());
								}
							}
						}
						finally
						{
							if (outputStream != null)
							{
								try
								{
									outputStream.Close();
								}
								catch (Exception e)
								{
									throw new RuntimeException("Unexpected exception " + e.ToString());
								}
							}
							this._ReleaseReply(inputStream);
						}
					}
				}
			}
		}
		[WideChar(false)]
		public string Version
		{
			get
			{
				while(true)
				{
					{
						IInputStream inputStream = null;
						IOutputStream outputStream = null;
						try
						{
							outputStream = _Request("_get_version", true);
							inputStream = _Invoke(outputStream);
							string _result;
							_result = inputStream.ReadString();
							return _result;
						}
						catch(RemarshalException)
						{
							continue;
						}
						catch(CORBA.ApplicationException aex)
						{
							try
							{
								switch (aex.Id)
								{
									default:
										throw new RuntimeException("Unexpected exception " + aex.Id);
								}						
							}
							finally
							{
								try
								{
									aex.InputStream.Close();
								}
								catch (Exception ex)
								{
									throw new RuntimeException("Unexpected exception " + ex.ToString());
								}
							}
						}
						finally
						{
							if (outputStream != null)
							{
								try
								{
									outputStream.Close();
								}
								catch (Exception e)
								{
									throw new RuntimeException("Unexpected exception " + e.ToString());
								}
							}
							if (inputStream != null)
							{
								this._ReleaseReply(inputStream);
							}
						}
					}
				}
			}
			set
			{
				while(true)
				{
					{
						IInputStream inputStream = null;
						IOutputStream outputStream = null;
						try
						{
							outputStream = _Request("_set_version", true);
							outputStream.WriteString(value);
							inputStream = _Invoke(outputStream);
							return;
						}
						catch(RemarshalException)
						{
							continue;
						}
						catch(CORBA.ApplicationException aex)
						{
							try
							{
								switch (aex.Id)
								{
									default:
										throw new RuntimeException("Unexpected exception " + aex.Id);
								}						
							}
							finally
							{
								try
								{
									aex.InputStream.Close();
								}
								catch (Exception ex)
								{
									throw new RuntimeException("Unexpected exception " + ex.ToString());
								}
							}
						}
						finally
						{
							if (outputStream != null)
							{
								try
								{
									outputStream.Close();
								}
								catch (Exception e)
								{
									throw new RuntimeException("Unexpected exception " + e.ToString());
								}
							}
							this._ReleaseReply(inputStream);
						}
					}
				}
			}
		}
		public CORBA.IContainer DefinedIn
		{
			get
			{
				while(true)
				{
					{
						IInputStream inputStream = null;
						IOutputStream outputStream = null;
						try
						{
							outputStream = _Request("_get_defined_in", true);
							inputStream = _Invoke(outputStream);
							CORBA.IContainer _result;
							_result = CORBA.ContainerHelper.Read(inputStream);
							return _result;
						}
						catch(RemarshalException)
						{
							continue;
						}
						catch(CORBA.ApplicationException aex)
						{
							try
							{
								switch (aex.Id)
								{
									default:
										throw new RuntimeException("Unexpected exception " + aex.Id);
								}						
							}
							finally
							{
								try
								{
									aex.InputStream.Close();
								}
								catch (Exception ex)
								{
									throw new RuntimeException("Unexpected exception " + ex.ToString());
								}
							}
						}
						finally
						{
							if (outputStream != null)
							{
								try
								{
									outputStream.Close();
								}
								catch (Exception e)
								{
									throw new RuntimeException("Unexpected exception " + e.ToString());
								}
							}
							if (inputStream != null)
							{
								this._ReleaseReply(inputStream);
							}
						}
					}
				}
			}
		}
		[WideChar(false)]
		public string AbsoluteName
		{
			get
			{
				while(true)
				{
					{
						IInputStream inputStream = null;
						IOutputStream outputStream = null;
						try
						{
							outputStream = _Request("_get_absolute_name", true);
							inputStream = _Invoke(outputStream);
							string _result;
							_result = inputStream.ReadString();
							return _result;
						}
						catch(RemarshalException)
						{
							continue;
						}
						catch(CORBA.ApplicationException aex)
						{
							try
							{
								switch (aex.Id)
								{
									default:
										throw new RuntimeException("Unexpected exception " + aex.Id);
								}						
							}
							finally
							{
								try
								{
									aex.InputStream.Close();
								}
								catch (Exception ex)
								{
									throw new RuntimeException("Unexpected exception " + ex.ToString());
								}
							}
						}
						finally
						{
							if (outputStream != null)
							{
								try
								{
									outputStream.Close();
								}
								catch (Exception e)
								{
									throw new RuntimeException("Unexpected exception " + e.ToString());
								}
							}
							if (inputStream != null)
							{
								this._ReleaseReply(inputStream);
							}
						}
					}
				}
			}
		}
		public CORBA.IRepository ContainingRepository
		{
			get
			{
				while(true)
				{
					{
						IInputStream inputStream = null;
						IOutputStream outputStream = null;
						try
						{
							outputStream = _Request("_get_containing_repository", true);
							inputStream = _Invoke(outputStream);
							CORBA.IRepository _result;
							_result = CORBA.RepositoryHelper.Read(inputStream);
							return _result;
						}
						catch(RemarshalException)
						{
							continue;
						}
						catch(CORBA.ApplicationException aex)
						{
							try
							{
								switch (aex.Id)
								{
									default:
										throw new RuntimeException("Unexpected exception " + aex.Id);
								}						
							}
							finally
							{
								try
								{
									aex.InputStream.Close();
								}
								catch (Exception ex)
								{
									throw new RuntimeException("Unexpected exception " + ex.ToString());
								}
							}
						}
						finally
						{
							if (outputStream != null)
							{
								try
								{
									outputStream.Close();
								}
								catch (Exception e)
								{
									throw new RuntimeException("Unexpected exception " + e.ToString());
								}
							}
							if (inputStream != null)
							{
								this._ReleaseReply(inputStream);
							}
						}
					}
				}
			}
		}
		public CORBA.TypeCode Type
		{
			get
			{
				while(true)
				{
					{
						IInputStream inputStream = null;
						IOutputStream outputStream = null;
						try
						{
							outputStream = _Request("_get_type", true);
							inputStream = _Invoke(outputStream);
							CORBA.TypeCode _result;
							_result = inputStream.ReadTypeCode();
							return _result;
						}
						catch(RemarshalException)
						{
							continue;
						}
						catch(CORBA.ApplicationException aex)
						{
							try
							{
								switch (aex.Id)
								{
									default:
										throw new RuntimeException("Unexpected exception " + aex.Id);
								}						
							}
							finally
							{
								try
								{
									aex.InputStream.Close();
								}
								catch (Exception ex)
								{
									throw new RuntimeException("Unexpected exception " + ex.ToString());
								}
							}
						}
						finally
						{
							if (outputStream != null)
							{
								try
								{
									outputStream.Close();
								}
								catch (Exception e)
								{
									throw new RuntimeException("Unexpected exception " + e.ToString());
								}
							}
							if (inputStream != null)
							{
								this._ReleaseReply(inputStream);
							}
						}
					}
				}
			}
		}
		public CORBA.StructMember[] Members
		{
			get
			{
				while(true)
				{
					{
						IInputStream inputStream = null;
						IOutputStream outputStream = null;
						try
						{
							outputStream = _Request("_get_members", true);
							inputStream = _Invoke(outputStream);
							CORBA.StructMember[] _result;
							{
								var _capacity0 = inputStream.ReadLong();
								if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
								{
									throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
								}
								_result = new CORBA.StructMember[_capacity0];
								for (int i0 = 0; i0 < _capacity0; i0++)
								{
									CORBA.StructMember _item0;
									_item0 = CORBA.StructMemberHelper.Read(inputStream);
									_result[i0] = _item0;
								}
							}
							return _result;
						}
						catch(RemarshalException)
						{
							continue;
						}
						catch(CORBA.ApplicationException aex)
						{
							try
							{
								switch (aex.Id)
								{
									default:
										throw new RuntimeException("Unexpected exception " + aex.Id);
								}						
							}
							finally
							{
								try
								{
									aex.InputStream.Close();
								}
								catch (Exception ex)
								{
									throw new RuntimeException("Unexpected exception " + ex.ToString());
								}
							}
						}
						finally
						{
							if (outputStream != null)
							{
								try
								{
									outputStream.Close();
								}
								catch (Exception e)
								{
									throw new RuntimeException("Unexpected exception " + e.ToString());
								}
							}
							if (inputStream != null)
							{
								this._ReleaseReply(inputStream);
							}
						}
					}
				}
			}
			set
			{
				while(true)
				{
					{
						IInputStream inputStream = null;
						IOutputStream outputStream = null;
						try
						{
							outputStream = _Request("_set_members", true);
							{
								outputStream.WriteLong(value.Length);
								for (int i0 = 0; i0 < value.Length; i0++)
								{
									CORBA.StructMemberHelper.Write(outputStream, value[i0]);
								}
							}
							inputStream = _Invoke(outputStream);
							return;
						}
						catch(RemarshalException)
						{
							continue;
						}
						catch(CORBA.ApplicationException aex)
						{
							try
							{
								switch (aex.Id)
								{
									default:
										throw new RuntimeException("Unexpected exception " + aex.Id);
								}						
							}
							finally
							{
								try
								{
									aex.InputStream.Close();
								}
								catch (Exception ex)
								{
									throw new RuntimeException("Unexpected exception " + ex.ToString());
								}
							}
						}
						finally
						{
							if (outputStream != null)
							{
								try
								{
									outputStream.Close();
								}
								catch (Exception e)
								{
									throw new RuntimeException("Unexpected exception " + e.ToString());
								}
							}
							this._ReleaseReply(inputStream);
						}
					}
				}
			}
		}
		[IdlName("destroy")]
		public void Destroy()
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("destroy", true);
					inputStream = _Invoke(outputStream);
					return;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("describe")]
		public CORBA.Contained.Description Describe()
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("describe", true);
					inputStream = _Invoke(outputStream);
					CORBA.Contained.Description _result;
					_result = CORBA.Contained.DescriptionHelper.Read(inputStream);
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("move")]
		public void Move(CORBA.IContainer newContainer, [WideChar(false)] string newName, [WideChar(false)] string newVersion)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("move", true);
					CORBA.ContainerHelper.Write(outputStream, newContainer);
					outputStream.WriteString(newName);
					outputStream.WriteString(newVersion);
					inputStream = _Invoke(outputStream);
					return;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("lookup")]
		public CORBA.IContained Lookup([WideChar(false)] string searchName)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("lookup", true);
					outputStream.WriteString(searchName);
					inputStream = _Invoke(outputStream);
					CORBA.IContained _result;
					_result = CORBA.ContainedHelper.Read(inputStream);
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("contents")]
		public CORBA.IContained[] Contents(CORBA.DefinitionKind limitType, bool excludeInherited)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("contents", true);
					CORBA.DefinitionKindHelper.Write(outputStream, limitType);
					outputStream.WriteBoolean(excludeInherited);
					inputStream = _Invoke(outputStream);
					CORBA.IContained[] _result;
					{
						var _capacity0 = inputStream.ReadLong();
						if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
						{
							throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
						}
						_result = new CORBA.IContained[_capacity0];
						for (int i0 = 0; i0 < _capacity0; i0++)
						{
							CORBA.IContained _item0;
							_item0 = CORBA.ContainedHelper.Read(inputStream);
							_result[i0] = _item0;
						}
					}
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("lookup_name")]
		public CORBA.IContained[] LookupName([WideChar(false)] string searchName, int levelsToSearch, CORBA.DefinitionKind limitType, bool excludeInherited)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("lookup_name", true);
					outputStream.WriteString(searchName);
					outputStream.WriteLong(levelsToSearch);
					CORBA.DefinitionKindHelper.Write(outputStream, limitType);
					outputStream.WriteBoolean(excludeInherited);
					inputStream = _Invoke(outputStream);
					CORBA.IContained[] _result;
					{
						var _capacity0 = inputStream.ReadLong();
						if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
						{
							throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
						}
						_result = new CORBA.IContained[_capacity0];
						for (int i0 = 0; i0 < _capacity0; i0++)
						{
							CORBA.IContained _item0;
							_item0 = CORBA.ContainedHelper.Read(inputStream);
							_result[i0] = _item0;
						}
					}
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("describe_contents")]
		public CORBA.Container.Description[] DescribeContents(CORBA.DefinitionKind limitType, bool excludeInherited, int maxReturnedObjs)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("describe_contents", true);
					CORBA.DefinitionKindHelper.Write(outputStream, limitType);
					outputStream.WriteBoolean(excludeInherited);
					outputStream.WriteLong(maxReturnedObjs);
					inputStream = _Invoke(outputStream);
					CORBA.Container.Description[] _result;
					{
						var _capacity0 = inputStream.ReadLong();
						if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
						{
							throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
						}
						_result = new CORBA.Container.Description[_capacity0];
						for (int i0 = 0; i0 < _capacity0; i0++)
						{
							CORBA.Container.Description _item0;
							_item0 = CORBA.Container.DescriptionHelper.Read(inputStream);
							_result[i0] = _item0;
						}
					}
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("create_module")]
		public CORBA.IModuleDef CreateModule([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("create_module", true);
					outputStream.WriteString(id);
					outputStream.WriteString(name);
					outputStream.WriteString(version);
					inputStream = _Invoke(outputStream);
					CORBA.IModuleDef _result;
					_result = CORBA.ModuleDefHelper.Read(inputStream);
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("create_constant")]
		public CORBA.IConstantDef CreateConstant([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IIDLType type, CORBA.Any value)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("create_constant", true);
					outputStream.WriteString(id);
					outputStream.WriteString(name);
					outputStream.WriteString(version);
					CORBA.IDLTypeHelper.Write(outputStream, type);
					outputStream.WriteAny(value);
					inputStream = _Invoke(outputStream);
					CORBA.IConstantDef _result;
					_result = CORBA.ConstantDefHelper.Read(inputStream);
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("create_struct")]
		public CORBA.IStructDef CreateStruct([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.StructMember[] members)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("create_struct", true);
					outputStream.WriteString(id);
					outputStream.WriteString(name);
					outputStream.WriteString(version);
					{
						outputStream.WriteLong(members.Length);
						for (int i0 = 0; i0 < members.Length; i0++)
						{
							CORBA.StructMemberHelper.Write(outputStream, members[i0]);
						}
					}
					inputStream = _Invoke(outputStream);
					CORBA.IStructDef _result;
					_result = CORBA.StructDefHelper.Read(inputStream);
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("create_union")]
		public CORBA.IUnionDef CreateUnion([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IIDLType discriminatorType, CORBA.UnionMember[] members)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("create_union", true);
					outputStream.WriteString(id);
					outputStream.WriteString(name);
					outputStream.WriteString(version);
					CORBA.IDLTypeHelper.Write(outputStream, discriminatorType);
					{
						outputStream.WriteLong(members.Length);
						for (int i0 = 0; i0 < members.Length; i0++)
						{
							CORBA.UnionMemberHelper.Write(outputStream, members[i0]);
						}
					}
					inputStream = _Invoke(outputStream);
					CORBA.IUnionDef _result;
					_result = CORBA.UnionDefHelper.Read(inputStream);
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("create_enum")]
		public CORBA.IEnumDef CreateEnum([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, string[] members)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("create_enum", true);
					outputStream.WriteString(id);
					outputStream.WriteString(name);
					outputStream.WriteString(version);
					{
						outputStream.WriteLong(members.Length);
						for (int i0 = 0; i0 < members.Length; i0++)
						{
							outputStream.WriteString(members[i0]);
						}
					}
					inputStream = _Invoke(outputStream);
					CORBA.IEnumDef _result;
					_result = CORBA.EnumDefHelper.Read(inputStream);
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("create_alias")]
		public CORBA.IAliasDef CreateAlias([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IIDLType originalType)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("create_alias", true);
					outputStream.WriteString(id);
					outputStream.WriteString(name);
					outputStream.WriteString(version);
					CORBA.IDLTypeHelper.Write(outputStream, originalType);
					inputStream = _Invoke(outputStream);
					CORBA.IAliasDef _result;
					_result = CORBA.AliasDefHelper.Read(inputStream);
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("create_interface")]
		public CORBA.IInterfaceDef CreateInterface([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IInterfaceDef[] baseInterfaces, bool isAbstract)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("create_interface", true);
					outputStream.WriteString(id);
					outputStream.WriteString(name);
					outputStream.WriteString(version);
					{
						outputStream.WriteLong(baseInterfaces.Length);
						for (int i0 = 0; i0 < baseInterfaces.Length; i0++)
						{
							CORBA.InterfaceDefHelper.Write(outputStream, baseInterfaces[i0]);
						}
					}
					outputStream.WriteBoolean(isAbstract);
					inputStream = _Invoke(outputStream);
					CORBA.IInterfaceDef _result;
					_result = CORBA.InterfaceDefHelper.Read(inputStream);
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("create_value")]
		public CORBA.IValueDef CreateValue([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, bool isCustom, bool isAbstract, CORBA.IValueDef baseValue, bool isTruncatable, CORBA.IValueDef[] abstractBaseValues, CORBA.IInterfaceDef[] supportedInterfaces, CORBA.Initializer[] initializers)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("create_value", true);
					outputStream.WriteString(id);
					outputStream.WriteString(name);
					outputStream.WriteString(version);
					outputStream.WriteBoolean(isCustom);
					outputStream.WriteBoolean(isAbstract);
					CORBA.ValueDefHelper.Write(outputStream, baseValue);
					outputStream.WriteBoolean(isTruncatable);
					{
						outputStream.WriteLong(abstractBaseValues.Length);
						for (int i0 = 0; i0 < abstractBaseValues.Length; i0++)
						{
							CORBA.ValueDefHelper.Write(outputStream, abstractBaseValues[i0]);
						}
					}
					{
						outputStream.WriteLong(supportedInterfaces.Length);
						for (int i0 = 0; i0 < supportedInterfaces.Length; i0++)
						{
							CORBA.InterfaceDefHelper.Write(outputStream, supportedInterfaces[i0]);
						}
					}
					{
						outputStream.WriteLong(initializers.Length);
						for (int i0 = 0; i0 < initializers.Length; i0++)
						{
							CORBA.InitializerHelper.Write(outputStream, initializers[i0]);
						}
					}
					inputStream = _Invoke(outputStream);
					CORBA.IValueDef _result;
					_result = CORBA.ValueDefHelper.Read(inputStream);
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("create_value_box")]
		public CORBA.IValueBoxDef CreateValueBox([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IIDLType originalTypeDef)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("create_value_box", true);
					outputStream.WriteString(id);
					outputStream.WriteString(name);
					outputStream.WriteString(version);
					CORBA.IDLTypeHelper.Write(outputStream, originalTypeDef);
					inputStream = _Invoke(outputStream);
					CORBA.IValueBoxDef _result;
					_result = CORBA.ValueBoxDefHelper.Read(inputStream);
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("create_exception")]
		public CORBA.IExceptionDef CreateException([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.StructMember[] members)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("create_exception", true);
					outputStream.WriteString(id);
					outputStream.WriteString(name);
					outputStream.WriteString(version);
					{
						outputStream.WriteLong(members.Length);
						for (int i0 = 0; i0 < members.Length; i0++)
						{
							CORBA.StructMemberHelper.Write(outputStream, members[i0]);
						}
					}
					inputStream = _Invoke(outputStream);
					CORBA.IExceptionDef _result;
					_result = CORBA.ExceptionDefHelper.Read(inputStream);
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("create_native")]
		public CORBA.INativeDef CreateNative([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("create_native", true);
					outputStream.WriteString(id);
					outputStream.WriteString(name);
					outputStream.WriteString(version);
					inputStream = _Invoke(outputStream);
					CORBA.INativeDef _result;
					_result = CORBA.NativeDefHelper.Read(inputStream);
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("create_abstract_interface")]
		public CORBA.IAbstractInterfaceDef CreateAbstractInterface([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IAbstractInterfaceDef[] baseInterfaces)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("create_abstract_interface", true);
					outputStream.WriteString(id);
					outputStream.WriteString(name);
					outputStream.WriteString(version);
					{
						outputStream.WriteLong(baseInterfaces.Length);
						for (int i0 = 0; i0 < baseInterfaces.Length; i0++)
						{
							CORBA.AbstractInterfaceDefHelper.Write(outputStream, baseInterfaces[i0]);
						}
					}
					inputStream = _Invoke(outputStream);
					CORBA.IAbstractInterfaceDef _result;
					_result = CORBA.AbstractInterfaceDefHelper.Read(inputStream);
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("create_local_interface")]
		public CORBA.ILocalInterfaceDef CreateLocalInterface([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IInterfaceDef[] baseInterfaces)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("create_local_interface", true);
					outputStream.WriteString(id);
					outputStream.WriteString(name);
					outputStream.WriteString(version);
					{
						outputStream.WriteLong(baseInterfaces.Length);
						for (int i0 = 0; i0 < baseInterfaces.Length; i0++)
						{
							CORBA.InterfaceDefHelper.Write(outputStream, baseInterfaces[i0]);
						}
					}
					inputStream = _Invoke(outputStream);
					CORBA.ILocalInterfaceDef _result;
					_result = CORBA.LocalInterfaceDefHelper.Read(inputStream);
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("create_ext_value")]
		public CORBA.IExtValueDef CreateExtValue([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, bool isCustom, bool isAbstract, CORBA.IValueDef baseValue, bool isTruncatable, CORBA.IValueDef[] abstractBaseValues, CORBA.IInterfaceDef[] supportedInterfaces, CORBA.ExtInitializer[] initializers)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("create_ext_value", true);
					outputStream.WriteString(id);
					outputStream.WriteString(name);
					outputStream.WriteString(version);
					outputStream.WriteBoolean(isCustom);
					outputStream.WriteBoolean(isAbstract);
					CORBA.ValueDefHelper.Write(outputStream, baseValue);
					outputStream.WriteBoolean(isTruncatable);
					{
						outputStream.WriteLong(abstractBaseValues.Length);
						for (int i0 = 0; i0 < abstractBaseValues.Length; i0++)
						{
							CORBA.ValueDefHelper.Write(outputStream, abstractBaseValues[i0]);
						}
					}
					{
						outputStream.WriteLong(supportedInterfaces.Length);
						for (int i0 = 0; i0 < supportedInterfaces.Length; i0++)
						{
							CORBA.InterfaceDefHelper.Write(outputStream, supportedInterfaces[i0]);
						}
					}
					{
						outputStream.WriteLong(initializers.Length);
						for (int i0 = 0; i0 < initializers.Length; i0++)
						{
							CORBA.ExtInitializerHelper.Write(outputStream, initializers[i0]);
						}
					}
					inputStream = _Invoke(outputStream);
					CORBA.IExtValueDef _result;
					_result = CORBA.ExtValueDefHelper.Read(inputStream);
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}

	}

}
