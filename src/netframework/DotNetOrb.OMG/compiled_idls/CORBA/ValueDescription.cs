/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:28
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;

namespace CORBA
{
	[RepositoryID("IDL:CORBA/ValueDescription:1.0")]
	[Helper(typeof(ValueDescriptionHelper))]
	public partial class ValueDescription: CORBA.IIDLEntity, IEquatable<CORBA.ValueDescription>
	{
		[IdlName("ValueDescription")]
		[WideChar(false)]
		public string Name { get; set; }
		[IdlName("ValueDescription")]
		[WideChar(false)]
		public string Id { get; set; }
		[IdlName("ValueDescription")]
		public bool IsAbstract { get; set; }
		[IdlName("ValueDescription")]
		public bool IsCustom { get; set; }
		[IdlName("ValueDescription")]
		[WideChar(false)]
		public string DefinedIn { get; set; }
		[IdlName("ValueDescription")]
		[WideChar(false)]
		public string Version { get; set; }
		[IdlName("ValueDescription")]
		public string[] SupportedInterfaces { get; set; }
		[IdlName("ValueDescription")]
		public string[] AbstractBaseValues { get; set; }
		[IdlName("ValueDescription")]
		public bool IsTruncatable { get; set; }
		[IdlName("ValueDescription")]
		[WideChar(false)]
		public string BaseValue { get; set; }

		public ValueDescription()
		{
		}

		public ValueDescription(ValueDescription other)
		{
			Name = other.Name;
			Id = other.Id;
			IsAbstract = other.IsAbstract;
			IsCustom = other.IsCustom;
			DefinedIn = other.DefinedIn;
			Version = other.Version;
			SupportedInterfaces = other.SupportedInterfaces;
			AbstractBaseValues = other.AbstractBaseValues;
			IsTruncatable = other.IsTruncatable;
			BaseValue = other.BaseValue;
		}

		public ValueDescription(string name, string id, bool isAbstract, bool isCustom, string definedIn, string version, string[] supportedInterfaces, string[] abstractBaseValues, bool isTruncatable, string baseValue)
		{
			this.Name = name;
			this.Id = id;
			this.IsAbstract = isAbstract;
			this.IsCustom = isCustom;
			this.DefinedIn = definedIn;
			this.Version = version;
			this.SupportedInterfaces = supportedInterfaces;
			this.AbstractBaseValues = abstractBaseValues;
			this.IsTruncatable = isTruncatable;
			this.BaseValue = baseValue;
		}

		public bool Equals(CORBA.ValueDescription? other)
		{
			if (other == null) return false;
			if (!Name.Equals(other.Name)) return false;
			if (!Id.Equals(other.Id)) return false;
			if (!IsAbstract.Equals(other.IsAbstract)) return false;
			if (!IsCustom.Equals(other.IsCustom)) return false;
			if (!DefinedIn.Equals(other.DefinedIn)) return false;
			if (!Version.Equals(other.Version)) return false;
			if (!SupportedInterfaces.SequenceEqual(other.SupportedInterfaces)) return false;
			if (!AbstractBaseValues.SequenceEqual(other.AbstractBaseValues)) return false;
			if (!IsTruncatable.Equals(other.IsTruncatable)) return false;
			if (!BaseValue.Equals(other.BaseValue)) return false;
			return true;
		}
	}

}
