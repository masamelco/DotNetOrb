/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:27
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace CORBA
{

	public abstract class IDLTypePOA: PortableServer.Servant, CORBA.IInvokeHandler, IIDLTypeOperations
	{
		static private Dictionary<string,int> _opsDict = new Dictionary<string,int>();
		static IDLTypePOA()
		{
			_opsDict.Add("_get_def_kind", 0);
			_opsDict.Add("destroy", 1);
			_opsDict.Add("_get_type", 2);
		}
		private string[] _ids = {"IDL:CORBA/IDLType:1.0","IDL:CORBA/IRObject:1.0"};

		[IdlName("def_kind")]
		public abstract CORBA.DefinitionKind DefKind 
		{
			get;
		}
		[IdlName("destroy")]
		public abstract void Destroy();
		[IdlName("type")]
		public abstract CORBA.TypeCode Type 
		{
			get;
		}

		public override string[] _AllInterfaces(PortableServer.IPOA poa, byte[] objId)
		{
			return _ids;
		}

		public virtual CORBA.IIDLType _This()
		{
			return CORBA.IDLTypeHelper.Narrow(_ThisObject());
		}

		public virtual CORBA.IIDLType _This(CORBA.ORB orb)
		{
			return CORBA.IDLTypeHelper.Narrow(_ThisObject(orb));
		}

		public CORBA.IOutputStream _Invoke(string method, CORBA.IInputStream inputStream, CORBA.IResponseHandler handler)
		{
			CORBA.IOutputStream outputStream = null;
			int opIndex;
			if (_opsDict.TryGetValue(method, out opIndex))
			{
				switch (opIndex)
				{
					case 0:
					{
							outputStream = handler.CreateReply();
							CORBA.DefinitionKindHelper.Write(outputStream, DefKind);
					}
					break;
					case 1:
					{
							outputStream = handler.CreateReply();
							Destroy();
					}
					break;
					case 2:
					{
							outputStream = handler.CreateReply();
							outputStream.WriteTypeCode(Type);
					}
					break;
				}
				return outputStream;
			}
			else
			{
				throw new CORBA.BadOperation(method + " not found");
			}
		}
	}
}
