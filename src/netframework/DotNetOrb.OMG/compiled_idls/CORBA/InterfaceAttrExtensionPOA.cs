/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:28
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace CORBA
{

	public abstract class InterfaceAttrExtensionPOA: PortableServer.Servant, CORBA.IInvokeHandler, IInterfaceAttrExtensionOperations
	{
		static private Dictionary<string,int> _opsDict = new Dictionary<string,int>();
		static InterfaceAttrExtensionPOA()
		{
			_opsDict.Add("describe_ext_interface", 0);
			_opsDict.Add("create_ext_attribute", 1);
		}
		private string[] _ids = {"IDL:CORBA/InterfaceAttrExtension:1.0"};

		[IdlName("describe_ext_interface")]
		public abstract CORBA.InterfaceAttrExtension.ExtFullInterfaceDescription DescribeExtInterface();
		[IdlName("create_ext_attribute")]
		public abstract CORBA.IExtAttributeDef CreateExtAttribute([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IIDLType type, CORBA.AttributeMode mode, CORBA.IExceptionDef[] getExceptions, CORBA.IExceptionDef[] setExceptions);

		public override string[] _AllInterfaces(PortableServer.IPOA poa, byte[] objId)
		{
			return _ids;
		}

		public virtual CORBA.IInterfaceAttrExtension _This()
		{
			return CORBA.InterfaceAttrExtensionHelper.Narrow(_ThisObject());
		}

		public virtual CORBA.IInterfaceAttrExtension _This(CORBA.ORB orb)
		{
			return CORBA.InterfaceAttrExtensionHelper.Narrow(_ThisObject(orb));
		}

		public CORBA.IOutputStream _Invoke(string method, CORBA.IInputStream inputStream, CORBA.IResponseHandler handler)
		{
			CORBA.IOutputStream outputStream = null;
			int opIndex;
			if (_opsDict.TryGetValue(method, out opIndex))
			{
				switch (opIndex)
				{
					case 0:
					{
							outputStream = handler.CreateReply();
							var _result = DescribeExtInterface();
							CORBA.InterfaceAttrExtension.ExtFullInterfaceDescriptionHelper.Write(outputStream, _result);
					}
					break;
					case 1:
					{
							string id;
							id = inputStream.ReadString();
							string name;
							name = inputStream.ReadString();
							string version;
							version = inputStream.ReadString();
							CORBA.IIDLType type;
							type = CORBA.IDLTypeHelper.Read(inputStream);
							CORBA.AttributeMode mode;
							mode = CORBA.AttributeModeHelper.Read(inputStream);
							CORBA.IExceptionDef[] getExceptions;
							{
								var _capacity0 = inputStream.ReadLong();
								if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
								{
									throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
								}
								getExceptions = new CORBA.IExceptionDef[_capacity0];
								for (int i0 = 0; i0 < _capacity0; i0++)
								{
									CORBA.IExceptionDef _item0;
									_item0 = CORBA.ExceptionDefHelper.Read(inputStream);
									getExceptions[i0] = _item0;
								}
							}
							CORBA.IExceptionDef[] setExceptions;
							{
								var _capacity0 = inputStream.ReadLong();
								if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
								{
									throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
								}
								setExceptions = new CORBA.IExceptionDef[_capacity0];
								for (int i0 = 0; i0 < _capacity0; i0++)
								{
									CORBA.IExceptionDef _item0;
									_item0 = CORBA.ExceptionDefHelper.Read(inputStream);
									setExceptions[i0] = _item0;
								}
							}
							outputStream = handler.CreateReply();
							var _result = CreateExtAttribute(id, name, version, type, mode, getExceptions, setExceptions);
							CORBA.ExtAttributeDefHelper.Write(outputStream, _result);
					}
					break;
				}
				return outputStream;
			}
			else
			{
				throw new CORBA.BadOperation(method + " not found");
			}
		}
	}
}
