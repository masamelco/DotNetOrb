/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:28
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace CORBA
{
	public abstract partial class InterfaceAttrExtension : CORBA.Object, CORBA.IInterfaceAttrExtension
	{
		[RepositoryID("IDL:CORBA/InterfaceAttrExtension/ExtFullInterfaceDescription:1.0")]
		[Helper(typeof(ExtFullInterfaceDescriptionHelper))]
		public partial class ExtFullInterfaceDescription: CORBA.IIDLEntity, IEquatable<CORBA.InterfaceAttrExtension.ExtFullInterfaceDescription>
		{
			[IdlName("ExtFullInterfaceDescription")]
			[WideChar(false)]
			public string Name { get; set; }
			[IdlName("ExtFullInterfaceDescription")]
			[WideChar(false)]
			public string Id { get; set; }
			[IdlName("ExtFullInterfaceDescription")]
			[WideChar(false)]
			public string DefinedIn { get; set; }
			[IdlName("ExtFullInterfaceDescription")]
			[WideChar(false)]
			public string Version { get; set; }
			[IdlName("ExtFullInterfaceDescription")]
			public CORBA.OperationDescription[] Operations { get; set; }
			[IdlName("ExtFullInterfaceDescription")]
			public CORBA.ExtAttributeDescription[] Attributes { get; set; }
			[IdlName("ExtFullInterfaceDescription")]
			public string[] BaseInterfaces { get; set; }
			[IdlName("ExtFullInterfaceDescription")]
			public CORBA.TypeCode Type { get; set; }

			public ExtFullInterfaceDescription()
			{
			}

			public ExtFullInterfaceDescription(ExtFullInterfaceDescription other)
			{
				Name = other.Name;
				Id = other.Id;
				DefinedIn = other.DefinedIn;
				Version = other.Version;
				Operations = other.Operations;
				Attributes = other.Attributes;
				BaseInterfaces = other.BaseInterfaces;
				Type = other.Type;
			}

			public ExtFullInterfaceDescription(string name, string id, string definedIn, string version, CORBA.OperationDescription[] operations, CORBA.ExtAttributeDescription[] attributes, string[] baseInterfaces, CORBA.TypeCode type)
			{
				this.Name = name;
				this.Id = id;
				this.DefinedIn = definedIn;
				this.Version = version;
				this.Operations = operations;
				this.Attributes = attributes;
				this.BaseInterfaces = baseInterfaces;
				this.Type = type;
			}

			public bool Equals(CORBA.InterfaceAttrExtension.ExtFullInterfaceDescription? other)
			{
				if (other == null) return false;
				if (!Name.Equals(other.Name)) return false;
				if (!Id.Equals(other.Id)) return false;
				if (!DefinedIn.Equals(other.DefinedIn)) return false;
				if (!Version.Equals(other.Version)) return false;
				if (!Operations.SequenceEqual(other.Operations)) return false;
				if (!Attributes.SequenceEqual(other.Attributes)) return false;
				if (!BaseInterfaces.SequenceEqual(other.BaseInterfaces)) return false;
				if (!Type.Equals(other.Type)) return false;
				return true;
			}
		}

		public static class ExtFullInterfaceDescriptionHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(ExtFullInterfaceDescriptionHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateStructTc(CORBA.InterfaceAttrExtension.ExtFullInterfaceDescriptionHelper.Id(), "ExtFullInterfaceDescription", new CORBA.StructMember[] {new CORBA.StructMember("name", CORBA.ORB.Init().CreateStringTc(0), null), new CORBA.StructMember("id", CORBA.ORB.Init().CreateStringTc(0), null), new CORBA.StructMember("defined_in", CORBA.ORB.Init().CreateStringTc(0), null), new CORBA.StructMember("version", CORBA.ORB.Init().CreateStringTc(0), null), new CORBA.StructMember("operations", CORBA.ORB.Init().CreateSequenceTc(0, CORBA.OperationDescriptionHelper.Type()), null), new CORBA.StructMember("attributes", CORBA.ORB.Init().CreateSequenceTc(0, CORBA.ExtAttributeDescriptionHelper.Type()), null), new CORBA.StructMember("base_interfaces", CORBA.ORB.Init().CreateSequenceTc(0, CORBA.ORB.Init().CreateStringTc(0)), null), new CORBA.StructMember("type", CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 12), null), });
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, CORBA.InterfaceAttrExtension.ExtFullInterfaceDescription s)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), s);
			}

			public static CORBA.InterfaceAttrExtension.ExtFullInterfaceDescription Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:CORBA/InterfaceAttrExtension/ExtFullInterfaceDescription:1.0";
			}

			public static CORBA.InterfaceAttrExtension.ExtFullInterfaceDescription Read(CORBA.IInputStream inputStream)
			{
				var result = new CORBA.InterfaceAttrExtension.ExtFullInterfaceDescription();
				result.Name = inputStream.ReadString();
				result.Id = inputStream.ReadString();
				result.DefinedIn = inputStream.ReadString();
				result.Version = inputStream.ReadString();
				{
					var _capacity0 = inputStream.ReadLong();
					if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
					{
						throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
					}
					result.Operations = new CORBA.OperationDescription[_capacity0];
					for (int i0 = 0; i0 < _capacity0; i0++)
					{
						CORBA.OperationDescription _item0;
						_item0 = CORBA.OperationDescriptionHelper.Read(inputStream);
						result.Operations[i0] = _item0;
					}
				}
				{
					var _capacity0 = inputStream.ReadLong();
					if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
					{
						throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
					}
					result.Attributes = new CORBA.ExtAttributeDescription[_capacity0];
					for (int i0 = 0; i0 < _capacity0; i0++)
					{
						CORBA.ExtAttributeDescription _item0;
						_item0 = CORBA.ExtAttributeDescriptionHelper.Read(inputStream);
						result.Attributes[i0] = _item0;
					}
				}
				{
					var _capacity0 = inputStream.ReadLong();
					if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
					{
						throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
					}
					result.BaseInterfaces = new string[_capacity0];
					for (int i0 = 0; i0 < _capacity0; i0++)
					{
						string _item0;
						_item0 = inputStream.ReadString();
						result.BaseInterfaces[i0] = _item0;
					}
				}
				result.Type = inputStream.ReadTypeCode();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, CORBA.InterfaceAttrExtension.ExtFullInterfaceDescription s)
			{
				outputStream.WriteString(s.Name);
				outputStream.WriteString(s.Id);
				outputStream.WriteString(s.DefinedIn);
				outputStream.WriteString(s.Version);
				{
					outputStream.WriteLong(s.Operations.Length);
					for (int i0 = 0; i0 < s.Operations.Length; i0++)
					{
						CORBA.OperationDescriptionHelper.Write(outputStream, s.Operations[i0]);
					}
				}
				{
					outputStream.WriteLong(s.Attributes.Length);
					for (int i0 = 0; i0 < s.Attributes.Length; i0++)
					{
						CORBA.ExtAttributeDescriptionHelper.Write(outputStream, s.Attributes[i0]);
					}
				}
				{
					outputStream.WriteLong(s.BaseInterfaces.Length);
					for (int i0 = 0; i0 < s.BaseInterfaces.Length; i0++)
					{
						outputStream.WriteString(s.BaseInterfaces[i0]);
					}
				}
				outputStream.WriteTypeCode(s.Type);
			}

		}
		[IdlName("describe_ext_interface")]
		public abstract CORBA.InterfaceAttrExtension.ExtFullInterfaceDescription DescribeExtInterface();
		[IdlName("create_ext_attribute")]
		public abstract CORBA.IExtAttributeDef CreateExtAttribute([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IIDLType type, CORBA.AttributeMode mode, CORBA.IExceptionDef[] getExceptions, CORBA.IExceptionDef[] setExceptions);
	}
}

