/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:28
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace CORBA
{
	public class _InterfaceAttrExtensionStub: CORBA.Object, IInterfaceAttrExtension
	{
		private new string[] _ids = {"IDL:CORBA/InterfaceAttrExtension:1.0"};

		public override string[] _Ids()
		{
			return _ids;
		}

		public static Type _opsType = typeof(IInterfaceAttrExtensionOperations);

		[IdlName("describe_ext_interface")]
		public CORBA.InterfaceAttrExtension.ExtFullInterfaceDescription DescribeExtInterface()
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("describe_ext_interface", true);
					inputStream = _Invoke(outputStream);
					CORBA.InterfaceAttrExtension.ExtFullInterfaceDescription _result;
					_result = CORBA.InterfaceAttrExtension.ExtFullInterfaceDescriptionHelper.Read(inputStream);
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}
		[IdlName("create_ext_attribute")]
		public CORBA.IExtAttributeDef CreateExtAttribute([WideChar(false)] string id, [WideChar(false)] string name, [WideChar(false)] string version, CORBA.IIDLType type, CORBA.AttributeMode mode, CORBA.IExceptionDef[] getExceptions, CORBA.IExceptionDef[] setExceptions)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("create_ext_attribute", true);
					outputStream.WriteString(id);
					outputStream.WriteString(name);
					outputStream.WriteString(version);
					CORBA.IDLTypeHelper.Write(outputStream, type);
					CORBA.AttributeModeHelper.Write(outputStream, mode);
					{
						outputStream.WriteLong(getExceptions.Length);
						for (int i0 = 0; i0 < getExceptions.Length; i0++)
						{
							CORBA.ExceptionDefHelper.Write(outputStream, getExceptions[i0]);
						}
					}
					{
						outputStream.WriteLong(setExceptions.Length);
						for (int i0 = 0; i0 < setExceptions.Length; i0++)
						{
							CORBA.ExceptionDefHelper.Write(outputStream, setExceptions[i0]);
						}
					}
					inputStream = _Invoke(outputStream);
					CORBA.IExtAttributeDef _result;
					_result = CORBA.ExtAttributeDefHelper.Read(inputStream);
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}

	}

}
