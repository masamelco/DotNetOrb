/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:28
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;

namespace CORBA
{
	[RepositoryID("IDL:CORBA/InterfaceDescription:1.0")]
	[Helper(typeof(InterfaceDescriptionHelper))]
	public partial class InterfaceDescription: CORBA.IIDLEntity, IEquatable<CORBA.InterfaceDescription>
	{
		[IdlName("InterfaceDescription")]
		[WideChar(false)]
		public string Name { get; set; }
		[IdlName("InterfaceDescription")]
		[WideChar(false)]
		public string Id { get; set; }
		[IdlName("InterfaceDescription")]
		[WideChar(false)]
		public string DefinedIn { get; set; }
		[IdlName("InterfaceDescription")]
		[WideChar(false)]
		public string Version { get; set; }
		[IdlName("InterfaceDescription")]
		public string[] BaseInterfaces { get; set; }
		[IdlName("InterfaceDescription")]
		public bool IsAbstract { get; set; }

		public InterfaceDescription()
		{
		}

		public InterfaceDescription(InterfaceDescription other)
		{
			Name = other.Name;
			Id = other.Id;
			DefinedIn = other.DefinedIn;
			Version = other.Version;
			BaseInterfaces = other.BaseInterfaces;
			IsAbstract = other.IsAbstract;
		}

		public InterfaceDescription(string name, string id, string definedIn, string version, string[] baseInterfaces, bool isAbstract)
		{
			this.Name = name;
			this.Id = id;
			this.DefinedIn = definedIn;
			this.Version = version;
			this.BaseInterfaces = baseInterfaces;
			this.IsAbstract = isAbstract;
		}

		public bool Equals(CORBA.InterfaceDescription? other)
		{
			if (other == null) return false;
			if (!Name.Equals(other.Name)) return false;
			if (!Id.Equals(other.Id)) return false;
			if (!DefinedIn.Equals(other.DefinedIn)) return false;
			if (!Version.Equals(other.Version)) return false;
			if (!BaseInterfaces.SequenceEqual(other.BaseInterfaces)) return false;
			if (!IsAbstract.Equals(other.IsAbstract)) return false;
			return true;
		}
	}

}
