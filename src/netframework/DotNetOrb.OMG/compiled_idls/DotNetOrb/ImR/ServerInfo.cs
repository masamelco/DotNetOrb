/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:37
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;

namespace DotNetOrb.ImR
{
	[RepositoryID("IDL:DotNetOrb/ImR/ServerInfo:1.0")]
	[Helper(typeof(ServerInfoHelper))]
	public partial class ServerInfo: CORBA.IIDLEntity, IEquatable<DotNetOrb.ImR.ServerInfo>
	{
		[IdlName("ServerInfo")]
		[WideChar(false)]
		public string Name { get; set; }
		[IdlName("ServerInfo")]
		[WideChar(false)]
		public string Command { get; set; }
		[IdlName("ServerInfo")]
		public DotNetOrb.ImR.POAInfo[] Poas { get; set; }
		[IdlName("ServerInfo")]
		[WideChar(false)]
		public string Host { get; set; }
		[IdlName("ServerInfo")]
		public bool Active { get; set; }
		[IdlName("ServerInfo")]
		public bool Holding { get; set; }

		public ServerInfo()
		{
		}

		public ServerInfo(ServerInfo other)
		{
			Name = other.Name;
			Command = other.Command;
			Poas = other.Poas;
			Host = other.Host;
			Active = other.Active;
			Holding = other.Holding;
		}

		public ServerInfo(string name, string command, DotNetOrb.ImR.POAInfo[] poas, string host, bool active, bool holding)
		{
			this.Name = name;
			this.Command = command;
			this.Poas = poas;
			this.Host = host;
			this.Active = active;
			this.Holding = holding;
		}

		public bool Equals(DotNetOrb.ImR.ServerInfo? other)
		{
			if (other == null) return false;
			if (!Name.Equals(other.Name)) return false;
			if (!Command.Equals(other.Command)) return false;
			if (!Poas.SequenceEqual(other.Poas)) return false;
			if (!Host.Equals(other.Host)) return false;
			if (!Active.Equals(other.Active)) return false;
			if (!Holding.Equals(other.Holding)) return false;
			return true;
		}
	}

}
