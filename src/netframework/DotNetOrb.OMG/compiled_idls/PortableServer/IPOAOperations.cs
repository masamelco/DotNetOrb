/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:28
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace PortableServer
{
	public interface IPOAOperations
	{
		[IdlName("create_POA")]
		[ThrowsIdlException(typeof(PortableServer.POA.AdapterAlreadyExists))]
		[ThrowsIdlException(typeof(PortableServer.POA.InvalidPolicy))]
		public PortableServer.IPOA CreatePoa([WideChar(false)] string adapterName, PortableServer.IPOAManager aPOAManager, CORBA.IPolicy[] policies);
		[IdlName("find_POA")]
		[ThrowsIdlException(typeof(PortableServer.POA.AdapterNonExistent))]
		public PortableServer.IPOA FindPoa([WideChar(false)] string adapterName, bool activateIt);
		[IdlName("destroy")]
		public void Destroy(bool etherealizeObjects, bool waitForCompletion);
		[IdlName("create_thread_policy")]
		public PortableServer.IThreadPolicy CreateThreadPolicy(PortableServer.ThreadPolicyValue value);
		[IdlName("create_lifespan_policy")]
		public PortableServer.ILifespanPolicy CreateLifespanPolicy(PortableServer.LifespanPolicyValue value);
		[IdlName("create_id_uniqueness_policy")]
		public PortableServer.IIdUniquenessPolicy CreateIdUniquenessPolicy(PortableServer.IdUniquenessPolicyValue value);
		[IdlName("create_id_assignment_policy")]
		public PortableServer.IIdAssignmentPolicy CreateIdAssignmentPolicy(PortableServer.IdAssignmentPolicyValue value);
		[IdlName("create_implicit_activation_policy")]
		public PortableServer.IImplicitActivationPolicy CreateImplicitActivationPolicy(PortableServer.ImplicitActivationPolicyValue value);
		[IdlName("create_servant_retention_policy")]
		public PortableServer.IServantRetentionPolicy CreateServantRetentionPolicy(PortableServer.ServantRetentionPolicyValue value);
		[IdlName("create_request_processing_policy")]
		public PortableServer.IRequestProcessingPolicy CreateRequestProcessingPolicy(PortableServer.RequestProcessingPolicyValue value);
		[IdlName("the_name")]
		[WideChar(false)]
		public string TheName 
		{
			get;
		}
		[IdlName("the_parent")]
		public PortableServer.IPOA TheParent 
		{
			get;
		}
		[IdlName("the_children")]
		public PortableServer.IPOA[] TheChildren 
		{
			get;
		}
		[IdlName("the_POAManager")]
		public PortableServer.IPOAManager ThePOAManager 
		{
			get;
		}
		[IdlName("the_activator")]
		public PortableServer.IAdapterActivator TheActivator 
		{
			get;

			set;
		}
		[IdlName("get_servant_manager")]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public PortableServer.IServantManager GetServantManager();
		[IdlName("set_servant_manager")]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public void SetServantManager(PortableServer.IServantManager imgr);
		[IdlName("get_servant")]
		[ThrowsIdlException(typeof(PortableServer.POA.NoServant))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public PortableServer.Servant GetServant();
		[IdlName("set_servant")]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public void SetServant(PortableServer.Servant pServant);
		[IdlName("activate_object")]
		[ThrowsIdlException(typeof(PortableServer.POA.ServantAlreadyActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public byte[] ActivateObject(PortableServer.Servant pServant);
		[IdlName("activate_object_with_id")]
		[ThrowsIdlException(typeof(PortableServer.POA.ServantAlreadyActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.ObjectAlreadyActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public void ActivateObjectWithId(byte[] id, PortableServer.Servant pServant);
		[IdlName("deactivate_object")]
		[ThrowsIdlException(typeof(PortableServer.POA.ObjectNotActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public void DeactivateObject(byte[] oid);
		[IdlName("create_reference")]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public CORBA.IObject CreateReference([WideChar(false)] string intf);
		[IdlName("create_reference_with_id")]
		public CORBA.IObject CreateReferenceWithId(byte[] oid, [WideChar(false)] string intf);
		[IdlName("servant_to_id")]
		[ThrowsIdlException(typeof(PortableServer.POA.ServantNotActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public byte[] ServantToId(PortableServer.Servant pServant);
		[IdlName("servant_to_reference")]
		[ThrowsIdlException(typeof(PortableServer.POA.ServantNotActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public CORBA.IObject ServantToReference(PortableServer.Servant pServant);
		[IdlName("reference_to_servant")]
		[ThrowsIdlException(typeof(PortableServer.POA.ObjectNotActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongAdapter))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public PortableServer.Servant ReferenceToServant(CORBA.IObject reference);
		[IdlName("reference_to_id")]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongAdapter))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public byte[] ReferenceToId(CORBA.IObject reference);
		[IdlName("id_to_servant")]
		[ThrowsIdlException(typeof(PortableServer.POA.ObjectNotActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public PortableServer.Servant IdToServant(byte[] oid);
		[IdlName("id_to_reference")]
		[ThrowsIdlException(typeof(PortableServer.POA.ObjectNotActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public CORBA.IObject IdToReference(byte[] oid);
		[IdlName("id")]
		public byte[] Id 
		{
			get;
		}
		[IdlName("the_POAManagerFactory")]
		public PortableServer.IPOAManagerFactory ThePOAManagerFactory 
		{
			get;
		}
	}
}

