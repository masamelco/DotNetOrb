/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:28
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace PortableServer
{
	public abstract partial class POA : CORBA.Object, PortableServer.IPOA
	{
		[IdlName("AdapterAlreadyExists")]
		[RepositoryID("IDL:PortableServer/POA/AdapterAlreadyExists:1.0")]
		[Helper(typeof(AdapterAlreadyExistsHelper))]
		public partial class AdapterAlreadyExists: CORBA.UserException, CORBA.IIDLEntity, IEquatable<PortableServer.POA.AdapterAlreadyExists>
		{
			public AdapterAlreadyExists()
			{
			}

			public AdapterAlreadyExists(string _msg): base(_msg)
			{
			}

			public AdapterAlreadyExists(AdapterAlreadyExists other)
			{
			}

			public bool Equals(PortableServer.POA.AdapterAlreadyExists? other)
			{
				if (other == null) return false;
				return true;
			}
		}

		public static class AdapterAlreadyExistsHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(AdapterAlreadyExistsHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(PortableServer.POA.AdapterAlreadyExistsHelper.Id(), "AdapterAlreadyExists", new CORBA.StructMember[] {});
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, PortableServer.POA.AdapterAlreadyExists e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static PortableServer.POA.AdapterAlreadyExists Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:PortableServer/POA/AdapterAlreadyExists:1.0";
			}

			public static PortableServer.POA.AdapterAlreadyExists Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new PortableServer.POA.AdapterAlreadyExists();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, PortableServer.POA.AdapterAlreadyExists e)
			{
				outputStream.WriteString(Id());
			}

		}
		[IdlName("AdapterNonExistent")]
		[RepositoryID("IDL:PortableServer/POA/AdapterNonExistent:1.0")]
		[Helper(typeof(AdapterNonExistentHelper))]
		public partial class AdapterNonExistent: CORBA.UserException, CORBA.IIDLEntity, IEquatable<PortableServer.POA.AdapterNonExistent>
		{
			public AdapterNonExistent()
			{
			}

			public AdapterNonExistent(string _msg): base(_msg)
			{
			}

			public AdapterNonExistent(AdapterNonExistent other)
			{
			}

			public bool Equals(PortableServer.POA.AdapterNonExistent? other)
			{
				if (other == null) return false;
				return true;
			}
		}

		public static class AdapterNonExistentHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(AdapterNonExistentHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(PortableServer.POA.AdapterNonExistentHelper.Id(), "AdapterNonExistent", new CORBA.StructMember[] {});
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, PortableServer.POA.AdapterNonExistent e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static PortableServer.POA.AdapterNonExistent Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:PortableServer/POA/AdapterNonExistent:1.0";
			}

			public static PortableServer.POA.AdapterNonExistent Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new PortableServer.POA.AdapterNonExistent();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, PortableServer.POA.AdapterNonExistent e)
			{
				outputStream.WriteString(Id());
			}

		}
		[IdlName("InvalidPolicy")]
		[RepositoryID("IDL:PortableServer/POA/InvalidPolicy:1.0")]
		[Helper(typeof(InvalidPolicyHelper))]
		public partial class InvalidPolicy: CORBA.UserException, CORBA.IIDLEntity, IEquatable<PortableServer.POA.InvalidPolicy>
		{
			public InvalidPolicy()
			{
			}

			public InvalidPolicy(string _msg): base(_msg)
			{
			}

			public InvalidPolicy(InvalidPolicy other)
			{
				Index = other.Index;
			}

			public InvalidPolicy(ushort index, string _msg = ""): base(_msg)
			{
				this.Index = index;
			}

			public bool Equals(PortableServer.POA.InvalidPolicy? other)
			{
				if (other == null) return false;
				if (!Index.Equals(other.Index)) return false;
				return true;
			}
			[IdlName("index")]
			public ushort Index { get; set; }
		}

		public static class InvalidPolicyHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(InvalidPolicyHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(PortableServer.POA.InvalidPolicyHelper.Id(), "InvalidPolicy", new CORBA.StructMember[] {new CORBA.StructMember("index", CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 2), null), });
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, PortableServer.POA.InvalidPolicy e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static PortableServer.POA.InvalidPolicy Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:PortableServer/POA/InvalidPolicy:1.0";
			}

			public static PortableServer.POA.InvalidPolicy Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new PortableServer.POA.InvalidPolicy();
				result.Index = inputStream.ReadUShort();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, PortableServer.POA.InvalidPolicy e)
			{
				outputStream.WriteString(Id());
				outputStream.WriteUShort(e.Index);
			}

		}
		[IdlName("NoServant")]
		[RepositoryID("IDL:PortableServer/POA/NoServant:1.0")]
		[Helper(typeof(NoServantHelper))]
		public partial class NoServant: CORBA.UserException, CORBA.IIDLEntity, IEquatable<PortableServer.POA.NoServant>
		{
			public NoServant()
			{
			}

			public NoServant(string _msg): base(_msg)
			{
			}

			public NoServant(NoServant other)
			{
			}

			public bool Equals(PortableServer.POA.NoServant? other)
			{
				if (other == null) return false;
				return true;
			}
		}

		public static class NoServantHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(NoServantHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(PortableServer.POA.NoServantHelper.Id(), "NoServant", new CORBA.StructMember[] {});
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, PortableServer.POA.NoServant e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static PortableServer.POA.NoServant Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:PortableServer/POA/NoServant:1.0";
			}

			public static PortableServer.POA.NoServant Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new PortableServer.POA.NoServant();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, PortableServer.POA.NoServant e)
			{
				outputStream.WriteString(Id());
			}

		}
		[IdlName("ObjectAlreadyActive")]
		[RepositoryID("IDL:PortableServer/POA/ObjectAlreadyActive:1.0")]
		[Helper(typeof(ObjectAlreadyActiveHelper))]
		public partial class ObjectAlreadyActive: CORBA.UserException, CORBA.IIDLEntity, IEquatable<PortableServer.POA.ObjectAlreadyActive>
		{
			public ObjectAlreadyActive()
			{
			}

			public ObjectAlreadyActive(string _msg): base(_msg)
			{
			}

			public ObjectAlreadyActive(ObjectAlreadyActive other)
			{
			}

			public bool Equals(PortableServer.POA.ObjectAlreadyActive? other)
			{
				if (other == null) return false;
				return true;
			}
		}

		public static class ObjectAlreadyActiveHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(ObjectAlreadyActiveHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(PortableServer.POA.ObjectAlreadyActiveHelper.Id(), "ObjectAlreadyActive", new CORBA.StructMember[] {});
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, PortableServer.POA.ObjectAlreadyActive e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static PortableServer.POA.ObjectAlreadyActive Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:PortableServer/POA/ObjectAlreadyActive:1.0";
			}

			public static PortableServer.POA.ObjectAlreadyActive Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new PortableServer.POA.ObjectAlreadyActive();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, PortableServer.POA.ObjectAlreadyActive e)
			{
				outputStream.WriteString(Id());
			}

		}
		[IdlName("ObjectNotActive")]
		[RepositoryID("IDL:PortableServer/POA/ObjectNotActive:1.0")]
		[Helper(typeof(ObjectNotActiveHelper))]
		public partial class ObjectNotActive: CORBA.UserException, CORBA.IIDLEntity, IEquatable<PortableServer.POA.ObjectNotActive>
		{
			public ObjectNotActive()
			{
			}

			public ObjectNotActive(string _msg): base(_msg)
			{
			}

			public ObjectNotActive(ObjectNotActive other)
			{
			}

			public bool Equals(PortableServer.POA.ObjectNotActive? other)
			{
				if (other == null) return false;
				return true;
			}
		}

		public static class ObjectNotActiveHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(ObjectNotActiveHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(PortableServer.POA.ObjectNotActiveHelper.Id(), "ObjectNotActive", new CORBA.StructMember[] {});
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, PortableServer.POA.ObjectNotActive e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static PortableServer.POA.ObjectNotActive Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:PortableServer/POA/ObjectNotActive:1.0";
			}

			public static PortableServer.POA.ObjectNotActive Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new PortableServer.POA.ObjectNotActive();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, PortableServer.POA.ObjectNotActive e)
			{
				outputStream.WriteString(Id());
			}

		}
		[IdlName("ServantAlreadyActive")]
		[RepositoryID("IDL:PortableServer/POA/ServantAlreadyActive:1.0")]
		[Helper(typeof(ServantAlreadyActiveHelper))]
		public partial class ServantAlreadyActive: CORBA.UserException, CORBA.IIDLEntity, IEquatable<PortableServer.POA.ServantAlreadyActive>
		{
			public ServantAlreadyActive()
			{
			}

			public ServantAlreadyActive(string _msg): base(_msg)
			{
			}

			public ServantAlreadyActive(ServantAlreadyActive other)
			{
			}

			public bool Equals(PortableServer.POA.ServantAlreadyActive? other)
			{
				if (other == null) return false;
				return true;
			}
		}

		public static class ServantAlreadyActiveHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(ServantAlreadyActiveHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(PortableServer.POA.ServantAlreadyActiveHelper.Id(), "ServantAlreadyActive", new CORBA.StructMember[] {});
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, PortableServer.POA.ServantAlreadyActive e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static PortableServer.POA.ServantAlreadyActive Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:PortableServer/POA/ServantAlreadyActive:1.0";
			}

			public static PortableServer.POA.ServantAlreadyActive Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new PortableServer.POA.ServantAlreadyActive();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, PortableServer.POA.ServantAlreadyActive e)
			{
				outputStream.WriteString(Id());
			}

		}
		[IdlName("ServantNotActive")]
		[RepositoryID("IDL:PortableServer/POA/ServantNotActive:1.0")]
		[Helper(typeof(ServantNotActiveHelper))]
		public partial class ServantNotActive: CORBA.UserException, CORBA.IIDLEntity, IEquatable<PortableServer.POA.ServantNotActive>
		{
			public ServantNotActive()
			{
			}

			public ServantNotActive(string _msg): base(_msg)
			{
			}

			public ServantNotActive(ServantNotActive other)
			{
			}

			public bool Equals(PortableServer.POA.ServantNotActive? other)
			{
				if (other == null) return false;
				return true;
			}
		}

		public static class ServantNotActiveHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(ServantNotActiveHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(PortableServer.POA.ServantNotActiveHelper.Id(), "ServantNotActive", new CORBA.StructMember[] {});
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, PortableServer.POA.ServantNotActive e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static PortableServer.POA.ServantNotActive Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:PortableServer/POA/ServantNotActive:1.0";
			}

			public static PortableServer.POA.ServantNotActive Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new PortableServer.POA.ServantNotActive();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, PortableServer.POA.ServantNotActive e)
			{
				outputStream.WriteString(Id());
			}

		}
		[IdlName("WrongAdapter")]
		[RepositoryID("IDL:PortableServer/POA/WrongAdapter:1.0")]
		[Helper(typeof(WrongAdapterHelper))]
		public partial class WrongAdapter: CORBA.UserException, CORBA.IIDLEntity, IEquatable<PortableServer.POA.WrongAdapter>
		{
			public WrongAdapter()
			{
			}

			public WrongAdapter(string _msg): base(_msg)
			{
			}

			public WrongAdapter(WrongAdapter other)
			{
			}

			public bool Equals(PortableServer.POA.WrongAdapter? other)
			{
				if (other == null) return false;
				return true;
			}
		}

		public static class WrongAdapterHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(WrongAdapterHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(PortableServer.POA.WrongAdapterHelper.Id(), "WrongAdapter", new CORBA.StructMember[] {});
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, PortableServer.POA.WrongAdapter e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static PortableServer.POA.WrongAdapter Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:PortableServer/POA/WrongAdapter:1.0";
			}

			public static PortableServer.POA.WrongAdapter Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new PortableServer.POA.WrongAdapter();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, PortableServer.POA.WrongAdapter e)
			{
				outputStream.WriteString(Id());
			}

		}
		[IdlName("WrongPolicy")]
		[RepositoryID("IDL:PortableServer/POA/WrongPolicy:1.0")]
		[Helper(typeof(WrongPolicyHelper))]
		public partial class WrongPolicy: CORBA.UserException, CORBA.IIDLEntity, IEquatable<PortableServer.POA.WrongPolicy>
		{
			public WrongPolicy()
			{
			}

			public WrongPolicy(string _msg): base(_msg)
			{
			}

			public WrongPolicy(WrongPolicy other)
			{
			}

			public bool Equals(PortableServer.POA.WrongPolicy? other)
			{
				if (other == null) return false;
				return true;
			}
		}

		public static class WrongPolicyHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(WrongPolicyHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(PortableServer.POA.WrongPolicyHelper.Id(), "WrongPolicy", new CORBA.StructMember[] {});
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, PortableServer.POA.WrongPolicy e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static PortableServer.POA.WrongPolicy Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:PortableServer/POA/WrongPolicy:1.0";
			}

			public static PortableServer.POA.WrongPolicy Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new PortableServer.POA.WrongPolicy();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, PortableServer.POA.WrongPolicy e)
			{
				outputStream.WriteString(Id());
			}

		}
		[IdlName("create_POA")]
		[ThrowsIdlException(typeof(PortableServer.POA.AdapterAlreadyExists))]
		[ThrowsIdlException(typeof(PortableServer.POA.InvalidPolicy))]
		public abstract PortableServer.IPOA CreatePoa([WideChar(false)] string adapterName, PortableServer.IPOAManager aPOAManager, CORBA.IPolicy[] policies);
		[IdlName("find_POA")]
		[ThrowsIdlException(typeof(PortableServer.POA.AdapterNonExistent))]
		public abstract PortableServer.IPOA FindPoa([WideChar(false)] string adapterName, bool activateIt);
		[IdlName("destroy")]
		public abstract void Destroy(bool etherealizeObjects, bool waitForCompletion);
		[IdlName("create_thread_policy")]
		public abstract PortableServer.IThreadPolicy CreateThreadPolicy(PortableServer.ThreadPolicyValue value);
		[IdlName("create_lifespan_policy")]
		public abstract PortableServer.ILifespanPolicy CreateLifespanPolicy(PortableServer.LifespanPolicyValue value);
		[IdlName("create_id_uniqueness_policy")]
		public abstract PortableServer.IIdUniquenessPolicy CreateIdUniquenessPolicy(PortableServer.IdUniquenessPolicyValue value);
		[IdlName("create_id_assignment_policy")]
		public abstract PortableServer.IIdAssignmentPolicy CreateIdAssignmentPolicy(PortableServer.IdAssignmentPolicyValue value);
		[IdlName("create_implicit_activation_policy")]
		public abstract PortableServer.IImplicitActivationPolicy CreateImplicitActivationPolicy(PortableServer.ImplicitActivationPolicyValue value);
		[IdlName("create_servant_retention_policy")]
		public abstract PortableServer.IServantRetentionPolicy CreateServantRetentionPolicy(PortableServer.ServantRetentionPolicyValue value);
		[IdlName("create_request_processing_policy")]
		public abstract PortableServer.IRequestProcessingPolicy CreateRequestProcessingPolicy(PortableServer.RequestProcessingPolicyValue value);
		[IdlName("the_name")]
		[WideChar(false)]
		public abstract string TheName 
		{
			get;
		}
		[IdlName("the_parent")]
		public abstract PortableServer.IPOA TheParent 
		{
			get;
		}
		[IdlName("the_children")]
		public abstract PortableServer.IPOA[] TheChildren 
		{
			get;
		}
		[IdlName("the_POAManager")]
		public abstract PortableServer.IPOAManager ThePOAManager 
		{
			get;
		}
		[IdlName("the_activator")]
		public abstract PortableServer.IAdapterActivator TheActivator 
		{
			get;

			set;
		}
		[IdlName("get_servant_manager")]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract PortableServer.IServantManager GetServantManager();
		[IdlName("set_servant_manager")]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract void SetServantManager(PortableServer.IServantManager imgr);
		[IdlName("get_servant")]
		[ThrowsIdlException(typeof(PortableServer.POA.NoServant))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract PortableServer.Servant GetServant();
		[IdlName("set_servant")]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract void SetServant(PortableServer.Servant pServant);
		[IdlName("activate_object")]
		[ThrowsIdlException(typeof(PortableServer.POA.ServantAlreadyActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract byte[] ActivateObject(PortableServer.Servant pServant);
		[IdlName("activate_object_with_id")]
		[ThrowsIdlException(typeof(PortableServer.POA.ServantAlreadyActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.ObjectAlreadyActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract void ActivateObjectWithId(byte[] id, PortableServer.Servant pServant);
		[IdlName("deactivate_object")]
		[ThrowsIdlException(typeof(PortableServer.POA.ObjectNotActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract void DeactivateObject(byte[] oid);
		[IdlName("create_reference")]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract CORBA.IObject CreateReference([WideChar(false)] string intf);
		[IdlName("create_reference_with_id")]
		public abstract CORBA.IObject CreateReferenceWithId(byte[] oid, [WideChar(false)] string intf);
		[IdlName("servant_to_id")]
		[ThrowsIdlException(typeof(PortableServer.POA.ServantNotActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract byte[] ServantToId(PortableServer.Servant pServant);
		[IdlName("servant_to_reference")]
		[ThrowsIdlException(typeof(PortableServer.POA.ServantNotActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract CORBA.IObject ServantToReference(PortableServer.Servant pServant);
		[IdlName("reference_to_servant")]
		[ThrowsIdlException(typeof(PortableServer.POA.ObjectNotActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongAdapter))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract PortableServer.Servant ReferenceToServant(CORBA.IObject reference);
		[IdlName("reference_to_id")]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongAdapter))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract byte[] ReferenceToId(CORBA.IObject reference);
		[IdlName("id_to_servant")]
		[ThrowsIdlException(typeof(PortableServer.POA.ObjectNotActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract PortableServer.Servant IdToServant(byte[] oid);
		[IdlName("id_to_reference")]
		[ThrowsIdlException(typeof(PortableServer.POA.ObjectNotActive))]
		[ThrowsIdlException(typeof(PortableServer.POA.WrongPolicy))]
		public abstract CORBA.IObject IdToReference(byte[] oid);
		[IdlName("id")]
		public abstract byte[] Id 
		{
			get;
		}
		[IdlName("the_POAManagerFactory")]
		public abstract PortableServer.IPOAManagerFactory ThePOAManagerFactory 
		{
			get;
		}
	}
}

