/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:28
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace PortableServer
{
	public abstract partial class POAManager : CORBA.Object, PortableServer.IPOAManager
	{
		[IdlName("AdapterInactive")]
		[RepositoryID("IDL:PortableServer/POAManager/AdapterInactive:1.0")]
		[Helper(typeof(AdapterInactiveHelper))]
		public partial class AdapterInactive: CORBA.UserException, CORBA.IIDLEntity, IEquatable<PortableServer.POAManager.AdapterInactive>
		{
			public AdapterInactive()
			{
			}

			public AdapterInactive(string _msg): base(_msg)
			{
			}

			public AdapterInactive(AdapterInactive other)
			{
			}

			public bool Equals(PortableServer.POAManager.AdapterInactive? other)
			{
				if (other == null) return false;
				return true;
			}
		}

		public static class AdapterInactiveHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(AdapterInactiveHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(PortableServer.POAManager.AdapterInactiveHelper.Id(), "AdapterInactive", new CORBA.StructMember[] {});
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, PortableServer.POAManager.AdapterInactive e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static PortableServer.POAManager.AdapterInactive Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:PortableServer/POAManager/AdapterInactive:1.0";
			}

			public static PortableServer.POAManager.AdapterInactive Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new PortableServer.POAManager.AdapterInactive();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, PortableServer.POAManager.AdapterInactive e)
			{
				outputStream.WriteString(Id());
			}

		}
		[IdlName("State")]
		[RepositoryID("IDL:PortableServer/POAManager/State:1.0")]
		[Helper(typeof(StateHelper))]
		public enum State
		{
			[IdlName("HOLDING")]
			HOLDING = 0,
			[IdlName("ACTIVE")]
			ACTIVE = 1,
			[IdlName("DISCARDING")]
			DISCARDING = 2,
			[IdlName("INACTIVE")]
			INACTIVE = 3,
		}

		public static class StateHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(StateHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateEnumTc(PortableServer.POAManager.StateHelper.Id(),"State", new String[] {"HOLDING", "ACTIVE", "DISCARDING", "INACTIVE"});
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, PortableServer.POAManager.State value)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), value);
			}

			public static PortableServer.POAManager.State Extract(CORBA.Any any)
			{
					var inputStream = any.CreateInputStream();
				try
				{
				return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:PortableServer/POAManager/State:1.0";
			}

			public static PortableServer.POAManager.State Read(CORBA.IInputStream inputStream)
			{
				return (PortableServer.POAManager.State) inputStream.ReadLong();
			}

			public static void Write(CORBA.IOutputStream outputStream, PortableServer.POAManager.State value)
			{
				outputStream.WriteLong((int) value);
			}

		}
		[IdlName("activate")]
		[ThrowsIdlException(typeof(PortableServer.POAManager.AdapterInactive))]
		public abstract void Activate();
		[IdlName("hold_requests")]
		[ThrowsIdlException(typeof(PortableServer.POAManager.AdapterInactive))]
		public abstract void HoldRequests(bool waitForCompletion);
		[IdlName("discard_requests")]
		[ThrowsIdlException(typeof(PortableServer.POAManager.AdapterInactive))]
		public abstract void DiscardRequests(bool waitForCompletion);
		[IdlName("deactivate")]
		public abstract void Deactivate(bool etherealizeObjects, bool waitForCompletion);
		[IdlName("get_state")]
		public abstract PortableServer.POAManager.State GetState();
		[IdlName("get_id")]
		[return: WideChar(false)]
		public abstract string GetId();
	}
}

