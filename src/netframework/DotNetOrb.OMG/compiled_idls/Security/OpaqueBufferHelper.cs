/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:29
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace Security
{
	public static class OpaqueBufferHelper
	{
		private static volatile CORBA.TypeCode type;

		public static CORBA.TypeCode Type()
		{
			if (type == null)
			{
				lock (typeof(OpaqueBufferHelper))
				{
					if (type == null)
					{
						type = CORBA.ORB.Init().CreateStructTc(Security.OpaqueBufferHelper.Id(), "OpaqueBuffer", new CORBA.StructMember[] {new CORBA.StructMember("buffer", CORBA.ORB.Init().CreateSequenceTc(0, CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 10)), null), new CORBA.StructMember("startpos", CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 5), null), new CORBA.StructMember("endpos", CORBA.ORB.Init().GetPrimitiveTc((CORBA.TCKind) 5), null), });
					}
				}
			}
			return type;
		}

		public static void Insert(CORBA.Any any, Security.OpaqueBuffer s)
		{
			any.Type = Type();
			Write(any.CreateOutputStream(), s);
		}

		public static Security.OpaqueBuffer Extract(CORBA.Any any)
		{
			var inputStream = any.CreateInputStream();
			try
			{
				return Read(inputStream);
			}
			finally
			{
				inputStream.Close();
			}
		}

		public static string Id()
		{
			return "IDL:omg.org/Security/OpaqueBuffer:1.0";
		}

		public static Security.OpaqueBuffer Read(CORBA.IInputStream inputStream)
		{
			var result = new Security.OpaqueBuffer();
			{
				var _capacity0 = inputStream.ReadLong();
				if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
				{
					throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
				}
				var _array = new byte[_capacity0];
				inputStream.ReadOctetArray(ref _array, 0, _capacity0);
				result.Buffer = _array;
			}
			result.Startpos = inputStream.ReadULong();
			result.Endpos = inputStream.ReadULong();
			return result;
		}

		public static void Write(CORBA.IOutputStream outputStream, Security.OpaqueBuffer s)
		{
			{
				outputStream.WriteLong(s.Buffer.Length);
				outputStream.WriteOctetArray(s.Buffer, 0, s.Buffer.Length);
			}
			outputStream.WriteULong(s.Startpos);
			outputStream.WriteULong(s.Endpos);
		}

	}
}
