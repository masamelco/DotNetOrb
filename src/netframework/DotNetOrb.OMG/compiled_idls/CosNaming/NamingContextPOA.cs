/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:30
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace CosNaming
{

	public abstract class NamingContextPOA: PortableServer.Servant, CORBA.IInvokeHandler, INamingContextOperations
	{
		static private Dictionary<string,int> _opsDict = new Dictionary<string,int>();
		static NamingContextPOA()
		{
			_opsDict.Add("bind", 0);
			_opsDict.Add("rebind", 1);
			_opsDict.Add("bind_context", 2);
			_opsDict.Add("rebind_context", 3);
			_opsDict.Add("resolve", 4);
			_opsDict.Add("unbind", 5);
			_opsDict.Add("new_context", 6);
			_opsDict.Add("bind_new_context", 7);
			_opsDict.Add("destroy", 8);
			_opsDict.Add("list", 9);
		}
		private string[] _ids = {"IDL:omg.org/CosNaming/NamingContext:1.0"};

		[IdlName("bind")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.AlreadyBound))]
		public abstract void Bind(CosNaming.NameComponent[] n, CORBA.IObject obj);
		[IdlName("rebind")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		public abstract void Rebind(CosNaming.NameComponent[] n, CORBA.IObject obj);
		[IdlName("bind_context")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.AlreadyBound))]
		public abstract void BindContext(CosNaming.NameComponent[] n, CosNaming.INamingContext nc);
		[IdlName("rebind_context")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		public abstract void RebindContext(CosNaming.NameComponent[] n, CosNaming.INamingContext nc);
		[IdlName("resolve")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		public abstract CORBA.IObject Resolve(CosNaming.NameComponent[] n);
		[IdlName("unbind")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		public abstract void Unbind(CosNaming.NameComponent[] n);
		[IdlName("new_context")]
		public abstract CosNaming.INamingContext NewContext();
		[IdlName("bind_new_context")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.AlreadyBound))]
		public abstract CosNaming.INamingContext BindNewContext(CosNaming.NameComponent[] n);
		[IdlName("destroy")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotEmpty))]
		public abstract void Destroy();
		[IdlName("list")]
		public abstract void List(uint howMany, out CosNaming.Binding[] bl, out CosNaming.IBindingIterator bi);

		public override string[] _AllInterfaces(PortableServer.IPOA poa, byte[] objId)
		{
			return _ids;
		}

		public virtual CosNaming.INamingContext _This()
		{
			return CosNaming.NamingContextHelper.Narrow(_ThisObject());
		}

		public virtual CosNaming.INamingContext _This(CORBA.ORB orb)
		{
			return CosNaming.NamingContextHelper.Narrow(_ThisObject(orb));
		}

		public CORBA.IOutputStream _Invoke(string method, CORBA.IInputStream inputStream, CORBA.IResponseHandler handler)
		{
			CORBA.IOutputStream outputStream = null;
			int opIndex;
			if (_opsDict.TryGetValue(method, out opIndex))
			{
				switch (opIndex)
				{
					case 0:
					{
						try
						{
							CosNaming.NameComponent[] n;
							{
								var _capacity0 = inputStream.ReadLong();
								if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
								{
									throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
								}
								n = new CosNaming.NameComponent[_capacity0];
								for (int i0 = 0; i0 < _capacity0; i0++)
								{
									CosNaming.NameComponent _item0;
									_item0 = CosNaming.NameComponentHelper.Read(inputStream);
									n[i0] = _item0;
								}
							}
							CORBA.IObject obj;
							obj = inputStream.ReadObject();
							outputStream = handler.CreateReply();
							Bind(n,obj);
						}
						catch(CosNaming.NamingContext.NotFound ex)
						{
							outputStream = handler.CreateExceptionReply();
							CosNaming.NamingContext.NotFoundHelper.Write(outputStream, ex);
						}
						catch(CosNaming.NamingContext.CannotProceed ex)
						{
							outputStream = handler.CreateExceptionReply();
							CosNaming.NamingContext.CannotProceedHelper.Write(outputStream, ex);
						}
						catch(CosNaming.NamingContext.InvalidName ex)
						{
							outputStream = handler.CreateExceptionReply();
							CosNaming.NamingContext.InvalidNameHelper.Write(outputStream, ex);
						}
						catch(CosNaming.NamingContext.AlreadyBound ex)
						{
							outputStream = handler.CreateExceptionReply();
							CosNaming.NamingContext.AlreadyBoundHelper.Write(outputStream, ex);
						}
					}
					break;
					case 1:
					{
						try
						{
							CosNaming.NameComponent[] n;
							{
								var _capacity0 = inputStream.ReadLong();
								if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
								{
									throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
								}
								n = new CosNaming.NameComponent[_capacity0];
								for (int i0 = 0; i0 < _capacity0; i0++)
								{
									CosNaming.NameComponent _item0;
									_item0 = CosNaming.NameComponentHelper.Read(inputStream);
									n[i0] = _item0;
								}
							}
							CORBA.IObject obj;
							obj = inputStream.ReadObject();
							outputStream = handler.CreateReply();
							Rebind(n,obj);
						}
						catch(CosNaming.NamingContext.NotFound ex)
						{
							outputStream = handler.CreateExceptionReply();
							CosNaming.NamingContext.NotFoundHelper.Write(outputStream, ex);
						}
						catch(CosNaming.NamingContext.CannotProceed ex)
						{
							outputStream = handler.CreateExceptionReply();
							CosNaming.NamingContext.CannotProceedHelper.Write(outputStream, ex);
						}
						catch(CosNaming.NamingContext.InvalidName ex)
						{
							outputStream = handler.CreateExceptionReply();
							CosNaming.NamingContext.InvalidNameHelper.Write(outputStream, ex);
						}
					}
					break;
					case 2:
					{
						try
						{
							CosNaming.NameComponent[] n;
							{
								var _capacity0 = inputStream.ReadLong();
								if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
								{
									throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
								}
								n = new CosNaming.NameComponent[_capacity0];
								for (int i0 = 0; i0 < _capacity0; i0++)
								{
									CosNaming.NameComponent _item0;
									_item0 = CosNaming.NameComponentHelper.Read(inputStream);
									n[i0] = _item0;
								}
							}
							CosNaming.INamingContext nc;
							nc = CosNaming.NamingContextHelper.Read(inputStream);
							outputStream = handler.CreateReply();
							BindContext(n,nc);
						}
						catch(CosNaming.NamingContext.NotFound ex)
						{
							outputStream = handler.CreateExceptionReply();
							CosNaming.NamingContext.NotFoundHelper.Write(outputStream, ex);
						}
						catch(CosNaming.NamingContext.CannotProceed ex)
						{
							outputStream = handler.CreateExceptionReply();
							CosNaming.NamingContext.CannotProceedHelper.Write(outputStream, ex);
						}
						catch(CosNaming.NamingContext.InvalidName ex)
						{
							outputStream = handler.CreateExceptionReply();
							CosNaming.NamingContext.InvalidNameHelper.Write(outputStream, ex);
						}
						catch(CosNaming.NamingContext.AlreadyBound ex)
						{
							outputStream = handler.CreateExceptionReply();
							CosNaming.NamingContext.AlreadyBoundHelper.Write(outputStream, ex);
						}
					}
					break;
					case 3:
					{
						try
						{
							CosNaming.NameComponent[] n;
							{
								var _capacity0 = inputStream.ReadLong();
								if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
								{
									throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
								}
								n = new CosNaming.NameComponent[_capacity0];
								for (int i0 = 0; i0 < _capacity0; i0++)
								{
									CosNaming.NameComponent _item0;
									_item0 = CosNaming.NameComponentHelper.Read(inputStream);
									n[i0] = _item0;
								}
							}
							CosNaming.INamingContext nc;
							nc = CosNaming.NamingContextHelper.Read(inputStream);
							outputStream = handler.CreateReply();
							RebindContext(n,nc);
						}
						catch(CosNaming.NamingContext.NotFound ex)
						{
							outputStream = handler.CreateExceptionReply();
							CosNaming.NamingContext.NotFoundHelper.Write(outputStream, ex);
						}
						catch(CosNaming.NamingContext.CannotProceed ex)
						{
							outputStream = handler.CreateExceptionReply();
							CosNaming.NamingContext.CannotProceedHelper.Write(outputStream, ex);
						}
						catch(CosNaming.NamingContext.InvalidName ex)
						{
							outputStream = handler.CreateExceptionReply();
							CosNaming.NamingContext.InvalidNameHelper.Write(outputStream, ex);
						}
					}
					break;
					case 4:
					{
						try
						{
							CosNaming.NameComponent[] n;
							{
								var _capacity0 = inputStream.ReadLong();
								if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
								{
									throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
								}
								n = new CosNaming.NameComponent[_capacity0];
								for (int i0 = 0; i0 < _capacity0; i0++)
								{
									CosNaming.NameComponent _item0;
									_item0 = CosNaming.NameComponentHelper.Read(inputStream);
									n[i0] = _item0;
								}
							}
							outputStream = handler.CreateReply();
							var _result = Resolve(n);
							outputStream.WriteObject(_result);
						}
						catch(CosNaming.NamingContext.NotFound ex)
						{
							outputStream = handler.CreateExceptionReply();
							CosNaming.NamingContext.NotFoundHelper.Write(outputStream, ex);
						}
						catch(CosNaming.NamingContext.CannotProceed ex)
						{
							outputStream = handler.CreateExceptionReply();
							CosNaming.NamingContext.CannotProceedHelper.Write(outputStream, ex);
						}
						catch(CosNaming.NamingContext.InvalidName ex)
						{
							outputStream = handler.CreateExceptionReply();
							CosNaming.NamingContext.InvalidNameHelper.Write(outputStream, ex);
						}
					}
					break;
					case 5:
					{
						try
						{
							CosNaming.NameComponent[] n;
							{
								var _capacity0 = inputStream.ReadLong();
								if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
								{
									throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
								}
								n = new CosNaming.NameComponent[_capacity0];
								for (int i0 = 0; i0 < _capacity0; i0++)
								{
									CosNaming.NameComponent _item0;
									_item0 = CosNaming.NameComponentHelper.Read(inputStream);
									n[i0] = _item0;
								}
							}
							outputStream = handler.CreateReply();
							Unbind(n);
						}
						catch(CosNaming.NamingContext.NotFound ex)
						{
							outputStream = handler.CreateExceptionReply();
							CosNaming.NamingContext.NotFoundHelper.Write(outputStream, ex);
						}
						catch(CosNaming.NamingContext.CannotProceed ex)
						{
							outputStream = handler.CreateExceptionReply();
							CosNaming.NamingContext.CannotProceedHelper.Write(outputStream, ex);
						}
						catch(CosNaming.NamingContext.InvalidName ex)
						{
							outputStream = handler.CreateExceptionReply();
							CosNaming.NamingContext.InvalidNameHelper.Write(outputStream, ex);
						}
					}
					break;
					case 6:
					{
							outputStream = handler.CreateReply();
							var _result = NewContext();
							CosNaming.NamingContextHelper.Write(outputStream, _result);
					}
					break;
					case 7:
					{
						try
						{
							CosNaming.NameComponent[] n;
							{
								var _capacity0 = inputStream.ReadLong();
								if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
								{
									throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
								}
								n = new CosNaming.NameComponent[_capacity0];
								for (int i0 = 0; i0 < _capacity0; i0++)
								{
									CosNaming.NameComponent _item0;
									_item0 = CosNaming.NameComponentHelper.Read(inputStream);
									n[i0] = _item0;
								}
							}
							outputStream = handler.CreateReply();
							var _result = BindNewContext(n);
							CosNaming.NamingContextHelper.Write(outputStream, _result);
						}
						catch(CosNaming.NamingContext.NotFound ex)
						{
							outputStream = handler.CreateExceptionReply();
							CosNaming.NamingContext.NotFoundHelper.Write(outputStream, ex);
						}
						catch(CosNaming.NamingContext.CannotProceed ex)
						{
							outputStream = handler.CreateExceptionReply();
							CosNaming.NamingContext.CannotProceedHelper.Write(outputStream, ex);
						}
						catch(CosNaming.NamingContext.InvalidName ex)
						{
							outputStream = handler.CreateExceptionReply();
							CosNaming.NamingContext.InvalidNameHelper.Write(outputStream, ex);
						}
						catch(CosNaming.NamingContext.AlreadyBound ex)
						{
							outputStream = handler.CreateExceptionReply();
							CosNaming.NamingContext.AlreadyBoundHelper.Write(outputStream, ex);
						}
					}
					break;
					case 8:
					{
						try
						{
							outputStream = handler.CreateReply();
							Destroy();
						}
						catch(CosNaming.NamingContext.NotEmpty ex)
						{
							outputStream = handler.CreateExceptionReply();
							CosNaming.NamingContext.NotEmptyHelper.Write(outputStream, ex);
						}
					}
					break;
					case 9:
					{
							uint howMany;
							howMany = inputStream.ReadULong();
							outputStream = handler.CreateReply();
							List(howMany,out CosNaming.Binding[] bl,out CosNaming.IBindingIterator bi);
							{
								outputStream.WriteLong(bl.Length);
								for (int i0 = 0; i0 < bl.Length; i0++)
								{
									CosNaming.BindingHelper.Write(outputStream, bl[i0]);
								}
							}
							CosNaming.BindingIteratorHelper.Write(outputStream, bi);
					}
					break;
				}
				return outputStream;
			}
			else
			{
				throw new CORBA.BadOperation(method + " not found");
			}
		}
	}
}
