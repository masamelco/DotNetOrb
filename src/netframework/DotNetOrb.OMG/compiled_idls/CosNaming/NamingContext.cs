/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:30
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace CosNaming
{
	public abstract partial class NamingContext : CORBA.Object, CosNaming.INamingContext
	{
		[IdlName("NotFoundReason")]
		[RepositoryID("IDL:omg.org/CosNaming/NamingContext/NotFoundReason:1.0")]
		[Helper(typeof(NotFoundReasonHelper))]
		public enum NotFoundReason
		{
			[IdlName("missing_node")]
			MissingNode = 0,
			[IdlName("not_context")]
			NotContext = 1,
			[IdlName("not_object")]
			NotObject = 2,
		}

		public static class NotFoundReasonHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(NotFoundReasonHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateEnumTc(CosNaming.NamingContext.NotFoundReasonHelper.Id(),"NotFoundReason", new String[] {"missing_node", "not_context", "not_object"});
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, CosNaming.NamingContext.NotFoundReason value)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), value);
			}

			public static CosNaming.NamingContext.NotFoundReason Extract(CORBA.Any any)
			{
					var inputStream = any.CreateInputStream();
				try
				{
				return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:omg.org/CosNaming/NamingContext/NotFoundReason:1.0";
			}

			public static CosNaming.NamingContext.NotFoundReason Read(CORBA.IInputStream inputStream)
			{
				return (CosNaming.NamingContext.NotFoundReason) inputStream.ReadLong();
			}

			public static void Write(CORBA.IOutputStream outputStream, CosNaming.NamingContext.NotFoundReason value)
			{
				outputStream.WriteLong((int) value);
			}

		}
		[IdlName("NotFound")]
		[RepositoryID("IDL:omg.org/CosNaming/NamingContext/NotFound:1.0")]
		[Helper(typeof(NotFoundHelper))]
		public partial class NotFound: CORBA.UserException, CORBA.IIDLEntity, IEquatable<CosNaming.NamingContext.NotFound>
		{
			public NotFound()
			{
			}

			public NotFound(string _msg): base(_msg)
			{
			}

			public NotFound(NotFound other)
			{
				Why = other.Why;
				RestOfName = other.RestOfName;
			}

			public NotFound(CosNaming.NamingContext.NotFoundReason why, CosNaming.NameComponent[] restOfName, string _msg = ""): base(_msg)
			{
				this.Why = why;
				this.RestOfName = restOfName;
			}

			public bool Equals(CosNaming.NamingContext.NotFound? other)
			{
				if (other == null) return false;
				if (!Why.Equals(other.Why)) return false;
				if (!RestOfName.SequenceEqual(other.RestOfName)) return false;
				return true;
			}
			[IdlName("why")]
			public CosNaming.NamingContext.NotFoundReason Why { get; set; }
			[IdlName("rest_of_name")]
			public CosNaming.NameComponent[] RestOfName { get; set; }
		}

		public static class NotFoundHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(NotFoundHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(CosNaming.NamingContext.NotFoundHelper.Id(), "NotFound", new CORBA.StructMember[] {new CORBA.StructMember("why", CosNaming.NamingContext.NotFoundReasonHelper.Type(), null), new CORBA.StructMember("rest_of_name", CORBA.ORB.Init().CreateSequenceTc(0, CosNaming.NameComponentHelper.Type()), null), });
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, CosNaming.NamingContext.NotFound e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static CosNaming.NamingContext.NotFound Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:omg.org/CosNaming/NamingContext/NotFound:1.0";
			}

			public static CosNaming.NamingContext.NotFound Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new CosNaming.NamingContext.NotFound();
				result.Why = CosNaming.NamingContext.NotFoundReasonHelper.Read(inputStream);
				{
					var _capacity0 = inputStream.ReadLong();
					if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
					{
						throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
					}
					result.RestOfName = new CosNaming.NameComponent[_capacity0];
					for (int i0 = 0; i0 < _capacity0; i0++)
					{
						CosNaming.NameComponent _item0;
						_item0 = CosNaming.NameComponentHelper.Read(inputStream);
						result.RestOfName[i0] = _item0;
					}
				}
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, CosNaming.NamingContext.NotFound e)
			{
				outputStream.WriteString(Id());
				CosNaming.NamingContext.NotFoundReasonHelper.Write(outputStream, e.Why);
				{
					outputStream.WriteLong(e.RestOfName.Length);
					for (int i0 = 0; i0 < e.RestOfName.Length; i0++)
					{
						CosNaming.NameComponentHelper.Write(outputStream, e.RestOfName[i0]);
					}
				}
			}

		}
		[IdlName("CannotProceed")]
		[RepositoryID("IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0")]
		[Helper(typeof(CannotProceedHelper))]
		public partial class CannotProceed: CORBA.UserException, CORBA.IIDLEntity, IEquatable<CosNaming.NamingContext.CannotProceed>
		{
			public CannotProceed()
			{
			}

			public CannotProceed(string _msg): base(_msg)
			{
			}

			public CannotProceed(CannotProceed other)
			{
				Cxt = other.Cxt;
				RestOfName = other.RestOfName;
			}

			public CannotProceed(CosNaming.INamingContext cxt, CosNaming.NameComponent[] restOfName, string _msg = ""): base(_msg)
			{
				this.Cxt = cxt;
				this.RestOfName = restOfName;
			}

			public bool Equals(CosNaming.NamingContext.CannotProceed? other)
			{
				if (other == null) return false;
				if (!Cxt.Equals(other.Cxt)) return false;
				if (!RestOfName.SequenceEqual(other.RestOfName)) return false;
				return true;
			}
			[IdlName("cxt")]
			public CosNaming.INamingContext Cxt { get; set; }
			[IdlName("rest_of_name")]
			public CosNaming.NameComponent[] RestOfName { get; set; }
		}

		public static class CannotProceedHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(CannotProceedHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(CosNaming.NamingContext.CannotProceedHelper.Id(), "CannotProceed", new CORBA.StructMember[] {new CORBA.StructMember("cxt", CORBA.ORB.Init().CreateRecursiveTc("IDL:omg.org/CosNaming/NamingContext:1.0"), null), new CORBA.StructMember("rest_of_name", CORBA.ORB.Init().CreateSequenceTc(0, CosNaming.NameComponentHelper.Type()), null), });
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, CosNaming.NamingContext.CannotProceed e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static CosNaming.NamingContext.CannotProceed Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0";
			}

			public static CosNaming.NamingContext.CannotProceed Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new CosNaming.NamingContext.CannotProceed();
				result.Cxt = CosNaming.NamingContextHelper.Read(inputStream);
				{
					var _capacity0 = inputStream.ReadLong();
					if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
					{
						throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
					}
					result.RestOfName = new CosNaming.NameComponent[_capacity0];
					for (int i0 = 0; i0 < _capacity0; i0++)
					{
						CosNaming.NameComponent _item0;
						_item0 = CosNaming.NameComponentHelper.Read(inputStream);
						result.RestOfName[i0] = _item0;
					}
				}
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, CosNaming.NamingContext.CannotProceed e)
			{
				outputStream.WriteString(Id());
				CosNaming.NamingContextHelper.Write(outputStream, e.Cxt);
				{
					outputStream.WriteLong(e.RestOfName.Length);
					for (int i0 = 0; i0 < e.RestOfName.Length; i0++)
					{
						CosNaming.NameComponentHelper.Write(outputStream, e.RestOfName[i0]);
					}
				}
			}

		}
		[IdlName("InvalidName")]
		[RepositoryID("IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0")]
		[Helper(typeof(InvalidNameHelper))]
		public partial class InvalidName: CORBA.UserException, CORBA.IIDLEntity, IEquatable<CosNaming.NamingContext.InvalidName>
		{
			public InvalidName()
			{
			}

			public InvalidName(string _msg): base(_msg)
			{
			}

			public InvalidName(InvalidName other)
			{
			}

			public bool Equals(CosNaming.NamingContext.InvalidName? other)
			{
				if (other == null) return false;
				return true;
			}
		}

		public static class InvalidNameHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(InvalidNameHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(CosNaming.NamingContext.InvalidNameHelper.Id(), "InvalidName", new CORBA.StructMember[] {});
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, CosNaming.NamingContext.InvalidName e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static CosNaming.NamingContext.InvalidName Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0";
			}

			public static CosNaming.NamingContext.InvalidName Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new CosNaming.NamingContext.InvalidName();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, CosNaming.NamingContext.InvalidName e)
			{
				outputStream.WriteString(Id());
			}

		}
		[IdlName("AlreadyBound")]
		[RepositoryID("IDL:omg.org/CosNaming/NamingContext/AlreadyBound:1.0")]
		[Helper(typeof(AlreadyBoundHelper))]
		public partial class AlreadyBound: CORBA.UserException, CORBA.IIDLEntity, IEquatable<CosNaming.NamingContext.AlreadyBound>
		{
			public AlreadyBound()
			{
			}

			public AlreadyBound(string _msg): base(_msg)
			{
			}

			public AlreadyBound(AlreadyBound other)
			{
			}

			public bool Equals(CosNaming.NamingContext.AlreadyBound? other)
			{
				if (other == null) return false;
				return true;
			}
		}

		public static class AlreadyBoundHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(AlreadyBoundHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(CosNaming.NamingContext.AlreadyBoundHelper.Id(), "AlreadyBound", new CORBA.StructMember[] {});
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, CosNaming.NamingContext.AlreadyBound e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static CosNaming.NamingContext.AlreadyBound Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:omg.org/CosNaming/NamingContext/AlreadyBound:1.0";
			}

			public static CosNaming.NamingContext.AlreadyBound Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new CosNaming.NamingContext.AlreadyBound();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, CosNaming.NamingContext.AlreadyBound e)
			{
				outputStream.WriteString(Id());
			}

		}
		[IdlName("NotEmpty")]
		[RepositoryID("IDL:omg.org/CosNaming/NamingContext/NotEmpty:1.0")]
		[Helper(typeof(NotEmptyHelper))]
		public partial class NotEmpty: CORBA.UserException, CORBA.IIDLEntity, IEquatable<CosNaming.NamingContext.NotEmpty>
		{
			public NotEmpty()
			{
			}

			public NotEmpty(string _msg): base(_msg)
			{
			}

			public NotEmpty(NotEmpty other)
			{
			}

			public bool Equals(CosNaming.NamingContext.NotEmpty? other)
			{
				if (other == null) return false;
				return true;
			}
		}

		public static class NotEmptyHelper
		{
			private static volatile CORBA.TypeCode type;

			public static CORBA.TypeCode Type()
			{
				if (type == null)
				{
					lock (typeof(NotEmptyHelper))
					{
						if (type == null)
						{
							type = CORBA.ORB.Init().CreateExceptionTc(CosNaming.NamingContext.NotEmptyHelper.Id(), "NotEmpty", new CORBA.StructMember[] {});
						}
					}
				}
				return type;
			}

			public static void Insert(CORBA.Any any, CosNaming.NamingContext.NotEmpty e)
			{
				any.Type = Type();
				Write(any.CreateOutputStream(), e);
			}

			public static CosNaming.NamingContext.NotEmpty Extract(CORBA.Any any)
			{
				var inputStream = any.CreateInputStream();
				try
				{
					return Read(inputStream);
				}
				finally
				{
					inputStream.Close();
				}
			}

			public static string Id()
			{
				return "IDL:omg.org/CosNaming/NamingContext/NotEmpty:1.0";
			}

			public static CosNaming.NamingContext.NotEmpty Read(CORBA.IInputStream inputStream)
			{
				var id = inputStream.ReadString();
				if (!id.Equals(Id()))
				{
					throw new CORBA.Marshal("Wrong id: " + id);
				}
				var result = new CosNaming.NamingContext.NotEmpty();
				return result;
			}

			public static void Write(CORBA.IOutputStream outputStream, CosNaming.NamingContext.NotEmpty e)
			{
				outputStream.WriteString(Id());
			}

		}
		[IdlName("bind")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.AlreadyBound))]
		public abstract void Bind(CosNaming.NameComponent[] n, CORBA.IObject obj);
		[IdlName("rebind")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		public abstract void Rebind(CosNaming.NameComponent[] n, CORBA.IObject obj);
		[IdlName("bind_context")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.AlreadyBound))]
		public abstract void BindContext(CosNaming.NameComponent[] n, CosNaming.INamingContext nc);
		[IdlName("rebind_context")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		public abstract void RebindContext(CosNaming.NameComponent[] n, CosNaming.INamingContext nc);
		[IdlName("resolve")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		public abstract CORBA.IObject Resolve(CosNaming.NameComponent[] n);
		[IdlName("unbind")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		public abstract void Unbind(CosNaming.NameComponent[] n);
		[IdlName("new_context")]
		public abstract CosNaming.INamingContext NewContext();
		[IdlName("bind_new_context")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotFound))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.CannotProceed))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.InvalidName))]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.AlreadyBound))]
		public abstract CosNaming.INamingContext BindNewContext(CosNaming.NameComponent[] n);
		[IdlName("destroy")]
		[ThrowsIdlException(typeof(CosNaming.NamingContext.NotEmpty))]
		public abstract void Destroy();
		[IdlName("list")]
		public abstract void List(uint howMany, out CosNaming.Binding[] bl, out CosNaming.IBindingIterator bi);
	}
}

