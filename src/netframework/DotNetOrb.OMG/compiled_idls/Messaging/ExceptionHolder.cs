/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:34
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace Messaging
{
	[IdlName("ExceptionHolder")]
	[RepositoryID("IDL:Messaging/ExceptionHolder:1.0")]
	[Helper(typeof(ExceptionHolderHelper))]
	public abstract class ExceptionHolder : CORBA.Object, CORBA.IStreamableValue
	{
		public virtual string[] _TruncatableIds { get => new[] {"IDL:Messaging/ExceptionHolder:1.0"}; } 

		public virtual CORBA.TypeCode _Type { get => Messaging.ExceptionHolderHelper.Type(); }


		[IdlName("is_system_exception")]
		protected bool IsSystemException { get; set; }
		[IdlName("byte_order")]
		protected bool ByteOrder { get; set; }
		[IdlName("marshaled_exception")]
		protected byte[] MarshaledException { get; set; }

		[IdlName("raise_exception")]
		[ThrowsIdlException(typeof(CORBA.UserException))]
		public abstract void RaiseException();
		[IdlName("raise_exception_with_list")]
		[ThrowsIdlException(typeof(CORBA.UserException))]
		public abstract void RaiseExceptionWithList(CORBA.TypeCode[] excList);

		public virtual void _Write(CORBA.IOutputStream outputStream)
		{
			outputStream.WriteBoolean(IsSystemException);
			outputStream.WriteBoolean(ByteOrder);
			{
				outputStream.WriteLong(MarshaledException.Length);
				outputStream.WriteOctetArray(MarshaledException, 0, MarshaledException.Length);
			}
		}

		public virtual void _Read(CORBA.IInputStream inputStream)
		{
			IsSystemException = inputStream.ReadBoolean();
			ByteOrder = inputStream.ReadBoolean();
			{
				var _capacity0 = inputStream.ReadLong();
				if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
				{
					throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
				}
				var _array = new byte[_capacity0];
				inputStream.ReadOctetArray(ref _array, 0, _capacity0);
				MarshaledException = _array;
			}
		}
	}
}

