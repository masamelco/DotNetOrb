/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:28
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;

namespace GIOP
{
	[IdlName("TargetAddress")]
	[RepositoryID("IDL:GIOP/TargetAddress:1.0")]
	[Helper(typeof(TargetAddressHelper))]
	public partial class TargetAddress: CORBA.IIDLEntity, IEquatable<TargetAddress>
	{
		public TargetAddress()
		{
		}

		public TargetAddress(TargetAddress other)
		{
			_Discriminator = other._Discriminator;
			ObjectKey = other.ObjectKey;
			Profile = other.Profile;
			Ior = other.Ior;
		}

		public bool Equals(TargetAddress? other)
		{
			if (other == null) return false;
			if (_Discriminator != other._Discriminator) return false;
			switch (_Discriminator)
			{
				case 0:
					if (!ObjectKey.SequenceEqual(other.ObjectKey)) return false;
					break;
				case 1:
					if (!Profile.Equals(other.Profile)) return false;
					break;
				case 2:
					if (!Ior.Equals(other.Ior)) return false;
					break;
			}
			return true;
		}

		public short _Discriminator { get; private set; }

		private byte[] _objectKey;
		public byte[] ObjectKey
		{
			get
			{
				if (_Discriminator != 0) throw new System.InvalidOperationException();
				return _objectKey;
			}
			set
			{
				_Discriminator = 0;
				_objectKey = value;
			}
		}
		private IOP.TaggedProfile _profile;
		public IOP.TaggedProfile Profile
		{
			get
			{
				if (_Discriminator != 1) throw new System.InvalidOperationException();
				return _profile;
			}
			set
			{
				_Discriminator = 1;
				_profile = value;
			}
		}
		private GIOP.IORAddressingInfo _ior;
		public GIOP.IORAddressingInfo Ior
		{
			get
			{
				if (_Discriminator != 2) throw new System.InvalidOperationException();
				return _ior;
			}
			set
			{
				_Discriminator = 2;
				_ior = value;
			}
		}
	}

}
