/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:38
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace DynamicAny
{
	public abstract class _DynAnyFactoryLocalBase: CORBA.LocalObject, IDynAnyFactory
	{
		private string[] _ids = {"IDL:DynamicAny/DynAnyFactory:1.0"};

		public override string[] _Ids()
		{
			return _ids;
		}

		[IdlName("create_dyn_any")]
		[ThrowsIdlException(typeof(DynamicAny.DynAnyFactory.InconsistentTypeCode))]
		public abstract DynamicAny.IDynAny CreateDynAny(CORBA.Any value);
		[IdlName("create_dyn_any_from_type_code")]
		[ThrowsIdlException(typeof(DynamicAny.DynAnyFactory.InconsistentTypeCode))]
		public abstract DynamicAny.IDynAny CreateDynAnyFromTypeCode(CORBA.TypeCode type);
		[IdlName("create_dyn_any_without_truncation")]
		[ThrowsIdlException(typeof(DynamicAny.DynAnyFactory.InconsistentTypeCode))]
		[ThrowsIdlException(typeof(DynamicAny.MustTruncate))]
		public abstract DynamicAny.IDynAny CreateDynAnyWithoutTruncation(CORBA.Any value);
		[IdlName("create_multiple_dyn_anys")]
		[ThrowsIdlException(typeof(DynamicAny.DynAnyFactory.InconsistentTypeCode))]
		[ThrowsIdlException(typeof(DynamicAny.MustTruncate))]
		public abstract DynamicAny.IDynAny[] CreateMultipleDynAnys(CORBA.Any[] values, bool allowTruncate);
		[IdlName("create_multiple_anys")]
		public abstract CORBA.Any[] CreateMultipleAnys(DynamicAny.IDynAny[] values);
	}

}
