/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:38
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace DynamicAny
{

	public class DynAnyFactoryLocalTie: _DynAnyFactoryLocalBase
	{
		public IDynAnyFactoryOperations _OperationsDelegate { get; set; }

		public DynAnyFactoryLocalTie(IDynAnyFactoryOperations d)
		{
			_OperationsDelegate = d;
		}

		[IdlName("create_dyn_any")]
		[ThrowsIdlException(typeof(DynamicAny.DynAnyFactory.InconsistentTypeCode))]
		public override DynamicAny.IDynAny CreateDynAny(CORBA.Any value)
		{
			return _OperationsDelegate.CreateDynAny(value);
		}
		[IdlName("create_dyn_any_from_type_code")]
		[ThrowsIdlException(typeof(DynamicAny.DynAnyFactory.InconsistentTypeCode))]
		public override DynamicAny.IDynAny CreateDynAnyFromTypeCode(CORBA.TypeCode type)
		{
			return _OperationsDelegate.CreateDynAnyFromTypeCode(type);
		}
		[IdlName("create_dyn_any_without_truncation")]
		[ThrowsIdlException(typeof(DynamicAny.DynAnyFactory.InconsistentTypeCode))]
		[ThrowsIdlException(typeof(DynamicAny.MustTruncate))]
		public override DynamicAny.IDynAny CreateDynAnyWithoutTruncation(CORBA.Any value)
		{
			return _OperationsDelegate.CreateDynAnyWithoutTruncation(value);
		}
		[IdlName("create_multiple_dyn_anys")]
		[ThrowsIdlException(typeof(DynamicAny.DynAnyFactory.InconsistentTypeCode))]
		[ThrowsIdlException(typeof(DynamicAny.MustTruncate))]
		public override DynamicAny.IDynAny[] CreateMultipleDynAnys(CORBA.Any[] values, bool allowTruncate)
		{
			return _OperationsDelegate.CreateMultipleDynAnys(values, allowTruncate);
		}
		[IdlName("create_multiple_anys")]
		public override CORBA.Any[] CreateMultipleAnys(DynamicAny.IDynAny[] values)
		{
			return _OperationsDelegate.CreateMultipleAnys(values);
		}
	}
}
