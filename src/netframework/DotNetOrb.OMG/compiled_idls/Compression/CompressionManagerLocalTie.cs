/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:37
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace Compression
{

	public class CompressionManagerLocalTie: _CompressionManagerLocalBase
	{
		public ICompressionManagerOperations _OperationsDelegate { get; set; }

		public CompressionManagerLocalTie(ICompressionManagerOperations d)
		{
			_OperationsDelegate = d;
		}

		[IdlName("register_factory")]
		[ThrowsIdlException(typeof(Compression.FactoryAlreadyRegistered))]
		public override void RegisterFactory(Compression.ICompressorFactory compressorFactory)
		{
			_OperationsDelegate.RegisterFactory(compressorFactory);
		}
		[IdlName("unregister_factory")]
		[ThrowsIdlException(typeof(Compression.UnknownCompressorId))]
		public override void UnregisterFactory(ushort compressorId)
		{
			_OperationsDelegate.UnregisterFactory(compressorId);
		}
		[IdlName("get_factory")]
		[ThrowsIdlException(typeof(Compression.UnknownCompressorId))]
		public override Compression.ICompressorFactory GetFactory(ushort compressorId)
		{
			return _OperationsDelegate.GetFactory(compressorId);
		}
		[IdlName("get_compressor")]
		[ThrowsIdlException(typeof(Compression.UnknownCompressorId))]
		public override Compression.ICompressor GetCompressor(ushort compressorId, ushort compressionLevel)
		{
			return _OperationsDelegate.GetCompressor(compressorId, compressionLevel);
		}
		[IdlName("get_factories")]
		public override Compression.ICompressorFactory[] GetFactories()
		{
			return _OperationsDelegate.GetFactories();
		}
	}
}
