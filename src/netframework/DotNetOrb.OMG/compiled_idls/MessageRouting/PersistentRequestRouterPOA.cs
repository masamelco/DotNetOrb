/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:36
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace MessageRouting
{

	public abstract class PersistentRequestRouterPOA: PortableServer.Servant, CORBA.IInvokeHandler, IPersistentRequestRouterOperations
	{
		static private Dictionary<string,int> _opsDict = new Dictionary<string,int>();
		static PersistentRequestRouterPOA()
		{
			_opsDict.Add("create_persistent_request", 0);
		}
		private string[] _ids = {"IDL:MessageRouting/PersistentRequestRouter:1.0"};

		[IdlName("create_persistent_request")]
		public abstract MessageRouting.IPersistentRequest CreatePersistentRequest(ushort profileIndex, MessageRouting.IRouter[] toVisit, CORBA.IObject target, CORBA.IPolicy[] currentQos, MessageRouting.RequestMessage payload);

		public override string[] _AllInterfaces(PortableServer.IPOA poa, byte[] objId)
		{
			return _ids;
		}

		public virtual MessageRouting.IPersistentRequestRouter _This()
		{
			return MessageRouting.PersistentRequestRouterHelper.Narrow(_ThisObject());
		}

		public virtual MessageRouting.IPersistentRequestRouter _This(CORBA.ORB orb)
		{
			return MessageRouting.PersistentRequestRouterHelper.Narrow(_ThisObject(orb));
		}

		public CORBA.IOutputStream _Invoke(string method, CORBA.IInputStream inputStream, CORBA.IResponseHandler handler)
		{
			CORBA.IOutputStream outputStream = null;
			int opIndex;
			if (_opsDict.TryGetValue(method, out opIndex))
			{
				switch (opIndex)
				{
					case 0:
					{
							ushort profileIndex;
							profileIndex = inputStream.ReadUShort();
							MessageRouting.IRouter[] toVisit;
							{
								var _capacity0 = inputStream.ReadLong();
								if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
								{
									throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
								}
								toVisit = new MessageRouting.IRouter[_capacity0];
								for (int i0 = 0; i0 < _capacity0; i0++)
								{
									MessageRouting.IRouter _item0;
									_item0 = MessageRouting.RouterHelper.Read(inputStream);
									toVisit[i0] = _item0;
								}
							}
							CORBA.IObject target;
							target = inputStream.ReadObject();
							CORBA.IPolicy[] currentQos;
							{
								var _capacity0 = inputStream.ReadLong();
								if (inputStream.Available > 0 && _capacity0 > inputStream.Available)
								{
									throw new Marshal($"Sequence length too large. Only {inputStream.Available} and trying to assign {_capacity0}");
								}
								currentQos = new CORBA.IPolicy[_capacity0];
								for (int i0 = 0; i0 < _capacity0; i0++)
								{
									CORBA.IPolicy _item0;
									_item0 = CORBA.PolicyHelper.Read(inputStream);
									currentQos[i0] = _item0;
								}
							}
							MessageRouting.RequestMessage payload;
							payload = MessageRouting.RequestMessageHelper.Read(inputStream);
							outputStream = handler.CreateReply();
							var _result = CreatePersistentRequest(profileIndex, toVisit, target, currentQos, payload);
							MessageRouting.PersistentRequestHelper.Write(outputStream, _result);
					}
					break;
				}
				return outputStream;
			}
			else
			{
				throw new CORBA.BadOperation(method + " not found");
			}
		}
	}
}
