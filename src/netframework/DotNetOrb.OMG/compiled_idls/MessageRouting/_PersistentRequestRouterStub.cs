/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:36
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace MessageRouting
{
	public class _PersistentRequestRouterStub: CORBA.Object, IPersistentRequestRouter
	{
		private new string[] _ids = {"IDL:MessageRouting/PersistentRequestRouter:1.0"};

		public override string[] _Ids()
		{
			return _ids;
		}

		public static Type _opsType = typeof(IPersistentRequestRouterOperations);

		[IdlName("create_persistent_request")]
		public MessageRouting.IPersistentRequest CreatePersistentRequest(ushort profileIndex, MessageRouting.IRouter[] toVisit, CORBA.IObject target, CORBA.IPolicy[] currentQos, MessageRouting.RequestMessage payload)
		{
			while(true)
			{
				IInputStream inputStream = null;
				IOutputStream outputStream = null;
				try
				{
					outputStream = _Request("create_persistent_request", true);
					outputStream.WriteUShort(profileIndex);
					{
						outputStream.WriteLong(toVisit.Length);
						for (int i0 = 0; i0 < toVisit.Length; i0++)
						{
							MessageRouting.RouterHelper.Write(outputStream, toVisit[i0]);
						}
					}
					outputStream.WriteObject(target);
					{
						outputStream.WriteLong(currentQos.Length);
						for (int i0 = 0; i0 < currentQos.Length; i0++)
						{
							CORBA.PolicyHelper.Write(outputStream, currentQos[i0]);
						}
					}
					MessageRouting.RequestMessageHelper.Write(outputStream, payload);
					inputStream = _Invoke(outputStream);
					MessageRouting.IPersistentRequest _result;
					_result = MessageRouting.PersistentRequestHelper.Read(inputStream);
					return _result;
				}
				catch(RemarshalException)
				{
					continue;
				}
				catch(CORBA.ApplicationException aex)
				{
					try
					{
						switch (aex.Id)
						{
							default:
								throw new RuntimeException("Unexpected exception " + aex.Id);
						}						
					}
					finally
					{
						try
						{
							aex.InputStream.Close();
						}
						catch (Exception ex)
						{
							throw new RuntimeException("Unexpected exception " + ex.ToString());
						}
					}
				}
				finally
				{
					if (outputStream != null)
					{
						try
						{
							outputStream.Close();
						}
						catch (Exception e)
						{
							throw new RuntimeException("Unexpected exception " + e.ToString());
						}
					}
					if (inputStream != null)
					{
						this._ReleaseReply(inputStream);
					}
				}
			}
		}

	}

}
