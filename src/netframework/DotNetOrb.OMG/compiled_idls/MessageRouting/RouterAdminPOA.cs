/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:35
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace MessageRouting
{

	public abstract class RouterAdminPOA: PortableServer.Servant, CORBA.IInvokeHandler, IRouterAdminOperations
	{
		static private Dictionary<string,int> _opsDict = new Dictionary<string,int>();
		static RouterAdminPOA()
		{
			_opsDict.Add("register_destination", 0);
			_opsDict.Add("suspend_destination", 1);
			_opsDict.Add("resume_destination", 2);
			_opsDict.Add("unregister_destination", 3);
		}
		private string[] _ids = {"IDL:MessageRouting/RouterAdmin:1.0"};

		[IdlName("register_destination")]
		public abstract void RegisterDestination(CORBA.IObject dest, bool isRouter, MessageRouting.RetryPolicy retry, MessageRouting.DecayPolicy decay);
		[IdlName("suspend_destination")]
		[ThrowsIdlException(typeof(MessageRouting.InvalidState))]
		public abstract void SuspendDestination(CORBA.IObject dest, MessageRouting.ResumePolicy resumption);
		[IdlName("resume_destination")]
		[ThrowsIdlException(typeof(MessageRouting.InvalidState))]
		public abstract void ResumeDestination(CORBA.IObject dest);
		[IdlName("unregister_destination")]
		[ThrowsIdlException(typeof(MessageRouting.InvalidState))]
		public abstract void UnregisterDestination(CORBA.IObject dest);

		public override string[] _AllInterfaces(PortableServer.IPOA poa, byte[] objId)
		{
			return _ids;
		}

		public virtual MessageRouting.IRouterAdmin _This()
		{
			return MessageRouting.RouterAdminHelper.Narrow(_ThisObject());
		}

		public virtual MessageRouting.IRouterAdmin _This(CORBA.ORB orb)
		{
			return MessageRouting.RouterAdminHelper.Narrow(_ThisObject(orb));
		}

		public CORBA.IOutputStream _Invoke(string method, CORBA.IInputStream inputStream, CORBA.IResponseHandler handler)
		{
			CORBA.IOutputStream outputStream = null;
			int opIndex;
			if (_opsDict.TryGetValue(method, out opIndex))
			{
				switch (opIndex)
				{
					case 0:
					{
							CORBA.IObject dest;
							dest = inputStream.ReadObject();
							bool isRouter;
							isRouter = inputStream.ReadBoolean();
							MessageRouting.RetryPolicy retry;
							retry = RetryPolicyHelper.Read(inputStream);
							MessageRouting.DecayPolicy decay;
							decay = DecayPolicyHelper.Read(inputStream);
							outputStream = handler.CreateReply();
							RegisterDestination(dest,isRouter,retry,decay);
					}
					break;
					case 1:
					{
						try
						{
							CORBA.IObject dest;
							dest = inputStream.ReadObject();
							MessageRouting.ResumePolicy resumption;
							resumption = ResumePolicyHelper.Read(inputStream);
							outputStream = handler.CreateReply();
							SuspendDestination(dest,resumption);
						}
						catch(MessageRouting.InvalidState ex)
						{
							outputStream = handler.CreateExceptionReply();
							MessageRouting.InvalidStateHelper.Write(outputStream, ex);
						}
					}
					break;
					case 2:
					{
						try
						{
							CORBA.IObject dest;
							dest = inputStream.ReadObject();
							outputStream = handler.CreateReply();
							ResumeDestination(dest);
						}
						catch(MessageRouting.InvalidState ex)
						{
							outputStream = handler.CreateExceptionReply();
							MessageRouting.InvalidStateHelper.Write(outputStream, ex);
						}
					}
					break;
					case 3:
					{
						try
						{
							CORBA.IObject dest;
							dest = inputStream.ReadObject();
							outputStream = handler.CreateReply();
							UnregisterDestination(dest);
						}
						catch(MessageRouting.InvalidState ex)
						{
							outputStream = handler.CreateExceptionReply();
							MessageRouting.InvalidStateHelper.Write(outputStream, ex);
						}
					}
					break;
				}
				return outputStream;
			}
			else
			{
				throw new CORBA.BadOperation(method + " not found");
			}
		}
	}
}
