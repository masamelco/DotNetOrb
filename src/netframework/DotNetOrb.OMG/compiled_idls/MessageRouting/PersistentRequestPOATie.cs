/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:36
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;


namespace MessageRouting
{

	public class PersistentRequestPOATie: PersistentRequestPOA
	{
		public IPersistentRequestOperations _OperationsDelegate { get; set; }
		private PortableServer.IPOA _poa;

		public PersistentRequestPOATie(IPersistentRequestOperations d)
		{
			_OperationsDelegate = d;
		}

		public PersistentRequestPOATie(IPersistentRequestOperations d, PortableServer.POA poa)
		{
			_OperationsDelegate = d;
			_poa = poa;
		}

		public override PortableServer.IPOA _DefaultPOA()
		{
			if (_poa != null)
			{
				return _poa;
			}
			return base._DefaultPOA();
		}

		public override MessageRouting.IPersistentRequest _This()
		{
			return MessageRouting.PersistentRequestHelper.Narrow(_ThisObject());
		}

		public override MessageRouting.IPersistentRequest _This(CORBA.ORB orb)
		{
			return MessageRouting.PersistentRequestHelper.Narrow(_ThisObject(orb));
		}

		public override bool ReplyAvailable 
		{
			get
			{
				return _OperationsDelegate.ReplyAvailable;
			}
		}
		[IdlName("get_reply")]
		[ThrowsIdlException(typeof(MessageRouting.ReplyNotAvailable))]
		public override GIOP.ReplyStatusType12 GetReply(bool blocking, uint timeout, out MessageRouting.MessageBody replyBody)
		{
			return _OperationsDelegate.GetReply(blocking, timeout, out replyBody);
		}
		public override Messaging.IReplyHandler AssociatedHandler 
		{
			get
			{
				return _OperationsDelegate.AssociatedHandler;
			}

			set
			{
				_OperationsDelegate.AssociatedHandler = value;
			}
		}
		[IdlName("get_reply_with_context")]
		[ThrowsIdlException(typeof(MessageRouting.ReplyNotAvailable))]
		public override GIOP.ReplyStatusType12 GetReplyWithContext(bool blocking, uint timeout, out MessageRouting.MessageBody replyBody, out IOP.ServiceContext[] serviceContexts)
		{
			return _OperationsDelegate.GetReplyWithContext(blocking, timeout, out replyBody, out serviceContexts);
		}
	}
}
