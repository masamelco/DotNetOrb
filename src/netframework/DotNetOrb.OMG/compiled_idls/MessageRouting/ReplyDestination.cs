/**
 * Generated by DotNetORb.IdlCompiler V 1.0.0.0
 * Timestamp: 25/02/2024 9:49:35
 *
 */

using System;
using System.Collections.Generic;
using System.Linq;
using CORBA;

namespace MessageRouting
{
	[RepositoryID("IDL:MessageRouting/ReplyDestination:1.0")]
	[Helper(typeof(ReplyDestinationHelper))]
	public partial class ReplyDestination: CORBA.IIDLEntity, IEquatable<MessageRouting.ReplyDestination>
	{
		[IdlName("ReplyDestination")]
		public MessageRouting.ReplyDisposition HandlerType { get; set; }
		[IdlName("ReplyDestination")]
		public Messaging.IReplyHandler Handler { get; set; }
		[IdlName("ReplyDestination")]
		public string[] TypedExcepHolderRepids { get; set; }

		public ReplyDestination()
		{
		}

		public ReplyDestination(ReplyDestination other)
		{
			HandlerType = other.HandlerType;
			Handler = other.Handler;
			TypedExcepHolderRepids = other.TypedExcepHolderRepids;
		}

		public ReplyDestination(MessageRouting.ReplyDisposition handlerType, Messaging.IReplyHandler handler, string[] typedExcepHolderRepids)
		{
			this.HandlerType = handlerType;
			this.Handler = handler;
			this.TypedExcepHolderRepids = typedExcepHolderRepids;
		}

		public bool Equals(MessageRouting.ReplyDestination? other)
		{
			if (other == null) return false;
			if (!HandlerType.Equals(other.HandlerType)) return false;
			if (!Handler.Equals(other.Handler)) return false;
			if (!TypedExcepHolderRepids.SequenceEqual(other.TypedExcepHolderRepids)) return false;
			return true;
		}
	}

}
